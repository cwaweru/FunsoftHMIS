/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */
package com.afrisoftech.hospital;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.afrisoftech.lib.DBObject;
import java.beans.PropertyChangeEvent;
import java.sql.Date;

/**
 *
 * @author Charles Waweru Francis King'oi Peter Ndung'u
 */
public class AdmissionIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    com.afrisoftech.lib.DBObject dbObject;//= new com.afrisoftech.lib.DBObject();
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    com.afrisoftech.timeseries.YearyAgeing ageingSeries = null;
    private boolean autonumber;
    String selectedStatus = null;
    String dateOfBirth = null;
    double ageYrs = 0.00;

    //  private double rse11x = 0.00;
    public AdmissionIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        this.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());
        com.afrisoftech.dbadmin.JTable predicateTable = (com.afrisoftech.dbadmin.JTable) occupationTable;
        predicateTable.setHighlighterPipeline(predicateTable, new org.jdesktop.swing.decorator.PatternHighlighter[]{
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.YELLOW, java.awt.Color.BLACK, "HDU", 3, 4),
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.RED, java.awt.Color.BLACK, "ACUTE ROOM", 1, 4),
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.GREEN, java.awt.Color.BLACK, "General Bed", 2, 4),
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.PINK, java.awt.Color.BLACK, "ICU", 3, 4),
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.CYAN, java.awt.Color.BLACK, "E WARD", 3, 4),
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.ORANGE, java.awt.Color.BLACK, "0", 3, 8, 8),
            new org.jdesktop.swing.decorator.PatternHighlighter(java.awt.Color.MAGENTA, java.awt.Color.BLACK, ".>0.00", 3, 8, 8)
        });
        // }
        //     System.out.println("Connection Password : "+crset1.getPasswordInfo().getPassword());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog2 = new javax.swing.JDialog();
        jDialog2.setSize(600,400);
        jPanel11 = new javax.swing.JPanel();
        jLabel5822 = new javax.swing.JLabel();
        jLabel661 = new javax.swing.JLabel();
        jTextField141 = new javax.swing.JTextField();
        jTextField31 = new javax.swing.JTextField();
        jLabel58211 = new javax.swing.JLabel();
        jLabel57211 = new javax.swing.JLabel();
        jTextField58211 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jTextField151 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jTextField41 = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jTextField51 = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jTextField161 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jButton3011 = new javax.swing.JButton();
        jButton1521 = new javax.swing.JButton();
        jButton2021 = new javax.swing.JButton();
        jButton2521 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jSeparator711 = new javax.swing.JSeparator();
        jLabel62 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        ipSearchDialog = new javax.swing.JDialog();
        ipSearchPanel = new javax.swing.JPanel();
        ipSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        ipSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton41 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        opSearchDialog = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        opSearchFieldTxt = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        opSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton411 = new javax.swing.JButton();
        jButton511 = new javax.swing.JButton();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1112 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        select1 = new javax.swing.JButton();
        dispose1 = new javax.swing.JButton();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton512 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField11131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton5121 = new javax.swing.JButton();
        previousVisitIDDialog = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField1114 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton513 = new javax.swing.JButton();
        buttonGroup6 = new javax.swing.ButtonGroup();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel5 = new javax.swing.JPanel();
        jTextField28 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JXTable();
        disposeBtn = new javax.swing.JButton();
        ageTxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        hospitalCategoryChkbx = new javax.swing.JCheckBox();
        privateCategoryChkbx = new javax.swing.JCheckBox();
        patientUrgencyCMBX = new javax.swing.JComboBox();
        jPanel101 = new javax.swing.JPanel();
        newAdimissionRbtn = new javax.swing.JRadioButton();
        reAdmissionRbtn = new javax.swing.JRadioButton();
        createManualNumbersRbtn = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        searchbyPatientNameChkbx = new javax.swing.JCheckBox();
        searchbyPatientNumberChkbx = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        admitPrintBtn = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        admissionsReportBtn = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel17 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        religionCmbx = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        districtCmbx = new javax.swing.JComboBox();
        jLabel39 = new javax.swing.JLabel();
        locationTxt = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jTextField27 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        unitNumberTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        nationalityCmbx = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        occupationCmbx = new javax.swing.JComboBox();
        jLabel30 = new javax.swing.JLabel();
        idPassportTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        currentResidence = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        nokTelephoneTxt = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel66 = new javax.swing.JLabel();
        datePickerYOB = new com.afrisoftech.lib.DatePicker();
        jLabel36 = new javax.swing.JLabel();
        agelabel = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        ageYrsTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jTextField361 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        admissionNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        surNameTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        firstNameTxt = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        maleChkbx = new javax.swing.JCheckBox();
        femaleChkbx = new javax.swing.JCheckBox();
        jPanel4113 = new javax.swing.JPanel();
        singleMaritalChkbx = new javax.swing.JCheckBox();
        marriedMaritalChkbx = new javax.swing.JCheckBox();
        divorcedMaritalChkbx = new javax.swing.JCheckBox();
        widowedMaritalChkbx = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        admissionWardCmbx = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        wardCodeTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        bedNumberCmbx = new javax.swing.JComboBox();
        jLabel141 = new javax.swing.JLabel();
        bedCategoryCmbx = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        bedRateTxt = new javax.swing.JTextField();
        jPanel31 = new javax.swing.JPanel();
        jTextField121 = new javax.swing.JTextField();
        searchButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel1411 = new javax.swing.JLabel();
        specialtyClinicCmbx = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jLabel142 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jLabel110 = new javax.swing.JLabel();
        jTextField42 = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        jTextField72 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel92 = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        prevVisitIdtxt = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jTextField82 = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel50 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        patientDisabilityCmbx = new javax.swing.JComboBox();
        patientDebtTxt = new javax.swing.JTextField();
        referredcombo = new javax.swing.JComboBox();
        jPanel14 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        nokNameTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        paymentModeCmbx = new javax.swing.JComboBox();
        nhifChbx = new javax.swing.JCheckBox();
        jPanel81 = new javax.swing.JPanel();
        jCheckBox221 = new javax.swing.JCheckBox();
        jCheckBox311 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jLabel26 = new javax.swing.JLabel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel29 = new javax.swing.JLabel();
        nokRelationShipCmbx = new javax.swing.JComboBox();
        idNoLbl2 = new javax.swing.JLabel();
        nokResidenceTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        oldFileNumberTxt = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        nhifClaimNumberTxt = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        countyofBirthCmbx = new javax.swing.JComboBox();
        countyofResidenceCmbx = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        employerTxt = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        employerTelTxt = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        cSheetNoTxt = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        educationLevelCmbx = new javax.swing.JComboBox();
        jLabel48 = new javax.swing.JLabel();
        nhifCardMemberNumberTxt = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        nokteltxt = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jPanel21.setVisible(false);
        jLabel71 = new javax.swing.JLabel();
        jComboBox31 = new javax.swing.JComboBox();
        jTextField71 = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        cardNumberTxt = new javax.swing.JTextField();
        jLabel151 = new javax.swing.JLabel();
        datePicker21 = new com.afrisoftech.lib.DatePicker();
        jPanel5 = new javax.swing.JPanel();
        jPanel5.setVisible(false);
        jLabel102 = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        jLabel172 = new javax.swing.JLabel();
        jLabel143 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jLabel182 = new javax.swing.JLabel();
        jPanel64 = new javax.swing.JPanel();
        jTextField36 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        memberNumberTxt = new javax.swing.JTextField();
        jPanel641 = new javax.swing.JPanel();
        jTextField3611 = new javax.swing.JTextField();
        searchButton21 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        admissionListingPanel = new javax.swing.JPanel();
        refreshScrollPane = new javax.swing.JScrollPane();
        admissionListingTable = new com.afrisoftech.dbadmin.JTable();
        startDateLbl = new javax.swing.JLabel();
        endDateLbl = new javax.swing.JLabel();
        startDatePicker = new com.afrisoftech.lib.DatePicker();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        refreshBtn = new javax.swing.JButton();
        reportTypeChooserCmbx = new javax.swing.JComboBox();
        spacerLabel = new javax.swing.JLabel();
        admissionAnalysisPanel = new javax.swing.JPanel();
        admissionScrollPane = new javax.swing.JScrollPane();
        admissionAnalysisTable = new com.afrisoftech.dbadmin.JTable();
        startDateLbl1 = new javax.swing.JLabel();
        endDateLbl1 = new javax.swing.JLabel();
        startDatePicker1 = new com.afrisoftech.lib.DatePicker();
        endDatePicker1 = new com.afrisoftech.lib.DatePicker();
        refreshBtn1 = new javax.swing.JButton();
        reportTypeChooserCmbx1 = new javax.swing.JComboBox();
        spacerLabel1 = new javax.swing.JLabel();
        occupancyReportPanel = new javax.swing.JPanel();
        occupationsHeaderTable = new javax.swing.JPanel();
        wardNameCmbx = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        patientNumber = new javax.swing.JTextField();
        searchFileBtn = new javax.swing.JButton();
        occupationsPanel = new javax.swing.JPanel();
        occupationJScrl = new javax.swing.JScrollPane();
        occupationTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        occupationButtonPanel = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        totalsLabel = new javax.swing.JLabel();
        previousPanel = new javax.swing.JPanel();
        previousVisitsScrollPane = new javax.swing.JScrollPane();
        previousVisitsTable = new com.afrisoftech.dbadmin.JXTable();

        jDialog2.setTitle("New Patient Registar");
        jDialog2.setModal(true);
        jDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter patient details here"));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jLabel5822.setText("Surname");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel5822, gridBagConstraints);

        jLabel661.setText("Year of Birth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel661, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel11.add(jTextField141, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jTextField31, gridBagConstraints);

        jLabel58211.setText("Other Names");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel58211, gridBagConstraints);

        jLabel57211.setText("Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel57211, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel11.add(jTextField58211, gridBagConstraints);

        jLabel31.setText("Residence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel11.add(jLabel31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jTextField151, gridBagConstraints);

        jLabel41.setText("Next of kin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel41, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel11.add(jTextField41, gridBagConstraints);

        jLabel51.setText("Telephone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        jPanel11.add(jLabel51, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel11.add(jTextField51, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Gender"));
        jPanel41.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox11);
        jCheckBox11.setText("Male ");
        jCheckBox11.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        jPanel41.add(jCheckBox11, gridBagConstraints);

        buttonGroup1.add(jCheckBox21);
        jCheckBox21.setText("Female ");
        jCheckBox21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jCheckBox21.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        jPanel41.add(jCheckBox21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        jPanel11.add(jPanel41, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jTextField161, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        jPanel11.add(jPanel4, gridBagConstraints);

        jLabel32.setText("O/P No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel11.add(jLabel32, gridBagConstraints);

        jLabel13.setText("Admission No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel11.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel11.add(jTextField21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jDialog2.getContentPane().add(jPanel11, gridBagConstraints);

        jButton3011.setMnemonic('O');
        jButton3011.setText("Ok");
        jButton3011.setToolTipText("Click here to enter data");
        jButton3011.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3011ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialog2.getContentPane().add(jButton3011, gridBagConstraints);

        jButton1521.setMnemonic('E');
        jButton1521.setText("Edit");
        jButton1521.setToolTipText("Click here to edit data");
        jButton1521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialog2.getContentPane().add(jButton1521, gridBagConstraints);

        jButton2021.setMnemonic('n');
        jButton2021.setText("Clear");
        jButton2021.setToolTipText("Click here to clear fields");
        jButton2021.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2021ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialog2.getContentPane().add(jButton2021, gridBagConstraints);

        jButton2521.setMnemonic('c');
        jButton2521.setText("Close");
        jButton2521.setToolTipText("Click here to close window");
        jButton2521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialog2.getContentPane().add(jButton2521, gridBagConstraints);

        jButton11.setMnemonic('h');
        jButton11.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialog2.getContentPane().add(jButton11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jDialog2.getContentPane().add(jSeparator711, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jDialog2.getContentPane().add(jLabel62, gridBagConstraints);

        ipSearchDialog.setModal(true);
        ipSearchDialog.setUndecorated(true);
        ipSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        ipSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ipSearchPanel.setLayout(new java.awt.GridBagLayout());

        ipSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ipSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        ipSearchPanel.add(ipSearchTxt, gridBagConstraints);

        ipSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        ipSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = ipSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        ipSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ipSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(ipSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        ipSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton41.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipSearchPanel.add(jButton41, gridBagConstraints);

        jButton51.setText("Close");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipSearchPanel.add(jButton51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipSearchDialog.getContentPane().add(ipSearchPanel, gridBagConstraints);

        opSearchDialog.setModal(true);
        opSearchDialog.setUndecorated(true);
        opSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        opSearchFieldTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                opSearchFieldTxtCaretUpdate(evt);
            }
        });
        opSearchFieldTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opSearchFieldTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel1.add(opSearchFieldTxt, gridBagConstraints);

        opSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        opSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = ipSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        opSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                opSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(opSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton411.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton411, gridBagConstraints);

        jButton511.setText("Close");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        opSearchDialog.getContentPane().add(jSearchPanel1, gridBagConstraints);

        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1112, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                ipSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = ipSearchTable.getModel();

                jSearchScrollPane.setViewportView(ipSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = ipSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable11MouseClicked(evt);
                }
            });
            jSearchScrollPane11.setViewportView(jSearchTable11);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

            select1.setText("Select");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(select1, gridBagConstraints);

            dispose1.setMnemonic('l');
            dispose1.setText("Close");
            dispose1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(dispose1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

            jSearchDialog2.setModal(true);
            jSearchDialog2.setUndecorated(true);
            jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel2.setLayout(new java.awt.GridBagLayout());

            jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1113CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel2.add(jTextField1113, gridBagConstraints);

            jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable2.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = ipSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable2MouseClicked(evt);
                }
            });
            jSearchScrollPane2.setViewportView(jSearchTable2);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

            jButton512.setText("Close");
            jButton512.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton512ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel2.add(jButton512, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

            jSearchDialog21.setModal(true);
            jSearchDialog21.setUndecorated(true);
            jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel21.setLayout(new java.awt.GridBagLayout());

            jTextField11131.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField11131CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel21.add(jTextField11131, gridBagConstraints);

            jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable21.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = ipSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable21MouseClicked(evt);
                }
            });
            jSearchScrollPane21.setViewportView(jSearchTable21);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

            jButton5121.setText("Close");
            jButton5121.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton5121ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton5121, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

            previousVisitIDDialog.setModal(true);
            previousVisitIDDialog.setUndecorated(true);
            previousVisitIDDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel3.setLayout(new java.awt.GridBagLayout());

            jTextField1114.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1114CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel3.add(jTextField1114, gridBagConstraints);

            jSearchTable3.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable3.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = ipSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable3MouseClicked(evt);
                }
            });
            jSearchScrollPane3.setViewportView(jSearchTable3);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

            jButton513.setText("Close");
            jButton513.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton513ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel3.add(jButton513, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            previousVisitIDDialog.getContentPane().add(jSearchPanel3, gridBagConstraints);

            jSearchDialog4.setAutoRequestFocus(false);
            jSearchDialog4.setFocusable(false);
            jSearchDialog4.setFocusableWindowState(false);
            jSearchDialog4.setUndecorated(true);
            jSearchDialog4.setResizable(false);
            jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel5.setLayout(new java.awt.GridBagLayout());

            jTextField28.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 100.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel5.add(jTextField28, gridBagConstraints);

            jSearchTable4.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            jSearchScrollPane4.setViewportView(jSearchTable4);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 300.0;
            jSearchPanel5.add(jSearchScrollPane4, gridBagConstraints);

            disposeBtn.setText("Cancel");
            disposeBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    disposeBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel5.add(disposeBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 100.0;
            jSearchDialog4.getContentPane().add(jSearchPanel5, gridBagConstraints);

            ageTxt.setToolTipText("Enter age of patient here");
            ageTxt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            ageTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    ageTxtCaretUpdate(evt);
                }
            });

            setClosable(true);
            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            setTitle("Patient Admission File - Form 301");
            setToolTipText("Company profile form");
            setVisible(true);
            getContentPane().setLayout(new java.awt.GridBagLayout());
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jSeparator1, gridBagConstraints);

            jLabel12.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jLabel12, gridBagConstraints);

            jPanel9.setBackground(new java.awt.Color(255, 239, 255));
            jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel9.setLayout(new java.awt.GridBagLayout());

            jPanel8.setBackground(new java.awt.Color(255, 239, 255));
            jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10), new java.awt.Color(255, 0, 255))); // NOI18N
            jPanel8.setLayout(new java.awt.GridBagLayout());

            hospitalCategoryChkbx.setBackground(new java.awt.Color(255, 239, 255));
            buttonGroup3.add(hospitalCategoryChkbx);
            hospitalCategoryChkbx.setSelected(true);
            hospitalCategoryChkbx.setText("Hospital");
            hospitalCategoryChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            hospitalCategoryChkbx.setIconTextGap(0);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel8.add(hospitalCategoryChkbx, gridBagConstraints);

            privateCategoryChkbx.setBackground(new java.awt.Color(255, 239, 255));
            buttonGroup3.add(privateCategoryChkbx);
            privateCategoryChkbx.setText("Private");
            privateCategoryChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            privateCategoryChkbx.setIconTextGap(0);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel8.add(privateCategoryChkbx, gridBagConstraints);

            patientUrgencyCMBX.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            patientUrgencyCMBX.setForeground(new java.awt.Color(255, 0, 51));
            patientUrgencyCMBX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Patient Urgency", "Emergency", "Normal" }));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel8.add(patientUrgencyCMBX, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            jPanel9.add(jPanel8, gridBagConstraints);

            jPanel101.setBackground(new java.awt.Color(255, 239, 255));
            jPanel101.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tick where appropriate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
            jPanel101.setLayout(new java.awt.GridBagLayout());

            newAdimissionRbtn.setBackground(new java.awt.Color(255, 239, 255));
            buttonGroup5.add(newAdimissionRbtn);
            newAdimissionRbtn.setText("New Admission File");
            newAdimissionRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            newAdimissionRbtn.setIconTextGap(1);
            newAdimissionRbtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    newAdimissionRbtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel101.add(newAdimissionRbtn, gridBagConstraints);

            reAdmissionRbtn.setBackground(new java.awt.Color(255, 239, 255));
            buttonGroup5.add(reAdmissionRbtn);
            reAdmissionRbtn.setText("Re-Admission");
            reAdmissionRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            reAdmissionRbtn.setIconTextGap(0);
            reAdmissionRbtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    reAdmissionRbtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel101.add(reAdmissionRbtn, gridBagConstraints);

            createManualNumbersRbtn.setVisible(false);
            createManualNumbersRbtn.setBackground(new java.awt.Color(204, 204, 204));
            buttonGroup5.add(createManualNumbersRbtn);
            createManualNumbersRbtn.setForeground(new java.awt.Color(51, 51, 255));
            createManualNumbersRbtn.setSelected(true);
            createManualNumbersRbtn.setText("Create Old Patient File");
            createManualNumbersRbtn.setEnabled(false);
            createManualNumbersRbtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            createManualNumbersRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            createManualNumbersRbtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    createManualNumbersRbtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel101.add(createManualNumbersRbtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel9.add(jPanel101, gridBagConstraints);

            jPanel7.setBackground(new java.awt.Color(255, 239, 255));
            jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search By", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10), new java.awt.Color(0, 0, 255))); // NOI18N
            jPanel7.setLayout(new java.awt.GridBagLayout());

            searchbyPatientNameChkbx.setBackground(new java.awt.Color(255, 239, 255));
            buttonGroup2.add(searchbyPatientNameChkbx);
            searchbyPatientNameChkbx.setText("Name");
            searchbyPatientNameChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            searchbyPatientNameChkbx.setIconTextGap(0);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel7.add(searchbyPatientNameChkbx, gridBagConstraints);

            searchbyPatientNumberChkbx.setBackground(new java.awt.Color(255, 239, 255));
            buttonGroup2.add(searchbyPatientNumberChkbx);
            searchbyPatientNumberChkbx.setSelected(true);
            searchbyPatientNumberChkbx.setText("Patient No.");
            searchbyPatientNumberChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            searchbyPatientNumberChkbx.setIconTextGap(0);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel7.add(searchbyPatientNumberChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            jPanel9.add(jPanel7, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jPanel9, gridBagConstraints);

            jPanel10.setBackground(new java.awt.Color(255, 204, 204));
            jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel10.setLayout(new java.awt.GridBagLayout());

            jButton1.setMnemonic('A');
            jButton1.setText("Admit");
            jButton1.setToolTipText("click to store data");
            jButton1.setEnabled(false);
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton1, gridBagConstraints);

            jButton2.setMnemonic('E');
            jButton2.setText("Edit");
            jButton2.setToolTipText("click to edit&update");
            jButton2.setEnabled(false);
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton2, gridBagConstraints);

            jButton3.setMnemonic('n');
            jButton3.setText("Cancel");
            jButton3.setToolTipText("click to clear fields");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton3, gridBagConstraints);

            jButton4.setMnemonic('C');
            jButton4.setText("Close");
            jButton4.setToolTipText("Click to close");
            jButton4.setSelected(true);
            jButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton4, gridBagConstraints);

            jButton9.setText("Help");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton9, gridBagConstraints);

            jButton5.setMnemonic('S');
            jButton5.setText("Read Smart Card");
            jButton5.setToolTipText("Click to read smart card data");
            jButton5.setEnabled(false);
            jButton5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton5ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton5, gridBagConstraints);

            admitPrintBtn.setText("Admit & Print");
            admitPrintBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    admitPrintBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(admitPrintBtn, gridBagConstraints);

            jButton6.setText("Reprint File");
            jButton6.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton6ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(jButton6, gridBagConstraints);

            buttonGroup5.add(jRadioButton1);
            jRadioButton1.setText("Edit / Reprint File");
            jRadioButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jRadioButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel10.add(jRadioButton1, gridBagConstraints);

            admissionsReportBtn.setText("Admissions Report");
            admissionsReportBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    admissionsReportBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel10.add(admissionsReportBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridheight = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jPanel10, gridBagConstraints);

            jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            getContentPane().add(jLabel33, gridBagConstraints);

            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter patient details (You can search by Admission/Patient number, ID number, Telephone Number or Next of Kin details)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));
            jPanel1.setForeground(new java.awt.Color(0, 255, 204));
            jPanel1.setLayout(new java.awt.GridBagLayout());

            jPanel12.setLayout(new java.awt.GridBagLayout());

            jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Provisional Diagnosis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10), new java.awt.Color(255, 51, 153))); // NOI18N

            jTextPane1.setText("N/A");
            jScrollPane1.setViewportView(jTextPane1);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel12.add(jScrollPane1, gridBagConstraints);

            jPanel17.setBackground(new java.awt.Color(204, 255, 204));
            jPanel17.setLayout(new java.awt.GridBagLayout());

            jLabel38.setText("Religion");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel38, gridBagConstraints);

            religionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT religion_name FROM pb_religion union select '-' as religion_name ORDER BY religion_name"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(religionCmbx, gridBagConstraints);

            jLabel19.setText("Place of Birth");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel19, gridBagConstraints);

            districtCmbx.setEditable(true);
            districtCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT district_name FROM pb_district ORDER BY district_name"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(districtCmbx, gridBagConstraints);

            jLabel39.setText("Location");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel39, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(locationTxt, gridBagConstraints);

            jLabel40.setText("Name of Chief");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel40, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(jTextField27, gridBagConstraints);

            jLabel42.setForeground(new java.awt.Color(255, 51, 153));
            jLabel42.setText("Old File Number(Unit Number)");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel42, gridBagConstraints);

            unitNumberTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    unitNumberTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(unitNumberTxt, gridBagConstraints);

            jLabel17.setForeground(new java.awt.Color(255, 51, 153));
            jLabel17.setText("Nationality");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel17, gridBagConstraints);

            nationalityCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT country_name FROM pb_country ORDER BY 1"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(nationalityCmbx, gridBagConstraints);

            jLabel35.setText("Occupation");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel35, gridBagConstraints);

            occupationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT occupations FROM pb_occupation ORDER BY occupations"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(occupationCmbx, gridBagConstraints);

            jLabel30.setForeground(new java.awt.Color(255, 51, 153));
            jLabel30.setText("ID No / Passport No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel30, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(idPassportTxt, gridBagConstraints);

            jLabel14.setForeground(new java.awt.Color(255, 51, 153));
            jLabel14.setText("Residence (Village)");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel14, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.8;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(currentResidence, gridBagConstraints);

            jLabel8.setText("Telephone No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel17.add(jLabel8, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(nokTelephoneTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weighty = 1.0;
            jPanel12.add(jPanel17, gridBagConstraints);

            jPanel18.setBackground(new java.awt.Color(204, 255, 204));
            jPanel18.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    jPanel18MouseMoved(evt);
                }
            });
            jPanel18.setLayout(new java.awt.GridBagLayout());

            jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter date of birth or patient Age here ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 51, 153)));
            jPanel15.setLayout(new java.awt.GridBagLayout());

            jLabel66.setText("Date of Birth");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel15.add(jLabel66, gridBagConstraints);

            this.datePickerYOB.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    changeDate();
                }
            });

            datePickerYOB.addInputMethodListener(new java.awt.event.InputMethodListener() {
                public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                }
                public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                    datePickerYOBInputMethodTextChanged(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
            jPanel15.add(datePickerYOB, gridBagConstraints);

            jLabel36.setText("Patient Real Age");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            jPanel15.add(jLabel36, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel15.add(agelabel, gridBagConstraints);

            jLabel53.setText("Patient Age (Years)");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel15.add(jLabel53, gridBagConstraints);

            ageYrsTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    ageYrsTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel15.add(ageYrsTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 5.0;
            jPanel18.add(jPanel15, gridBagConstraints);

            jLabel3.setText("Out Patient No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel18.add(jLabel3, gridBagConstraints);

            jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel6.setPreferredSize(new java.awt.Dimension(48, 24));
            jPanel6.setLayout(new java.awt.GridBagLayout());

            jTextField361.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel6.add(jTextField361, gridBagConstraints);

            searchButton1.setToolTipText("Search");
            searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton1.setMaximumSize(new java.awt.Dimension(40, 25));
            searchButton1.setMinimumSize(new java.awt.Dimension(40, 25));
            searchButton1.setPreferredSize(new java.awt.Dimension(30, 22));
            searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton1ActionPerformed(evt);
                }
            });
            jPanel6.add(searchButton1, new java.awt.GridBagConstraints());

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel18.add(jPanel6, gridBagConstraints);

            jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel3.setPreferredSize(new java.awt.Dimension(48, 24));
            jPanel3.setLayout(new java.awt.GridBagLayout());

            admissionNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(admissionNumberTxt, gridBagConstraints);

            searchButton.setToolTipText("Search");
            searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton.setMaximumSize(new java.awt.Dimension(40, 25));
            searchButton.setMinimumSize(new java.awt.Dimension(40, 25));
            searchButton.setPreferredSize(new java.awt.Dimension(30, 22));
            searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButtonActionPerformed(evt);
                }
            });
            jPanel3.add(searchButton, new java.awt.GridBagConstraints());

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipadx = 10;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel18.add(jPanel3, gridBagConstraints);

            jLabel11.setForeground(new java.awt.Color(255, 51, 153));
            jLabel11.setText("Admission No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel18.add(jLabel11, gridBagConstraints);

            jLabel2.setForeground(new java.awt.Color(255, 51, 153));
            jLabel2.setText("Surname Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel18.add(jLabel2, gridBagConstraints);

            surNameTxt.setEditable(false);
            surNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    surNameTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel18.add(surNameTxt, gridBagConstraints);

            jLabel21.setForeground(new java.awt.Color(255, 51, 153));
            jLabel21.setText("Other Name(s)");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel18.add(jLabel21, gridBagConstraints);

            firstNameTxt.setEditable(false);
            firstNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    firstNameTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel18.add(firstNameTxt, gridBagConstraints);

            jLabel18.setForeground(new java.awt.Color(255, 51, 153));
            jLabel18.setText("Gender");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel18.add(jLabel18, gridBagConstraints);

            jPanel13.setLayout(new java.awt.GridBagLayout());

            buttonGroup4.add(maleChkbx);
            maleChkbx.setSelected(true);
            maleChkbx.setText("Male");
            maleChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel13.add(maleChkbx, gridBagConstraints);

            buttonGroup4.add(femaleChkbx);
            femaleChkbx.setText("Female");
            femaleChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel13.add(femaleChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel18.add(jPanel13, gridBagConstraints);

            jPanel4113.setLayout(new java.awt.GridBagLayout());

            buttonGroup6.add(singleMaritalChkbx);
            singleMaritalChkbx.setSelected(true);
            singleMaritalChkbx.setText("Single");
            singleMaritalChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
            singleMaritalChkbx.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
            singleMaritalChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    singleMaritalChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel4113.add(singleMaritalChkbx, gridBagConstraints);

            buttonGroup6.add(marriedMaritalChkbx);
            marriedMaritalChkbx.setText("Married");
            marriedMaritalChkbx.setAlignmentY(0.0F);
            marriedMaritalChkbx.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            marriedMaritalChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel4113.add(marriedMaritalChkbx, gridBagConstraints);

            buttonGroup6.add(divorcedMaritalChkbx);
            divorcedMaritalChkbx.setText("Divorced");
            divorcedMaritalChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            divorcedMaritalChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel4113.add(divorcedMaritalChkbx, gridBagConstraints);

            buttonGroup6.add(widowedMaritalChkbx);
            widowedMaritalChkbx.setText("Widowed");
            widowedMaritalChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            widowedMaritalChkbx.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            widowedMaritalChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            widowedMaritalChkbx.setIconTextGap(7);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.weightx = 1.0;
            jPanel4113.add(widowedMaritalChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel18.add(jPanel4113, gridBagConstraints);

            jLabel27.setForeground(new java.awt.Color(255, 51, 153));
            jLabel27.setText("Marital Status");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel18.add(jLabel27, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.weighty = 1.0;
            jPanel12.add(jPanel18, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.gridheight = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 5.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jPanel12, gridBagConstraints);

            jPanel16.setBackground(new java.awt.Color(255, 255, 255));
            jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Admission details"));
            jPanel16.setForeground(new java.awt.Color(255, 0, 51));
            jPanel16.setLayout(new java.awt.GridBagLayout());

            jLabel4.setForeground(new java.awt.Color(255, 51, 153));
            jLabel4.setText("Ward");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel4, gridBagConstraints);

            admissionWardCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(select '0select-')  UNION (SELECT distinct ward_name FROM hp_wards) ORDER BY 1 asc"));
            admissionWardCmbx.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    admissionWardCmbxMouseClicked(evt);
                }
            });
            admissionWardCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    admissionWardCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(admissionWardCmbx, gridBagConstraints);

            jLabel5.setText("Ward Code");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel5, gridBagConstraints);

            wardCodeTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(wardCodeTxt, gridBagConstraints);

            jLabel6.setForeground(new java.awt.Color(255, 51, 153));
            jLabel6.setText("Bed No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel6, gridBagConstraints);

            bedNumberCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bedNumberCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(bedNumberCmbx, gridBagConstraints);

            jLabel141.setForeground(new java.awt.Color(255, 51, 153));
            jLabel141.setText("Bed Category");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel141, gridBagConstraints);

            bedCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select category from hp_bed_category order by category"));
            bedCategoryCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bedCategoryCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(bedCategoryCmbx, gridBagConstraints);

            jLabel20.setForeground(new java.awt.Color(255, 51, 153));
            jLabel20.setText("Bed Rate");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel20, gridBagConstraints);

            bedRateTxt.setEditable(false);
            bedRateTxt.setBackground(new java.awt.Color(204, 204, 204));
            bedRateTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            bedRateTxt.setForeground(new java.awt.Color(204, 0, 204));
            bedRateTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
            jPanel16.add(bedRateTxt, gridBagConstraints);

            jPanel31.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel31.setPreferredSize(new java.awt.Dimension(48, 24));
            jPanel31.setLayout(new java.awt.GridBagLayout());

            jTextField121.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel31.add(jTextField121, gridBagConstraints);

            searchButton3.setToolTipText("Search");
            searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton3.setMaximumSize(new java.awt.Dimension(40, 25));
            searchButton3.setMinimumSize(new java.awt.Dimension(40, 25));
            searchButton3.setPreferredSize(new java.awt.Dimension(30, 22));
            searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton3ActionPerformed(evt);
                }
            });
            jPanel31.add(searchButton3, new java.awt.GridBagConstraints());

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipadx = 10;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jPanel31, gridBagConstraints);

            jLabel10.setForeground(new java.awt.Color(255, 51, 153));
            jLabel10.setText("Admitted By");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel10, gridBagConstraints);

            jLabel1411.setForeground(new java.awt.Color(255, 51, 153));
            jLabel1411.setText("Speciality");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel1411, gridBagConstraints);

            specialtyClinicCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT patient_type FROM pb_patient_categories ORDER BY 1"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(specialtyClinicCmbx, gridBagConstraints);

            jLabel16.setText("Reffered From");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel16, gridBagConstraints);

            jLabel142.setText("Ward Admitted");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 13;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel142, gridBagConstraints);

            jTextField32.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 13;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.8;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jTextField32, gridBagConstraints);

            jLabel110.setText("Bed  Occupied");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel110, gridBagConstraints);

            jTextField42.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jTextField42, gridBagConstraints);

            jLabel82.setText("Previous Discharge Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel82, gridBagConstraints);

            jTextField72.setEditable(false);
            jTextField72.setPreferredSize(new java.awt.Dimension(4, 17));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jTextField72, gridBagConstraints);

            jLabel24.setText("Admission Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel24, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(datePicker1, gridBagConstraints);

            jLabel92.setText("Previous Visit Id");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel92, gridBagConstraints);

            jPanel32.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel32.setPreferredSize(new java.awt.Dimension(48, 24));
            jPanel32.setLayout(new java.awt.GridBagLayout());

            prevVisitIdtxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel32.add(prevVisitIdtxt, gridBagConstraints);

            searchButton4.setToolTipText("Search");
            searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton4.setMaximumSize(new java.awt.Dimension(40, 25));
            searchButton4.setMinimumSize(new java.awt.Dimension(40, 25));
            searchButton4.setPreferredSize(new java.awt.Dimension(30, 22));
            searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton4ActionPerformed(evt);
                }
            });
            jPanel32.add(searchButton4, new java.awt.GridBagConstraints());

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipadx = 10;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jPanel32, gridBagConstraints);

            jTextField82.setEditable(false);
            jTextField82.setPreferredSize(new java.awt.Dimension(4, 17));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jTextField82, gridBagConstraints);

            jLabel72.setText("Previous Admission Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.3;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel72, gridBagConstraints);

            jLabel56.setText("Service Point");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 15;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel56, gridBagConstraints);

            jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT point_name  FROM records_service_points ORDER BY 1"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 15;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(jComboBox2, gridBagConstraints);

            jLabel50.setForeground(new java.awt.Color(51, 51, 255));
            jLabel50.setText("Billing Report on previous admissions");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 17;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel16.add(jLabel50, gridBagConstraints);

            jLabel52.setText("Patient with disability");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 16;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
            jPanel16.add(jLabel52, gridBagConstraints);

            patientDisabilityCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N", "Y" }));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 16;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel16.add(patientDisabilityCmbx, gridBagConstraints);

            patientDebtTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 18;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel16.add(patientDebtTxt, gridBagConstraints);

            referredcombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "County Hospital", "Health Center(Outside County)", "Health Center(Within County)", "Private Facility or Doctor", "NGO Facility", "Outside country", "Casualty dept at This Facility", "Other dept at This Facility", "Not Refered/Unknown Status" }));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel16.add(referredcombo, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.gridheight = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jPanel16, gridBagConstraints);

            jTabbedPane1.addTab("Patient Details", jPanel1);

            jPanel14.setLayout(new java.awt.GridBagLayout());

            jPanel2.setBackground(new java.awt.Color(153, 255, 204));
            jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Other details"));
            jPanel2.setLayout(new java.awt.GridBagLayout());

            jLabel7.setForeground(new java.awt.Color(255, 51, 153));
            jLabel7.setText("Next of Kin");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel7, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(nokNameTxt, gridBagConstraints);

            jLabel9.setText("Address");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel9, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(jTextField9, gridBagConstraints);

            jLabel15.setForeground(new java.awt.Color(255, 51, 153));
            jLabel15.setText("Mode of Payment");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel15, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(jTextField4, gridBagConstraints);

            jLabel1.setText("Person Paying Bill");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel1, gridBagConstraints);

            paymentModeCmbx.setSelectedItem(null);
            // javax.swing.JComboBox strCmb;
            java.lang.Object[] strCmb = {"-","Cash","Credit Card","Scheme","Cheque","Eft"};

            javax.swing.DefaultComboBoxModel comboModel = new javax.swing.DefaultComboBoxModel(strCmb);

            // comboModel.addElement("Cash");

            // comboModel.addElement("Account");

            paymentModeCmbx.setModel(comboModel);

            //javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

            //javax.swing.table.TableColumn teditor = this.jTable21.getColumn("Payment Mode");

            //        teditor.setCellEditor(new javax.swing.DefaultCellEditor(cmBox));
            paymentModeCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    paymentModeCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(paymentModeCmbx, gridBagConstraints);

            nhifChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            nhifChbx.setLabel("NHIF Rgistered");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(nhifChbx, gridBagConstraints);

            jPanel81.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 255)));
            jPanel81.setLayout(new java.awt.GridBagLayout());

            buttonGroup1.add(jCheckBox221);
            jCheckBox221.setText("Admitted");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel81.add(jCheckBox221, gridBagConstraints);

            buttonGroup1.add(jCheckBox311);
            jCheckBox311.setText("Discharged");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel81.add(jCheckBox311, gridBagConstraints);

            jCheckBox7.setText("Has Interim Bill");
            jCheckBox7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel81.add(jCheckBox7, gridBagConstraints);

            this.jCheckBox8.setEnabled(false);
            jCheckBox8.setText("Check to suspend existing interim Bill");
            jCheckBox8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox8ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel81.add(jCheckBox8, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(jPanel81, gridBagConstraints);

            jCheckBox6.setForeground(new java.awt.Color(250, 127, 5));
            jCheckBox6.setText("Merge OP Bill ?");
            jCheckBox6.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            jCheckBox6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox6ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(jCheckBox6, gridBagConstraints);

            jLabel26.setBackground(new java.awt.Color(204, 0, 51));
            jLabel26.setText("Card Maturity Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel26, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(datePicker2, gridBagConstraints);

            jLabel29.setBackground(new java.awt.Color(255, 204, 255));
            jLabel29.setForeground(new java.awt.Color(255, 51, 153));
            jLabel29.setText("Relationship");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel29, gridBagConstraints);

            nokRelationShipCmbx.setEditable(true);
            nokRelationShipCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT DISTINCT relation_description FROM nok_relationship order by 1"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(nokRelationShipCmbx, gridBagConstraints);

            idNoLbl2.setText("NoK Residence");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(idNoLbl2, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(nokResidenceTxt, gridBagConstraints);

            jLabel23.setText("Clinic Number");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel23, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(oldFileNumberTxt, gridBagConstraints);

            jLabel28.setText("NHIF / Claim/Reference Number");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(jLabel28, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(nhifClaimNumberTxt, gridBagConstraints);

            jLabel37.setText("County of Birth");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel37, gridBagConstraints);

            jLabel43.setText("County of Residence");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel43, gridBagConstraints);

            countyofBirthCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT DISTINCT county_name FROM pb_county ORDER BY 1"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(countyofBirthCmbx, gridBagConstraints);

            countyofResidenceCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT DISTINCT county_name FROM pb_county order by 1"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(countyofResidenceCmbx, gridBagConstraints);

            jLabel44.setText("Employer");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel44, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(employerTxt, gridBagConstraints);

            jLabel45.setText("Employer Telephone");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel45, gridBagConstraints);

            employerTelTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    employerTelTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(employerTelTxt, gridBagConstraints);

            jLabel46.setForeground(new java.awt.Color(255, 51, 153));
            jLabel46.setText("C-Sheet No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel46, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(cSheetNoTxt, gridBagConstraints);

            jLabel47.setText("Education Level");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel47, gridBagConstraints);

            educationLevelCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT edu_name FROM pb_education ORDER BY edu_name"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(educationLevelCmbx, gridBagConstraints);

            jLabel48.setText("NHIF Card Number");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel2.add(jLabel48, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(nhifCardMemberNumberTxt, gridBagConstraints);

            jLabel34.setText("Next of kin Telephone");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add(jLabel34, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel2.add(nokteltxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 15.0;
            gridBagConstraints.weighty = 20.0;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel14.add(jPanel2, gridBagConstraints);

            jPanel21.setBackground(new java.awt.Color(219, 243, 255));
            jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Select card name then enter card No.and the expiry date "));
            jPanel21.setEnabled(false);
            jPanel21.setLayout(new java.awt.GridBagLayout());

            jLabel71.setText("Card Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jLabel71, gridBagConstraints);

            jComboBox31.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT card_name FROM pb_creditcard_types ORDER By card_name"));
            jComboBox31.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBox31ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jComboBox31, gridBagConstraints);

            jTextField71.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jTextField71, gridBagConstraints);

            jLabel81.setText("Issurer");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jLabel81, gridBagConstraints);

            jLabel91.setText("Card No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jLabel91, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel21.add(cardNumberTxt, gridBagConstraints);

            jLabel151.setText("Expiry Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel21.add(jLabel151, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(datePicker21, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 5.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
            jPanel14.add(jPanel21, gridBagConstraints);

            jPanel5.setBackground(new java.awt.Color(255, 239, 255));
            jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Select type of scheme & then select staff no"));
            jPanel5.setLayout(new java.awt.GridBagLayout());

            jLabel102.setText("Member Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            jPanel5.add(jLabel102, gridBagConstraints);

            jLabel122.setText("Member No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            jPanel5.add(jLabel122, gridBagConstraints);

            jLabel172.setText("Expiry Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.weightx = 1.0;
            jPanel5.add(jLabel172, gridBagConstraints);

            jLabel143.setText("Scheme Manager");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            jPanel5.add(jLabel143, gridBagConstraints);

            jTextField23.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
            jPanel5.add(jTextField23, gridBagConstraints);

            jLabel182.setText("Scheme Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            jPanel5.add(jLabel182, gridBagConstraints);

            jPanel64.setMinimumSize(new java.awt.Dimension(82, 37));
            jPanel64.setLayout(new java.awt.GridBagLayout());
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel64.add(jTextField36, gridBagConstraints);

            searchButton2.setToolTipText("Search");
            searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton2.setPreferredSize(new java.awt.Dimension(40, 22));
            searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel64.add(searchButton2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel5.add(jPanel64, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
            jPanel5.add(memberNumberTxt, gridBagConstraints);

            jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
            jPanel641.setLayout(new java.awt.GridBagLayout());

            jTextField3611.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(jTextField3611, gridBagConstraints);

            searchButton21.setToolTipText("Search");
            searchButton21.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton21.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton21.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton21.setPreferredSize(new java.awt.Dimension(40, 22));
            searchButton21.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton21.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton21ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel641.add(searchButton21, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
            jPanel5.add(jPanel641, gridBagConstraints);

            jLabel22.setText("A/C No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            jPanel5.add(jLabel22, gridBagConstraints);

            jTextField15.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel5.add(jTextField15, gridBagConstraints);

            jLabel25.setText("Member Balance");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            jPanel5.add(jLabel25, gridBagConstraints);

            jTextField16.setEditable(false);
            jTextField16.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel5.add(jTextField16, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel5.add(datePicker11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 5.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
            jPanel14.add(jPanel5, gridBagConstraints);

            jTabbedPane1.addTab("Payment Information and Other details", jPanel14);

            admissionListingPanel.setLayout(new java.awt.GridBagLayout());

            admissionListingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, sub_chief as unit_number, visit_id, patient_name, gender, pat_age as patient_age, ward, wing, mode_of_payment, data_capture_time from hp_admission where user_name = current_user and date_admitted = now()::date order by data_capture_time"));
            refreshScrollPane.setViewportView(admissionListingTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 200.0;
            admissionListingPanel.add(refreshScrollPane, gridBagConstraints);

            startDateLbl.setText("Start Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(startDateLbl, gridBagConstraints);

            endDateLbl.setText("End Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(endDateLbl, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(startDatePicker, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(endDatePicker, gridBagConstraints);

            refreshBtn.setText("Refresh listing");
            refreshBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    refreshBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(refreshBtn, gridBagConstraints);

            reportTypeChooserCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL Records Officers", "Current User" }));
            reportTypeChooserCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    reportTypeChooserCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(reportTypeChooserCmbx, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 50.0;
            gridBagConstraints.weighty = 1.0;
            admissionListingPanel.add(spacerLabel, gridBagConstraints);

            jTabbedPane1.addTab("Admission Report", admissionListingPanel);

            admissionAnalysisPanel.setLayout(new java.awt.GridBagLayout());

            admissionAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT ward, count(ward) FROM hp_admission  where date_admitted = now()::date group by 1 order by 1"));
            admissionScrollPane.setViewportView(admissionAnalysisTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 100.0;
            admissionAnalysisPanel.add(admissionScrollPane, gridBagConstraints);

            startDateLbl1.setText("Start Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(startDateLbl1, gridBagConstraints);

            endDateLbl1.setText("End Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(endDateLbl1, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(startDatePicker1, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(endDatePicker1, gridBagConstraints);

            refreshBtn1.setText("Refresh listing");
            refreshBtn1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    refreshBtn1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(refreshBtn1, gridBagConstraints);

            reportTypeChooserCmbx1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL Records Officers", "Current User" }));
            reportTypeChooserCmbx1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    reportTypeChooserCmbx1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(reportTypeChooserCmbx1, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 50.0;
            gridBagConstraints.weighty = 1.0;
            admissionAnalysisPanel.add(spacerLabel1, gridBagConstraints);

            jTabbedPane1.addTab("Admission analysis", admissionAnalysisPanel);

            occupancyReportPanel.setLayout(new java.awt.GridBagLayout());

            occupationsHeaderTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Select the ward name here to generate occupancy report"));
            occupationsHeaderTable.setLayout(new java.awt.GridBagLayout());

            wardNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT ward_name FROM hp_wards order by ward_name"));
            wardNameCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    wardNameCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationsHeaderTable.add(wardNameCmbx, gridBagConstraints);

            jLabel49.setText("Ward Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationsHeaderTable.add(jLabel49, gridBagConstraints);

            patientNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Number/Unit Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 0, 10), new java.awt.Color(51, 51, 255))); // NOI18N
            patientNumber.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    patientNumberCaretUpdate(evt);
                }
            });
            patientNumber.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    patientNumberActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationsHeaderTable.add(patientNumber, gridBagConstraints);

            searchFileBtn.setText("Search Patient File by Number");
            searchFileBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchFileBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            occupationsHeaderTable.add(searchFileBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupancyReportPanel.add(occupationsHeaderTable, gridBagConstraints);

            occupationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ward occupation data"));
            occupationsPanel.setLayout(new java.awt.GridBagLayout());

            occupationTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            occupationTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            occupationJScrl.setViewportView(occupationTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipadx = 431;
            gridBagConstraints.ipady = 292;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationsPanel.add(occupationJScrl, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 500.0;
            occupancyReportPanel.add(occupationsPanel, gridBagConstraints);

            occupationButtonPanel.setLayout(new java.awt.GridBagLayout());

            jButton7.setMnemonic('U');
            jButton7.setText("Refresh occupancy information");
            jButton7.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton7ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationButtonPanel.add(jButton7, gridBagConstraints);

            jButton8.setMnemonic('C');
            jButton8.setText("Clear form");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationButtonPanel.add(jButton8, gridBagConstraints);

            jButton10.setMnemonic('o');
            jButton10.setText("Close form");
            jButton10.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton10ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupationButtonPanel.add(jButton10, gridBagConstraints);

            totalsLabel.setForeground(new java.awt.Color(0, 0, 204));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 200.0;
            gridBagConstraints.weighty = 1.0;
            occupationButtonPanel.add(totalsLabel, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            occupancyReportPanel.add(occupationButtonPanel, gridBagConstraints);

            jTabbedPane1.addTab("Wards Occupancy Report", occupancyReportPanel);

            previousPanel.setLayout(new java.awt.GridBagLayout());

            previousVisitsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            previousVisitsScrollPane.setViewportView(previousVisitsTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            previousPanel.add(previousVisitsScrollPane, gridBagConstraints);

            jTabbedPane1.addTab("Previous Visits", previousPanel);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 20.0;
            gridBagConstraints.weighty = 100.0;
            getContentPane().add(jTabbedPane1, gridBagConstraints);

            setBounds(0, 0, 1097, 679);
        }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        String selectedchkbx;
        if (this.jCheckBox8.isSelected()) {
            int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you want to suspend existing unfinalised bill?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

            if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                try {

                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("update hp_admission set check_out = true where check_out = false and patient_no ='" + admissionNumberTxt.getText() + "' AND DISCHARGE = true");
                    pstmt1.executeUpdate();

                } catch (java.sql.SQLException sq) {
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Thank You for taking caution", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            }
        } else {
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
//    System.setProperty("docsdir",System.getProperty("user.dir"));
        java.io.File xmlDocFile = null;
        //  try {

        // xmlDocFile = java.io.File.createTempFile("CLAIM"+biz.systempartners.claims.DateLables.getDateLabel()+"_", ".xml", new java.io.File(System.getProperty("docsdir")));
        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");//.createTempFile("HospitalClaimsFile", ".xml", new java.io.File(System.getProperty("docsdir")));

        // } catch(java.io.IOException ioExec){
        //    ioExec.printStackTrace();
        // }
        biz.systempartners.claims.XMLClaimFile claimFile = new biz.systempartners.claims.XMLClaimFile();

        claimFile.processFile(xmlDocFile);

        admissionNumberTxt.setText(claimFile.patientNumber);
        surNameTxt.setText(claimFile.patientSurName);
        firstNameTxt.setText(claimFile.patientForenames);
        paymentModeCmbx.setSelectedItem("Scheme");
        jTextField9.setText(claimFile.patientAddress);
        nokTelephoneTxt.setText(claimFile.patientTelephone);
        //  emailAddTxt.setText(claimFile.patientEmail);
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat();//.getInstance();

        dateFormat.applyPattern("yyyy-MM-dd");
        //jTextField6.setText(claimFile.patientDOB);
        if (claimFile.patientDOB != null) {
            try {
                datePickerYOB.setDate(dateFormat.parse(claimFile.patientDOB));
            } catch (ParseException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }

        memberNumberTxt.setText(claimFile.cardNumber);
        jTextField36.setText(claimFile.patientSurName + " " + claimFile.patientForenames);
        jTextField3611.setText(claimFile.medicalAidCode);
        jTextField23.setText(claimFile.medicalAidPlan);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        com.afrisoftech.accounting.MergingPatientBillIntfr other = new com.afrisoftech.accounting.MergingPatientBillIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void admissionWardCmbxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_admissionWardCmbxMouseClicked
    }//GEN-LAST:event_admissionWardCmbxMouseClicked

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked

        System.out.println("Starting To Query Patient data\n");
        String name = null;
        String patientNo = null;
        int pNo = 0;
        //   referredFromTxt.setText("");
        jTextField9.setText("");
        nokTelephoneTxt.setText("");
        nokNameTxt.setText("");
        firstNameTxt.setText("");
        wardCodeTxt.setText("");
        surNameTxt.setText("");
        //jTextField6.setText("");
        // jTextField12.setText("");
        memberNumberTxt.setText("");
        currentResidence.setText("");
        jTextField4.setText("");
        bedRateTxt.setText("");
        jTextField3611.setText("");
        jTextField23.setText("");
        jTextField36.setText("");
        prevVisitIdtxt.setText("");
        searchButton1.setEnabled(false);
        searchButton.setEnabled(true);
//        searchbyPatientNameChkbx.setEnabled(true);
//        searchbyPatientNumberChkbx.setEnabled(true);
        jCheckBox311.setEnabled(true);
        jCheckBox221.setEnabled(true);
//        referredFromTxt.setEditable(true);
        jTextField9.setEditable(true);
        nokTelephoneTxt.setEditable(true);
        nokNameTxt.setEditable(true);
        firstNameTxt.setEditable(true);
        surNameTxt.setEditable(true);
        //jTextField6.setEditable(true);
        admissionNumberTxt.setEditable(true);
        memberNumberTxt.setEditable(true);
        currentResidence.setEditable(true);
        jTextField4.setEditable(true);
        jTextField3611.setEditable(true);
        jTextField361.setEditable(false);
        jTextField23.setEditable(true);
        jTextField36.setEditable(true);
//        admissionNumber.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0).toString());
//        jTextField122.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2).toString());
//        surNameTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1).toString());
        System.out.println("Finished Clearing Form\n Starting Populating Form, Please wait...");
        admissionNumberTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0).toString());
        firstNameTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1).toString());
        surNameTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2).toString());
        prevVisitIdtxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 4).toString());

        System.out.println("Finished Populating Form\n Starting Patient Query, Please wait...");
        try {

            java.sql.Statement stmt112 = connectDB.createStatement();
            java.sql.ResultSet rset112 = stmt112.executeQuery("select nationality,occupation,pat_religion,pat_district,sub_chief,nok_relationship,home_county,residence_county,education_level,id_no,pat_location,chief_name,speciality,nok_residence,marital_status from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' and  visit_id = '" + prevVisitIdtxt.getText() + "' ");
            while (rset112.next()) {
                nationalityCmbx.setSelectedItem(rset112.getObject(1).toString().trim());
                occupationCmbx.setSelectedItem(rset112.getObject(2).toString());
                religionCmbx.setSelectedItem(rset112.getObject(3).toString());

                if (rset112.getObject(4).toString().equalsIgnoreCase("")) {
                    districtCmbx.setSelectedItem("-");
                } else {
                    districtCmbx.setSelectedItem(rset112.getObject(4).toString());
                }
                //  districtCmbx.setSelectedItem( "-");
                //districtCmbx.setSelectedItem(rset112.getObject(4).toString());
                unitNumberTxt.setText(rset112.getObject(5).toString());
                nokRelationShipCmbx.setSelectedItem(rset112.getObject(6).toString());
                countyofBirthCmbx.setSelectedItem(rset112.getObject(7).toString());
                countyofResidenceCmbx.setSelectedItem(rset112.getObject(8).toString());
                educationLevelCmbx.setSelectedItem(rset112.getObject(9).toString());
                if (rset112.getObject(10).toString().equalsIgnoreCase("")) {
                    idPassportTxt.setText("-");
                } else {
                    idPassportTxt.setText(rset112.getObject(10).toString());
                }

                if (rset112.getObject(11).toString().equalsIgnoreCase("")) {
                    locationTxt.setText("-");
                } else {
                    locationTxt.setText(rset112.getObject(11).toString());
                }

                if (rset112.getObject(12).toString().equalsIgnoreCase("")) {
                    jTextField27.setText("-");
                } else {
                    jTextField27.setText(rset112.getObject(12).toString());
                }

                specialtyClinicCmbx.setSelectedItem(rset112.getObject(13).toString());
                nokResidenceTxt.setText(rset112.getObject(14).toString());

                if (rset112.getObject(15).toString().startsWith("S")) {
                    singleMaritalChkbx.setSelected(true);

                }
                if (rset112.getObject(15).toString().startsWith("M")) {
                    marriedMaritalChkbx.setSelected(true);
                }
                if (rset112.getObject(15).toString().startsWith("D")) {
                    divorcedMaritalChkbx.setSelected(true);
                }
                if (rset112.getObject(15).toString().startsWith("W")) {
                    widowedMaritalChkbx.setSelected(true);
                }

            }

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select nok,residence,year_of_birth::date,address,sex,tel_no,('now'::date-year_of_birth::date)/365 from hp_inpatient_register where patient_no ='" + admissionNumberTxt.getText() + "'");
            while (rset.next()) {
                //  jTextField2.setText(rset.getObject(1).toString());
                nokNameTxt.setText(rset.getObject(1).toString());
                currentResidence.setText(rset.getObject(2).toString());
                java.text.DateFormat df = java.text.DateFormat.getDateInstance();
                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;
                ageTxt.setText(rset.getObject(7).toString());
                sdf.applyPattern("yyyy-MM-dd");
                try {
                    datePickerYOB.setDate(sdf.parse(rset.getString(3)));
                } catch (java.text.ParseException pe) {
                    javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
                }
                jTextField9.setText(rset.getObject(4).toString());
                nokTelephoneTxt.setText(rset.getObject(6).toString());
                if (rset.getObject(5).toString().startsWith("M")) {
                    maleChkbx.setSelected(true);
                } else {
                    femaleChkbx.setSelected(true);
                }
            }

            System.out.println("Query Progress ongoing, Please wait...");

            java.sql.Statement stmt11 = connectDB.createStatement();
            java.sql.ResultSet rset11 = stmt11.executeQuery("select patient_no from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' and discharge = false");
            while (rset11.next()) {
                // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                name = rset11.getObject(1).toString();
            }
            //  if(jRadioButton1.isSelected()){
            boolean checkOut = false;
            java.sql.Statement stmt1111xx = connectDB.createStatement();
            java.sql.ResultSet rset1111x = stmt1111xx.executeQuery("select check_out from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' order by date_admitted DESC LIMIT 1");
            while (rset1111x.next()) {
                checkOut = rset1111x.getBoolean(1);
            }

            ipSearchDialog.dispose();

            System.out.println("We are Almost Finishing to load, Please wait...");
            //  jComboBox6.setSelectedItem(jTextField17.getText().toString());
            if (!jRadioButton1.isSelected()) {
                if (admissionNumberTxt.getText().equalsIgnoreCase(name)) {
                    javax.swing.JOptionPane.showMessageDialog(this, " Patient already admitted ", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    admissionNumberTxt.setText("");
                    surNameTxt.setText("");
                }
            }
            //  if(checkOut == false){
            //      javax.swing.JOptionPane.showMessageDialog(this," Patient cannot be re-admitted with unfinalised invoice pending", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);

            //  }else{
            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select patient_no from hp_inpatient_register where patient_no ='" + this.admissionNumberTxt.getText() + "'");
            while (rsetf.next()) {
                patientNo = rsetf.getObject(1).toString();
            }

            java.sql.Statement stmt11f = connectDB.createStatement();

            java.sql.ResultSet rset11f = stmt11f.executeQuery("select patient_no,check_out from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' and check_out = false");
            while (rset11f.next()) {
                // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                //  name = rset11f.getObject(1).toString();
                if (rset11f.getBoolean(2) == false) {
                    jCheckBox7.setSelected(true);
                } else {
                    jCheckBox7.setSelected(false);
                }
            }

            java.sql.Statement stmt111 = connectDB.createStatement();
            java.sql.ResultSet rset111 = stmt111.executeQuery("select count (patient_no) from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "'");
            while (rset111.next()) {
                // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                pNo = rset111.getInt(1);
            }
            if (pNo > 0) {

                java.sql.Statement stmt1111 = connectDB.createStatement();
                java.sql.ResultSet rset1111 = stmt1111.executeQuery("select date_admitted::date,discharge_date::date,CASE WHEN (visit_id IS NULL) THEN '-' ELSE visit_id END AS visit_id,ward,bed_no from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' order by date_admitted DESC LIMIT 1");
                while (rset1111.next()) {
                    jTextField72.setText(rset1111.getObject(2).toString());
                    jTextField82.setText(rset1111.getObject(1).toString());
                    prevVisitIdtxt.setText(rset1111.getObject(3).toString());
                    jTextField32.setText(rset1111.getObject(4).toString());
                    jTextField42.setText(rset1111.getObject(5).toString());
                }
            }
            //  }
            System.out.println("Finished Populating Form , Thankyou For Waiting");

        } catch (java.sql.SQLException sqe) {

            sqe.printStackTrace();
            System.out.println("Select not successful");
            System.out.println("We have a problem");
        }
        this.previousVisitIDDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked

    private void jButton513ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton513ActionPerformed
        previousVisitIDDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton513ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        this.jButton1.setVisible(true);
        this.jButton1.setText("Update");
        searchButtonClicked3(); // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed
    private void searchButtonClicked3() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.jLabel92.getLocationOnScreen();

        previousVisitIDDialog.setSize(700, 200);

        previousVisitIDDialog.setLocation(point);

        previousVisitIDDialog.setVisible(true);

    }
    private void jTextField1114CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1114CaretUpdate

        //query update to obtain last visit_id by ordering descending >> WHERE hp.patient_no = hd.patient_no order by 1 desc  LIMIT 1
        if (jTextField1114.getCaretPosition() < 4) {

            System.out.println("Nothing");
        } else {
            if (this.searchbyPatientNameChkbx.isSelected()) {
                jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, ""
                        + "SELECT hd.patient_no, (upper(hd.second_name||' '||hd.last_name)) as name, hd.first_name AS surname, "
                        + "(SELECT hp.sub_chief FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) as unit_number,"
                        + "(SELECT hp.visit_id FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 desc  LIMIT 1) as VisitId"
                        + " from hp_inpatient_register hd where (upper(hd.second_name||' '||hd.first_name||' '||hd.last_name)) ILIKE '%" + jTextField1114.getText().toString() + "%' ORDER BY second_name"));
                jSearchTable3.setShowHorizontalLines(false);
                jSearchScrollPane3.setViewportView(jSearchTable3);

            } else {
                if (this.searchbyPatientNumberChkbx.isSelected()) {
                    jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, ""
                            + "SELECT hd.patient_no, (upper(hd.second_name||' '||hd.last_name)) as name,hd.first_name AS surname, "
                            + "(SELECT hp.sub_chief FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) as unit_number, "
                            + "(SELECT hp.visit_id FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 desc LIMIT 1) as VisitId "
                            + "from hp_inpatient_register hd where hd.patient_no ILIKE '%" + jTextField1114.getText().toString() + "%' or (SELECT hp.sub_chief FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) ilike '%" + jTextField1114.getText().toString() + "%' ORDER BY second_name"));
                    jSearchTable3.setShowHorizontalLines(false);
                    jSearchScrollPane3.setViewportView(jSearchTable3);

                }
            }

//            if (this.searchbyPatientNameChkbx.isSelected()) {
//                jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name as name,visit_id from hp_admission where (upper(patient_name)) ILIKE '" + jTextField1114.getText().toString() + "%' AND visit_id IS NOT NULL  ORDER BY patient_name"));
//
//                jSearchTable3.setShowHorizontalLines(false);
//                jSearchScrollPane3.setViewportView(jSearchTable3);
//
//
//
//            } else {
//                if (this.searchbyPatientNumberChkbx.isSelected()) {
//                    jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name as name,visit_id from hp_admission where patient_no ILIKE '" + jTextField1114.getText().toString() + "%' AND visit_id IS NOT NULL ORDER BY patient_no"));
//
//                    jSearchTable3.setShowHorizontalLines(false);
//                    jSearchScrollPane3.setViewportView(jSearchTable3);
//
//
//                }
//            }
        }   // Add your handling code here:
    }//GEN-LAST:event_jTextField1114CaretUpdate

    private void bedCategoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedCategoryCmbxActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rate from hp_bed_category where category ='" + bedCategoryCmbx.getSelectedItem() + "'");
            while (rset.next()) {
                //   jTextField5.setText(rset.getObject(1).toString());
                bedRateTxt.setText(rset.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }          // Add your handling code here:
    }//GEN-LAST:event_bedCategoryCmbxActionPerformed

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton11bClicked();    // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void jButton5121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5121ActionPerformed
        jSearchDialog21.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton5121ActionPerformed

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        jTextField121.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        //jTextField13.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
        //jTextField23.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        jSearchDialog21.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jTextField11131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11131CaretUpdate
        if (jTextField11131.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {

            jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT first_name||' '||middle_name as name from pb_doctors_list where status ILIKE 'acti%' and first_name||' '||middle_name ILIKE '%" + jTextField11131.getText() + "%' order by first_name||' '||middle_name"));

            jSearchTable21.setShowHorizontalLines(false);
            jSearchScrollPane21.setViewportView(jSearchTable21);

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField11131CaretUpdate
    private void searchButton11bClicked() {

        System.out.println("Showing dialog");

        jSearchDialog21.dispose();
        java.awt.Point point = this.jTextField121.getLocationOnScreen();

        jSearchDialog21.setSize(700, 200);

        jSearchDialog21.setLocation(point);
        jSearchDialog21.setVisible(true);

    }
    private void reAdmissionRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reAdmissionRbtnActionPerformed
        admitPrintBtn.setEnabled(true);
        jButton6.setEnabled(false);
        jButton2.setEnabled(true);
        this.jButton1.setText("Admit");
        admitPrintBtn.setText("Admit & Print");
        this.jButton1.setVisible(true);
//        referredFromTxt.setEditable(false);
        jTextField9.setEditable(false);
        nokTelephoneTxt.setEditable(true);
        nokNameTxt.setEditable(true);
        firstNameTxt.setEditable(false);
        surNameTxt.setEditable(false);
        //jTextField6.setEditable(false);
        admissionNumberTxt.setEditable(false);
        memberNumberTxt.setEditable(false);
        currentResidence.setEditable(false);
        jTextField4.setText("");
        jTextField3611.setEditable(false);
        jTextField23.setEditable(false);
        jTextField36.setEditable(false);
        searchButton.setEnabled(true);
        searchButton1.setEnabled(false);
//        searchbyPatientNameChkbx.setEnabled(true);
//        searchbyPatientNumberChkbx.setEnabled(true);
        jCheckBox311.setEnabled(false);
        jCheckBox221.setEnabled(false);
        religionCmbx.setSelectedIndex(-1);
        nationalityCmbx.setSelectedIndex(-1);
        districtCmbx.setSelectedIndex(-1);
        occupationCmbx.setSelectedIndex(-1);
        admissionWardCmbx.setSelectedIndex(-1);
        bedNumberCmbx.setSelectedIndex(-1);
        bedCategoryCmbx.setSelectedIndex(-1);
        specialtyClinicCmbx.setSelectedIndex(-1);
        nokRelationShipCmbx.setSelectedIndex(-1);
        countyofBirthCmbx.setSelectedItem("-");
        educationLevelCmbx.setSelectedItem("-");
        paymentModeCmbx.setSelectedItem("-");
        countyofResidenceCmbx.setSelectedItem("-");
        nokNameTxt.setText("");
        nokResidenceTxt.setText("");
        employerTelTxt.setText("");
        cSheetNoTxt.setText("");
        nokTelephoneTxt.setText("");
        employerTxt.setText("");
        currentResidence.setText("");
        unitNumberTxt.setText("");
        idPassportTxt.setText("");
        jTextField27.setText("");
        locationTxt.setText("");
        firstNameTxt.setText("");
        try {
            java.text.DateFormat df = java.text.DateFormat.getDateInstance();

            java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

            sdf.applyPattern("yyyy-MM-dd");
            java.sql.Statement stmtx2 = connectDB.createStatement();
            java.sql.ResultSet rsetx2 = stmtx2.executeQuery("SELECT CURRENT_DATE::DATE");
            try {
                while (rsetx2.next()) {
                    datePicker1.setDate(sdf.parse(rsetx2.getObject(1).toString()));
                }
            } catch (java.text.ParseException pe) {
                javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
            }
        } catch (java.sql.SQLException SqlExec) {
            SqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), SqlExec.getMessage());

        }
        // Add your handling code here:
    }//GEN-LAST:event_reAdmissionRbtnActionPerformed

    private void newAdimissionRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAdimissionRbtnActionPerformed

        resetFields();
        admitPrintBtn.setEnabled(true);
        admitPrintBtn.setText("Admit & Print");
        jButton2.setEnabled(true);
        jButton6.setEnabled(false);
        /*
         this.admitPrintBtn.setEnabled(true);
         this.jButton1.setVisible(true);
         this.jButton1.setText("Admit");
         referredFromTxt.setText("");
         jTextField9.setText("");
         nokTelephoneTxt.setText("");
         nokNameTxt.setText("");
         firstNameTxt.setText("");
         wardCodeTxt.setText("");
         surNameTxt.setText("");
         //jTextField6.setText("");
         admissionNumber.setText("");
         memberNumberTxt.setText("");
         currentResidence.setText("");
         jTextField4.setText("");
         jTextField3611.setText("");
         jTextField361.setText("");
         jTextField23.setText("");
         jTextField36.setText("");
         searchButton1.setEnabled(true);
         searchButton.setEnabled(true);
         searchbyPatientNameChkbx.setEnabled(true);
         searchbyPatientNumberChkbx.setEnabled(true);
         jCheckBox311.setEnabled(false);
         jCheckBox221.setEnabled(false);
         referredFromTxt.setEditable(true);
         jTextField9.setEditable(true);
         nokTelephoneTxt.setEditable(true);
         nokNameTxt.setEditable(true);
         firstNameTxt.setEditable(true);
         surNameTxt.setEditable(true);
         //jTextField6.setEditable(true);
         admissionNumber.setEditable(true);
         memberNumberTxt.setEditable(true);
         currentResidence.setEditable(true);
         jTextField4.setEditable(true);
         jTextField3611.setEditable(true);
         jTextField361.setEditable(false);
         jTextField23.setEditable(true);
         jTextField36.setEditable(true);
         String useonenumber = null;
         religionCmbx.setSelectedIndex(-1);
         nationalityCmbx.setSelectedIndex(-1);
         districtCmbx.setSelectedIndex(-1);
         occupationCmbx.setSelectedIndex(-1);
         admissionWardCmbx.setSelectedIndex(-1);
         bedNumberCmbx.setSelectedIndex(-1);
         bedCategoryCmbx.setSelectedIndex(-1);
         specialtyClinicCmbx.setSelectedIndex(-1);
         nokRelationShipCmbx.setSelectedIndex(-1);
         countyofBirthCmbx.setSelectedIndex(-1);
         educationLevelCmbx.setSelectedIndex(-1);
         paymentModeCmbx.setSelectedIndex(-1);
         countyofResidenceCmbx.setSelectedIndex(-1);
         try {

         java.text.DateFormat df = java.text.DateFormat.getDateInstance();

         java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

         sdf.applyPattern("yyyy-MM-dd");
         java.sql.Statement stmtx2 = connectDB.createStatement();
         java.sql.ResultSet rsetx2 = stmtx2.executeQuery("SELECT CURRENT_DATE::DATE");
         try {
         while (rsetx2.next()) {
         datePicker1.setDate(sdf.parse(rsetx2.getObject(1).toString()));
         }
         } catch (java.text.ParseException pe) {
         javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
         }
         java.sql.Statement stmtx = connectDB.createStatement();
         java.sql.ResultSet rsetx = stmtx.executeQuery("select ip_numbering,use_one_number from pb_patient_names");
         while (rsetx.next()) {
         autonumber = rsetx.getBoolean(1);
         useonenumber = rsetx.getString(2);
         java.sql.Statement pss1 = connectDB.createStatement();
         java.sql.ResultSet rss1 = pss1.executeQuery("select patient_no from hp_inpatient_register ORDER BY OID desc LIMIT 1");
         while (rss1.next()) {
         // patientsNo = rss1.getObject(1).toString();
         //   jTextField24.setText(rss1.getObject(1).toString());
         }
         }
         rsetx.close();
         stmtx.close();
         if (autonumber) {
         admissionNumber.setEditable(false);

         } else {
         admissionNumber.setEditable(true);
         }

         } catch (java.sql.SQLException sqe) {
         sqe.printStackTrace();
         System.out.println("selection not successful");
         }*/
        // Add your handling code here:
    }//GEN-LAST:event_newAdimissionRbtnActionPerformed

    private void jButton1521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1521ActionPerformed
        //    javax.swing.JFrame bank = new InPatientRegister(connectDB, pConnDB, jTextField361.getText());
        //    bank.setVisible(true);         // Add your handling code here:
    }//GEN-LAST:event_jButton1521ActionPerformed

    private void jButton512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton512ActionPerformed
        jSearchDialog2.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton512ActionPerformed

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        jTextField3611.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField15.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jTextField23.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        jSearchDialog2.dispose();
        try {
            connectDB.setAutoCommit(false);

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select suspended, closed from ac_schemes where scheme_name = '" + jTextField3611.getText() + "' and payer_name = '" + jTextField23.getText() + "'");
            while (rset.next()) {
                if (rset.getObject(1).toString().equalsIgnoreCase("true")) {

                    javax.swing.JOptionPane.showMessageDialog(this, "SCHEME SUSPENDED !!", "Error MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                    jTextField3611.setText("");
                    jTextField23.setText("");
                } else {
                    // jTextField361.setText("");
                }
            }
            while (rset.next()) {
                if (rset.getObject(2).toString().equalsIgnoreCase("true")) {

                    javax.swing.JOptionPane.showMessageDialog(this, "SCHEME CLOSED !!", "Error MESSAGE", javax.swing.JOptionPane.ERROR_MESSAGE);
                    jTextField3611.setText("");
                    jTextField23.setText("");
                } else {
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 5) {

            System.out.println("Nothing");
        } else {

            jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' and (allowed ilike 'Both' or allowed ilike 'IP%') order by scheme_name"));

            /*
             * try {
             *
             * searchRowSet2.execute("SELECT account_no,scheme_name,payer_name
             * from ac_schemes where scheme_name ILIKE
             * '"+jTextField1113.getText()+"%' and (allowed ilike 'Both' or
             * allowed ilike 'IP%') order by scheme_name"); //
             * searchRowSet.execute("SELECT patient_no, (upper(first_name||'
             * '||second_name)) as name, year_of_birth, residence from
             * hp_patient_register where (upper(first_name||' '||second_name))
             * ILIKE '"+jTextField11.getText()+"%' order by first_name");
             *
             * jSearchTable2.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet2, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("account_no",
             * "Account no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("scheme_name",
             * "Name", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("payer_name",
             * "Payer", false)
             *
             * }));
             */
            jSearchTable2.setShowHorizontalLines(false);
            jSearchScrollPane2.setViewportView(jSearchTable2);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void searchButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton21ActionPerformed
        searchButton11aClicked();            // Add your handling code here:
    }//GEN-LAST:event_searchButton21ActionPerformed
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog2.dispose();
        java.awt.Point point = this.jTextField3611.getLocationOnScreen();

        jSearchDialog2.setSize(700, 200);

        jSearchDialog2.setLocation(point);
        jSearchDialog2.setVisible(true);

    }
    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        jTextField36.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        memberNumberTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());
        //   jTextField2.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2).toString());
        int interval = 0;
        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        double outstanding = 0.00;
        boolean appLimit = false;
        String memberno = null;
        int occ = 0;
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer_name from ac_schemes where scheme_name ='" + jTextField3611.getText() + "'");
            while (rset.next()) {
                jTextField23.setText(rset.getObject(1).toString());
            }
            if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                java.sql.Statement stmt1cz = connectDB.createStatement();
                java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberNumberTxt.getText() + "' and applylimit = true AND account_no = '" + jTextField15.getText() + "'");
                while (rset1cz.next()) {
                    appLimit = rset1cz.getBoolean(1);
                }
                System.out.println(appLimit);
                if (appLimit) {
                    ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                    java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                    // ageingDates = ageingSeries.getAgeingDateSeries();
                    // double columnTotals[] = new double[rangeDates.length];
                    for (int x = 0; x < rangeDates.length; x++) {
                        System.out.println(rangeDates[x]);
                        try {

                            java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                            com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                            java.lang.String monthString = dateFormatter.getDateString();

                            interval = x;

                        } catch (java.text.ParseException prs) {
                            prs.printStackTrace();
                        }
                    }
                    java.sql.Statement stmt1c = connectDB.createStatement();
                    java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberNumberTxt.getText() + "' and applylimit = true");
                    while (rset1c.next()) {
                        limit = rset1c.getDouble(1);
                    }
                    System.out.println(limit);
                    for (int t = 0; t < rangeDates.length; t++) {
                        java.sql.Statement stmt1cxz = connectDB.createStatement();
                        java.sql.ResultSet rset1cxz = stmt1cxz.executeQuery("select count(member_no) from ac_debtors where member_no  ='" + memberNumberTxt.getText() + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND account_no ilike '" + jTextField15.getText() + "'");
                        while (rset1cxz.next()) {
                            occ = rset1cxz.getInt(1);
                        }
                        if (occ > 0) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberNumberTxt.getText() + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND account_no ilike '" + jTextField15.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        } else {
                            bal = 0.00;
                        }
                    }
                    outstanding = limit - bal;
                    jTextField16.setText(java.lang.String.valueOf(outstanding));
                    if (bal >= limit) {
                        javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                    }
                }
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        jSearchDialog11.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void dispose1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose1ActionPerformed
        this.jSearchDialog11.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_dispose1ActionPerformed

    private void jTextField1112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1112CaretUpdate
        if (jTextField1112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select trim(staff_no) as scheme, staff_name as name,sheme_name from scheme_members_view where staff_name ILIKE '" + jTextField1112.getText().toString() + "%' and sheme_name = '" + jTextField3611.getText().toString() + "' ORDER BY staff_name"));

            /*
             * try { searchRowSet11.execute("select trim(staff_no) as scheme,
             * staff_name as name,sheme_name from scheme_members_view where
             * staff_name ILIKE '"+jTextField1112.getText().toString()+"%' and
             * sheme_name = '"+jTextField3611.getText().toString()+"' ORDER BY
             * staff_name");
             *
             * jSearchTable11.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet11, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("scheme", "Member
             * Acc.", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
             * false), new
             * org.netbeans.lib.sql.models.TableModel.Column("sheme_name",
             * "Scheme Name", false)
             *
             * }));
             */
            jSearchTable11.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(jSearchTable11);

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1112CaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton11Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButton11Clicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.jTextField36.getLocationOnScreen();

        jSearchDialog11.setSize(700, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);

    }
    private void bedNumberCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedNumberCmbxActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_bedNumberCmbxActionPerformed
    private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.jTextField361.getLocationOnScreen();

        opSearchDialog.setSize(700, 200);

        opSearchDialog.setLocation(point);

        opSearchDialog.setVisible(true);

    }
    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        opSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed

    private void opSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opSearchTableMouseClicked
        jTextField361.setText(opSearchTable.getValueAt(opSearchTable.getSelectedRow(), 0).toString());

        opSearchDialog.dispose();
        String useonenumber = null;
        try {

            java.sql.Statement stmtx = connectDB.createStatement();
            java.sql.ResultSet rsetx = stmtx.executeQuery("select auto_numbering,use_one_number from pb_patient_names");
            while (rsetx.next()) {
                autonumber = rsetx.getBoolean(1);
                useonenumber = rsetx.getString(2);
            }
            if (useonenumber.equalsIgnoreCase("useonenumber")) {
                admissionNumberTxt.setText(opSearchTable.getValueAt(opSearchTable.getSelectedRow(), 0).toString());
            }
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT first_name,second_name,nok,residence,year_of_birth::date,tel_no,address,sex,pat_marital_status,pat_nationality,nok_relationship,education_level,residence_county,pat_religion,home_county,district,nok_residence,occupation, nhif_status,nhif_number,nok_telno,tribe,charge_sheet_no,id_no,patient_race,locations,sub_location,patient_disability FROM hp_patient_register WHERE patient_no ='" + jTextField361.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                surNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                firstNameTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                // jTextField61.setText(rset.getObject(3).toString());
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                currentResidence.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(10), "-"));
                nokRelationShipCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(11), "-"));
                educationLevelCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(12), "-"));
                countyofResidenceCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(13), "-"));
                religionCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(14), "-"));
                countyofBirthCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(15), "-"));
                districtCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(16), "-"));
                nokResidenceTxt.setText(dbObject.getDBObject(rset.getObject(17), "-"));
                occupationCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(18), "-"));
                nokteltxt.setText(rset.getString("nok_telno"));
                unitNumberTxt.setText(rset.getString("patient_race"));
                idPassportTxt.setText(rset.getString("id_no"));
                locationTxt.setText(rset.getString("locations"));
                districtCmbx.setSelectedItem(rset.getString("sub_location"));
                oldFileNumberTxt.setText(rset.getString("tribe"));
                if (rset.getBoolean("nhif_status")) {
                    nhifChbx.setSelected(true);
                } else {
                    nhifChbx.setSelected(false);
                }
                nhifCardMemberNumberTxt.setText(rset.getString("nhif_number"));
                cSheetNoTxt.setText(rset.getString("charge_sheet_no"));
                patientDisabilityCmbx.setSelectedItem(rset.getString("patient_disability"));
                java.text.DateFormat df = java.text.DateFormat.getDateInstance();
                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

                sdf.applyPattern("yyyy-MM-dd");
                try {
                    datePickerYOB.setDate(sdf.parse(rset.getString(5)));
                } catch (java.text.ParseException pe) {
                    javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
                }
                nokTelephoneTxt.setText(dbObject.getDBObject(rset.getObject(6), "-"));
                jTextField9.setText(dbObject.getDBObject(rset.getObject(7), "-"));
                if (rset.getObject(8).toString().startsWith("M")) {
                    maleChkbx.setSelected(true);

                } else {

                    if (rset.getObject(8).toString().startsWith("F")) {
                        femaleChkbx.setSelected(true);
                    } else {
                    }
                }

                if (rset.getObject(9).toString().equalsIgnoreCase("Single")) {
                    singleMaritalChkbx.setSelected(true);
                } else {
                    if (rset.getObject(9).toString().startsWith("Married")) {
                        marriedMaritalChkbx.setSelected(true);
                    } else {
                        if (rset.getObject(9).toString().startsWith("Divorced")) {
                            divorcedMaritalChkbx.setSelected(true);
                        } else {
                            widowedMaritalChkbx.setSelected(true);
                        }
                    }
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
            System.out.println("Insert not successful");
        }
        previousVisitsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT input_date::timestamp(0) as visit_date, clinic as speciality_visited, parameter as registration_point, user_name as registration_officer, marital_status, urgency as case_type FROM hp_patient_visit WHERE patient_no = '" + admissionNumberTxt.getText() + "' UNION SELECT data_capture_time::timestamp(0) as visit_date, ward as speciality_visited, diagnosis3 as registration_point, user_name as registration_officer, marital_status, comments as case_type FROM hp_admission WHERE patient_no = '" + admissionNumberTxt.getText() + "' ORDER BY 1"));

        // jButton301.setEnabled(true);
        opSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_opSearchTableMouseClicked

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton1Clicked();
        this.jButton1.setVisible(true);// Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void opSearchFieldTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_opSearchFieldTxtCaretUpdate
        if (opSearchFieldTxt.getCaretPosition() < 5) {

            System.out.println("Nothing");
        } else {
            if (this.searchbyPatientNameChkbx.isSelected()) {
                opSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth::date, residence, patient_race as unit_number from hp_patient_register where (upper(first_name||' '||second_name||' '||last_name)) ILIKE '%" + opSearchFieldTxt.getText().toString() + "%' or patient_race ILIKE '%" + opSearchFieldTxt.getText().toString() + "%'"));
            } else {
                opSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth::date, residence, patient_race as unit_number from hp_patient_register where patient_no ILIKE '%" + opSearchFieldTxt.getText().toString() + "%' or patient_race ILIKE '%" + opSearchFieldTxt.getText().toString() + "%'"));

            }
            /*
             * try {
             *
             * searchRowSet1.execute("SELECT patient_no, (upper(first_name||'
             * '||second_name||' '||last_name)) as name, year_of_birth,
             * residence from hp_patient_register where (upper(first_name||'
             * '||second_name||' '||last_name)) ILIKE
             * '"+jTextField1111.getText().toString()+"%'"); //l
             * searchRowSet.execute(); // searchRowSet.execute("SELECT
             * patient_no, (upper(first_name||' '||second_name||' '||last_name))
             * as name, year_of_birth, residence from hp_patient_register where
             * first_name '~ '~"+jTextField11.getText()+"' order by name");
             *
             * jSearchTable1.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet1, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
             * "Patient no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
             * false), new
             * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
             * "Year of birth", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("residence",
             * "Residence", false) }));
             */
            opSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane1.setViewportView(opSearchTable);

        }

        // Add your handling code here:
    }//GEN-LAST:event_opSearchFieldTxtCaretUpdate

    private void opSearchFieldTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opSearchFieldTxtActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_opSearchFieldTxtActionPerformed

    private void ipSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ipSearchTableMouseClicked
        String name = null;
        String patientNo = null;
        int pNo = 0;

        jTextField72.setText("");
        jTextField82.setText("");
        prevVisitIdtxt.setText("");
        jTextField32.setText("");
        jTextField42.setText("");

        admissionNumberTxt.setText(ipSearchTable.getValueAt(ipSearchTable.getSelectedRow(), 0).toString());
        firstNameTxt.setText(ipSearchTable.getValueAt(ipSearchTable.getSelectedRow(), 1).toString());
        surNameTxt.setText(ipSearchTable.getValueAt(ipSearchTable.getSelectedRow(), 2).toString());

        try {

            java.sql.Statement stmt112 = connectDB.createStatement();
            java.sql.ResultSet rset112 = stmt112.executeQuery("select nationality,occupation,pat_religion,pat_district,sub_chief,nok_relationship,home_county,residence_county,education_level,id_no,pat_location,chief_name,speciality,nok_residence,marital_status from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' ");
            while (rset112.next()) {
                nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset112.getObject(1), "-"));
                occupationCmbx.setSelectedItem(dbObject.getDBObject(rset112.getObject(2), "-"));
                religionCmbx.setSelectedItem(rset112.getObject(3).toString());
                districtCmbx.setSelectedItem(dbObject.getDBObject(rset112.getObject(4), "-"));
                unitNumberTxt.setText(rset112.getObject(5).toString());
                nokRelationShipCmbx.setSelectedItem(rset112.getObject(6));
                countyofBirthCmbx.setSelectedItem(dbObject.getDBObject(rset112.getObject(7), "-"));
                countyofResidenceCmbx.setSelectedItem(rset112.getObject(8));
                educationLevelCmbx.setSelectedItem(rset112.getObject(9));
                if (rset112.getObject(10).toString().equalsIgnoreCase("")) {
                    idPassportTxt.setText("-");
                } else {
                    idPassportTxt.setText(rset112.getString(10));
                }

                if (rset112.getObject(11).toString().equalsIgnoreCase("")) {
                    locationTxt.setText("-");
                } else {
                    locationTxt.setText(rset112.getObject(11).toString());
                }

                if (rset112.getObject(12).toString().equalsIgnoreCase("")) {
                    jTextField27.setText("-");
                } else {
                    jTextField27.setText(rset112.getString(12));
                }

                specialtyClinicCmbx.setSelectedItem(rset112.getObject(13));
                nokResidenceTxt.setText(rset112.getString(14));

                if (rset112.getObject(15).toString().startsWith("S")) {
                    singleMaritalChkbx.setSelected(true);

                }
                if (rset112.getObject(15).toString().startsWith("M")) {
                    marriedMaritalChkbx.setSelected(true);
                }
                if (rset112.getObject(15).toString().startsWith("D")) {
                    divorcedMaritalChkbx.setSelected(true);
                }
                if (rset112.getObject(15).toString().startsWith("W")) {
                    widowedMaritalChkbx.setSelected(true);
                }

            }

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select nok,residence,year_of_birth::date,address,sex,tel_no,('now'::date-year_of_birth::date)/365 from hp_inpatient_register where patient_no ='" + admissionNumberTxt.getText() + "'");
            while (rset.next()) {
                nokNameTxt.setText(rset.getObject(1).toString());
                currentResidence.setText(rset.getObject(2).toString());
                java.text.DateFormat df = java.text.DateFormat.getDateInstance();
                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;
                ageTxt.setText(rset.getObject(7).toString());
                sdf.applyPattern("yyyy-MM-dd");
                try {
                    datePickerYOB.setDate(sdf.parse(rset.getString(3)));
                } catch (java.text.ParseException pe) {
                    javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
                }
                jTextField9.setText(rset.getObject(4).toString());
                nokTelephoneTxt.setText(rset.getObject(6).toString());
                if (rset.getObject(5).toString().startsWith("M")) {
                    maleChkbx.setSelected(true);
                } else {
                    femaleChkbx.setSelected(true);
                }
            }

            java.sql.Statement stmt11 = connectDB.createStatement();
            java.sql.ResultSet rset11 = stmt11.executeQuery("select patient_no from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' and discharge = false");
            while (rset11.next()) {
                name = rset11.getObject(1).toString();
            }
            boolean checkOut = false;
            java.sql.Statement stmt1111xx = connectDB.createStatement();
            java.sql.ResultSet rset1111x = stmt1111xx.executeQuery("select check_out from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' order by date_admitted DESC LIMIT 1");
            while (rset1111x.next()) {
                checkOut = rset1111x.getBoolean(1);
            }

            if (!jRadioButton1.isSelected()) {
                if (admissionNumberTxt.getText().equalsIgnoreCase(name)) {
                    javax.swing.JOptionPane.showMessageDialog(this, " Patient already admitted ", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    admissionNumberTxt.setText("");
                    surNameTxt.setText("");
                }
            }

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select patient_no from hp_inpatient_register where patient_no ='" + this.admissionNumberTxt.getText() + "'");
            while (rsetf.next()) {
                patientNo = rsetf.getObject(1).toString();
            }

            java.sql.Statement stmt11f = connectDB.createStatement();

            java.sql.ResultSet rset11f = stmt11f.executeQuery("select patient_no,check_out from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' and check_out = false");
            while (rset11f.next()) {
                // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                //  name = rset11f.getObject(1).toString();
                if (rset11f.getBoolean(2) == false) {
                    jCheckBox7.setSelected(true);
                } else {
                    jCheckBox7.setSelected(false);
                }
            }

            java.sql.Statement stmt111 = connectDB.createStatement();
            java.sql.ResultSet rset111 = stmt111.executeQuery("select count (patient_no) from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "'");
            while (rset111.next()) {
                // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                pNo = rset111.getInt(1);
            }
            if (pNo > 0) {

                java.sql.Statement stmt1111 = connectDB.createStatement();
                java.sql.ResultSet rset1111 = stmt1111.executeQuery("select date_admitted::date,discharge_date::date,CASE WHEN (visit_id IS NULL) THEN '-' ELSE visit_id END AS visit_id,ward,bed_no from hp_admission where patient_no ='" + admissionNumberTxt.getText() + "' order by date_admitted DESC LIMIT 1");
                while (rset1111.next()) {
                    jTextField72.setText(rset1111.getObject(2).toString());
                    jTextField82.setText(rset1111.getObject(1).toString());
                    prevVisitIdtxt.setText(rset1111.getObject(3).toString());
                    jTextField32.setText(rset1111.getObject(4).toString());
                    jTextField42.setText(rset1111.getObject(5).toString());
                }
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }

        previousVisitsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT input_date::timestamp(0) as visit_date, clinic as speciality_visited, parameter as registration_point, user_name as registration_officer, marital_status, urgency as case_type FROM hp_patient_visit WHERE patient_no = '" + admissionNumberTxt.getText() + "' UNION SELECT data_capture_time::timestamp(0) as visit_date, ward as speciality_visited, diagnosis3 as registration_point, user_name as registration_officer, marital_status, comments as case_type FROM hp_admission WHERE patient_no = '" + admissionNumberTxt.getText() + "'"));

        // Flagging patients whole accounts have outstanding bills
        javax.swing.JOptionPane.showMessageDialog(this, "Patient Number [" + admissionNumberTxt.getText() + "] outstanding bill status total : [" + com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.PatientAccountStatus.getOutstandillBill(connectDB, patientNo) + com.afrisoftech.lib.PatientAccountStatus.getPersonalDebtStatus(connectDB, patientNo)) + "], Abscondment status bill : [" + com.afrisoftech.lib.PatientAccountStatus.getAbscondmentStatus(connectDB, patientNo) + "]");


        ipSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_ipSearchTableMouseClicked

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        ipSearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void ipSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ipSearchTxtCaretUpdate
        if (ipSearchTxt.getCaretPosition() < 5) {

            System.out.println("Nothing");
        } else {
            if (this.searchbyPatientNameChkbx.isSelected()) {
                ipSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT hd.patient_no, (upper(hd.second_name||' '||hd.last_name)) as name, hd.first_name AS surname, (SELECT hp.sub_chief FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) as unit_number, hd.tel_no as telephone_no, (SELECT hp.id_no FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) as id_no, hd.nok as next_of_kin from hp_inpatient_register hd where (upper(hd.second_name||' '||hd.first_name||' '||hd.last_name)) ILIKE '%" + ipSearchTxt.getText().toString() + "%' ORDER BY second_name"));
                ipSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(ipSearchTable);

            } else {
                if (this.searchbyPatientNumberChkbx.isSelected()) {
                    ipSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT hd.patient_no, (upper(hd.second_name||' '||hd.last_name)) as name,hd.first_name AS surname, (SELECT hp.sub_chief FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) as unit_number, hd.tel_no as telephone_no, (SELECT hp.id_no FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) as id_no, hd.nok as next_of_kin from hp_inpatient_register hd where hd.patient_no ILIKE '%" + ipSearchTxt.getText().toString() + "%' or (SELECT hp.sub_chief FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) ilike '%" + ipSearchTxt.getText().toString() + "%'  or hd.nok ilike '%" + ipSearchTxt.getText().toString() + "%'  or (SELECT hp.id_no FROM hp_admission hp WHERE hp.patient_no = hd.patient_no order by 1 LIMIT 1) ilike '%" + ipSearchTxt.getText().toString() + "%'  or hd.tel_no ilike '%" + ipSearchTxt.getText().toString() + "%' ORDER BY second_name"));
                    ipSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(ipSearchTable);

                }
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_ipSearchTxtCaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        this.jButton1.setVisible(true);
        searchButtonClicked(); // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.admissionNumberTxt.getLocationOnScreen();

        ipSearchDialog.setSize(700, 200);

        ipSearchDialog.setLocation(point);

        ipSearchDialog.setVisible(true);

    }
    private void jButton2021ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2021ActionPerformed
        //this.revalidate();
        jTextField161.setText("");
        jTextField58211.setText("");

        jTextField31.setText("");
        //jTextField61.setText("");
        jTextField151.setText("");
        jTextField41.setText("");
        jTextField141.setText("");
        jTextField51.setText("");
        //  this.jComboBox21.setToolTipText(null);
        // Add your handling code here:
    }//GEN-LAST:event_jButton2021ActionPerformed

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void jComboBox31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox31ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select insurer from pb_creditcard_types where card_name ='" + jComboBox31.getSelectedItem() + "'");
            while (rset.next()) {
                jTextField71.setText(rset.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }        // Add your handling code here:
    }//GEN-LAST:event_jComboBox31ActionPerformed

    private void paymentModeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeCmbxActionPerformed
        if (paymentModeCmbx.getSelectedItem().equals("Credit Card")) {
            jPanel5.setVisible(false);
            jPanel21.setVisible(true);
        } else {
            if (paymentModeCmbx.getSelectedItem().equals("Scheme")) {
                jPanel21.setVisible(false);
                jPanel5.setVisible(true);
            } else {
                jPanel21.setVisible(false);
                jPanel5.setVisible(false);
            }
        }

        // jButton301.setEnabled(true);        // Add your handling code here:
    }//GEN-LAST:event_paymentModeCmbxActionPerformed

    private void jButton2521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2521ActionPerformed
        jDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton2521ActionPerformed

    private void jButton3011ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3011ActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        try {

            String selectedchkbx = null;

            if (this.jCheckBox21.isSelected()) {
                selectedchkbx = jCheckBox21.getText();
            } else {
                selectedchkbx = jCheckBox11.getText();
            }
            String patientNo = null;

            try {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select patient_no from hp_inpatient_register where patient_no ='" + this.jTextField21.getText() + "'");
                while (rset.next()) {
                    patientNo = rset.getObject(1).toString();
                }
            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }

            if (this.jTextField21.getText().equalsIgnoreCase(patientNo)) {
                jLabel33.setForeground(java.awt.Color.red);
                jLabel33.setText("PATIENT No. Already On File");

                // javax.swing.JOptionPane.showMessageDialog(this,"PATIENT No. Already Exists", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {

                try {
                    connectDB.setAutoCommit(false);
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_inpatient_register values(?, initcap(?), initcap(?), ?, ?, ?, ?, ?, ?, ?)");
                    if (jTextField21.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter Member No.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                        pstmt.setString(1, jTextField21.getText());
                    }

                    //pstmt.setString(1,jTextField21.getText());
                    if (jTextField161.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter First Name and Second Name", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                        pstmt.setString(2, jTextField161.getText());
                    }
                    pstmt.setString(3, jTextField31.getText());
                    pstmt.setString(4, "");
                    pstmt.setString(5, jTextField151.getText());
                    pstmt.setString(6, jTextField41.getText());
                    pstmt.setString(7, jTextField51.getText());
                    if (jTextField141.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter residence", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                        pstmt.setString(8, jTextField141.getText());
                    }

                    pstmt.setString(9, jTextField58211.getText());
                    if (selectedchkbx == null) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient sex", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                        pstmt.setObject(10, selectedchkbx);
                    }

                    pstmt.executeUpdate();
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    //                    this.jTextField22.setText(jTextField361.getText());
                    this.surNameTxt.setText(jTextField161.getText() + " " + jTextField31.getText());
                    admissionNumberTxt.setText(jTextField21.getText());
                    nokNameTxt.setText(jTextField151.getText());
                    jDialog2.dispose();
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton3011ActionPerformed

    private void admissionWardCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admissionWardCmbxActionPerformed
        this.jButton1.setVisible(true);
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select ward_code from hp_wards where ward_name ='" + admissionWardCmbx.getSelectedItem() + "'");
            while (rset.next()) {
                wardCodeTxt.setText(rset.getObject(1).toString());
                // jTextField11.setText(rset.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }

        // crset4.setCommand("select bed_no from hp_bed_setup where ward ='"+jComboBox2.getSelectedItem()+"' and occupied = 'f' and available = 'Available' order by bed_no asc");
        // try {
        // crset4.execute();
        if (jButton1.getText().equalsIgnoreCase("Update")) {
            bedNumberCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + jTextField42.getText() + "' as bed_no UNION ALL select bed_no from hp_bed_setup where ward ='" + admissionWardCmbx.getSelectedItem() + "' and occupied = false and available = 'Available' order by bed_no asc"));

        } else {
            bedNumberCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' as bed_no UNION ALL select bed_no from hp_bed_setup where ward ='" + admissionWardCmbx.getSelectedItem() + "' and occupied = false and available = 'Available' order by bed_no asc"));
            // jComboBox4.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset4, "bed_no", null, null, null));
            //}catch (java.sql.SQLException sql){}
        }
        // Add your handling code here:
    }//GEN-LAST:event_admissionWardCmbxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

//        referredFromTxt.setText("");
        jTextField9.setText("");
        nokTelephoneTxt.setText("");
        nokNameTxt.setText("");
        wardCodeTxt.setText("");
        surNameTxt.setText("");
//        referredFromTxt.setText("");
        currentResidence.setText("");
        jTextField4.setText("");
        jTextField3611.setText("");
        jTextField23.setText("");
        jTextField36.setText("");
        nhifClaimNumberTxt.setText("");
        cSheetNoTxt.setText("");
        countyofResidenceCmbx.setSelectedItem(null);
        countyofBirthCmbx.setSelectedItem(null);
        educationLevelCmbx.setSelectedItem(null);
        oldFileNumberTxt.setText("");
        employerTxt.setText("");
        employerTelTxt.setText("");
        this.jButton1.setEnabled(false);
        this.admitPrintBtn.setEnabled(false);

        referredcombo.setSelectedItem("-");
        jTextField9.setText("");
        nokTelephoneTxt.setText("");
        nokNameTxt.setText("");
        // jTextField6.setText("");
        wardCodeTxt.setText("");
        surNameTxt.setText("");
//        referredFromTxt.setText("");
        //        jTextField12.setText("");
        currentResidence.setText("");
        jTextField4.setText("");
        jTextField3611.setText("");
        jTextField23.setText("");
        jTextField36.setText("");
        // jTextField4.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (admissionNumberTxt.getText().length() > 3) {
            admitPrintBtn.setText("Update File");
            referredcombo.setSelectedItem("-");
            jTextField9.setText("");
            nokTelephoneTxt.setText("");
            nokNameTxt.setText("");
            firstNameTxt.setText("");
            wardCodeTxt.setText("");
            surNameTxt.setText("");
//        jTextField6.setText("");
            // jTextField12.setText("");
            memberNumberTxt.setText("");
            currentResidence.setText("");
            jTextField4.setText("");
            bedRateTxt.setText("");
            jTextField3611.setText("");
            jTextField23.setText("");
            jTextField36.setText("");
            searchButton1.setEnabled(false);
            searchButton.setEnabled(true);
//        searchbyPatientNameChkbx.setEnabled(true);
//        searchbyPatientNumberChkbx.setEnabled(true);
            jCheckBox311.setEnabled(true);
            jCheckBox221.setEnabled(true);
//            referredFromTxt.setEditable(true);
            jTextField9.setEditable(true);
            nokTelephoneTxt.setEditable(true);
            nokNameTxt.setEditable(true);
            firstNameTxt.setEditable(true);
            surNameTxt.setEditable(true);
//        jTextField6.setEditable(true);
            admissionNumberTxt.setEditable(false);
            memberNumberTxt.setEditable(true);
            currentResidence.setEditable(true);
            jTextField4.setEditable(true);
            jTextField3611.setEditable(true);
            jTextField361.setEditable(false);
            jTextField23.setEditable(true);
            jTextField36.setEditable(true);

            try {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select nok,residence,year_of_birth::date,address,sex,tel_no,first_name,second_name from hp_inpatient_register where patient_no  ilike '" + admissionNumberTxt.getText() + "%'");
                while (rset.next()) {
                    //  jTextField2.setText(rset.getObject(1).toString());
                    nokNameTxt.setText(rset.getObject(1).toString());
                    currentResidence.setText(rset.getObject(2).toString());
                    java.text.DateFormat df = java.text.DateFormat.getDateInstance();
                    java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

                    sdf.applyPattern("yyyy-MM-dd");
                    try {
                        datePickerYOB.setDate(sdf.parse(rset.getString(3)));
                    } catch (java.text.ParseException pe) {
                        javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
                    }
                    jTextField9.setText(rset.getObject(4).toString());
                    nokTelephoneTxt.setText(rset.getObject(6).toString());
                    if (rset.getObject(5).toString().startsWith("M")) {
                        maleChkbx.setSelected(true);
                    } else {
                        femaleChkbx.setSelected(true);
                    }

                    surNameTxt.setText(rset.getObject(7).toString());
                    firstNameTxt.setText(rset.getObject(8).toString());

                }
                java.sql.Statement stmt11 = connectDB.createStatement();
                java.sql.ResultSet rset11 = stmt11.executeQuery("select visit_id,date_admitted,ward,bed_no,CASE WHEN (discharge = false) THEN '-' ELSE discharge_date END AS discharge_date,discharge,admission_reason,deposit from hp_admission where patient_no  ilike '" + admissionNumberTxt.getText() + "%' ORDER BY visit_id DESC");
                while (rset11.next()) {
                    //  jTextField2.setText(rset.getObject(1).toString());
                    prevVisitIdtxt.setText(rset11.getObject(1).toString());
                    jTextField82.setText(rset11.getObject(2).toString());
                    jTextField32.setText(rset11.getObject(3).toString());
                    jTextField42.setText(rset11.getObject(4).toString());
                    jTextField72.setText(rset11.getObject(5).toString());
                    bedRateTxt.setText(rset11.getObject(8).toString());
                    jTextPane1.setText(rset11.getObject(7).toString());
                    if (rset11.getBoolean(6) == true) {
                        jCheckBox311.setSelected(true);
                    } else {
                        jCheckBox221.setSelected(true);
                    }
                }
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Retrieve the file first to allow editing.", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (unitNumberTxt.getText().length() > 1) {
            if (surNameTxt.getText().length() > 1) {
                if (firstNameTxt.getText().length() > 1) {
                    if (currentResidence.getText().length() > 1) {
                        if (admissionWardCmbx.getSelectedItem() != null) {
                            if (bedCategoryCmbx.getSelectedItem() != null) {
                                if (specialtyClinicCmbx.getSelectedItem() != null) {
                                    if (paymentModeCmbx.getSelectedItem() != null) {
                                        if (bedNumberCmbx.getSelectedItem() != null) {
                                            if (bedRateTxt.getText().length() > 0) {
                                                if (nokNameTxt.getText().length() > 1) {
                                                    //  if (nhifChbx.isSelected() && nhifCardMemberNumberTxt.getText().length() > 1) {
                                                    if (nokRelationShipCmbx.getSelectedItem() != null) {
                                                        if (nokTelephoneTxt.getText().length() > 6) {
                                                            admitPatient();
                                                            jButton3.doClick();
                                                        } else {
                                                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : NOK Telephone Number is mandatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                        }
                                                    } else {
                                                        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : NOK Relationship is mandatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                    }
                                                    //  } else {
                                                    //      javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : You MUST provide a card number for NHIF beneficiary", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                    //  }
                                                } else {
                                                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Next of Kin name is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                }
                                            } else {
                                                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Bed Rate is manadatory, You MUST set rate through setting the \"Bed Category\"", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                            }
                                        } else {
                                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Bed Number is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                        }
                                    } else {
                                        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Payment Mode is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                    }
                                } else {
                                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Specialty Clinic is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                }
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Bed category is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                            }
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Admission ward is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Current residence is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : First name is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Surname is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Unit Number is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

// Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

private void ageTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ageTxtCaretUpdate
//    if (ageTxt.getText().equalsIgnoreCase("")) {
//    } else {
//        float ages = java.lang.Float.valueOf(ageTxt.getText());
//        int ageYrs = java.lang.Math.round(ages);
//        try {
//            java.sql.Statement stmnza = connectDB.createStatement();
//            java.sql.ResultSet rsnza = stmnza.executeQuery("select (CURRENT_DATE::DATE - ('" + ageYrs + "'*365))");
//            while (rsnza.next()) {
//                java.text.DateFormat df = java.text.DateFormat.getDateInstance();
//                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;
//
//                sdf.applyPattern("yyyy-MM-dd");
//                try {
//                    this.datePickerYOB.setDate(sdf.parse(rsnza.getString(1)));
//
//                } catch (java.text.ParseException pe) {
//                    javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
//                }
//            }
//        } catch (java.sql.SQLException sq) {
//
//            sq.printStackTrace();
//            System.out.println(sq.getMessage());
//            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//        }
//    }
// TODO add your handling code here:
}//GEN-LAST:event_ageTxtCaretUpdate

private void createManualNumbersRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createManualNumbersRbtnActionPerformed
    newAdimissionRbtnActionPerformed(evt);
    admissionNumberTxt.setEditable(true);
    this.jButton1.setEnabled(true);
    this.admitPrintBtn.setEnabled(true);
// TODO add your handling code here:
}//GEN-LAST:event_createManualNumbersRbtnActionPerformed

private void singleMaritalChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleMaritalChkbxActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_singleMaritalChkbxActionPerformed

private void surNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_surNameTxtCaretUpdate

//    searchbyPatientNameChkbx.setSelected(true);

    System.out.println("Showing dialog");

    java.awt.Point point = this.surNameTxt.getLocationOnScreen();

    point.setLocation(surNameTxt.getLocationOnScreen().x, surNameTxt.getLocationOnScreen().y + 20);

    jSearchDialog4.setSize(700, 200);

    jSearchDialog4.setLocation(point);

    jSearchDialog4.setVisible(true);

    if (surNameTxt.getCaretPosition() > 3) {

        jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_inpatient_register where second_name||' '||first_name ILIKE '%" + surNameTxt.getText() + "%' order by second_name"));

    }

//    surNameTxt.requestFocusInWindow();

     // TODO add your handling code here:
}//GEN-LAST:event_surNameTxtCaretUpdate

private void firstNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_firstNameTxtCaretUpdate

//    searchbyPatientNameChkbx.setSelected(true);

    System.out.println("Showing dialog");

    java.awt.Point point = this.firstNameTxt.getLocationOnScreen();

    point.setLocation(firstNameTxt.getLocationOnScreen().x, firstNameTxt.getLocationOnScreen().y + 20);

    jSearchDialog4.setSize(700, 200);

    jSearchDialog4.setLocation(point);

    jSearchDialog4.setVisible(true);


        if (firstNameTxt.getCaretPosition() > 3) {

            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_inpatient_register where second_name||' '||first_name ILIKE '%" + firstNameTxt.getText() + "%' order by second_name"));

        } 

//    firstNameTxt.requestFocusInWindow();

    // TODO add your handling code here:
}//GEN-LAST:event_firstNameTxtCaretUpdate

    private void datePickerYOBInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_datePickerYOBInputMethodTextChanged
        /*
         * try { java.sql.PreparedStatement pstmt =
         * connectDB.prepareStatement("SELECT ");
         *
         * // TODO add your handling code here: } catch (SQLException ex) {
         * Logger.getLogger(AdmissionIntfr.class.getName()).log(Level.SEVERE,
         * null, ex); }
         *
         */
    }//GEN-LAST:event_datePickerYOBInputMethodTextChanged

    private void admitPrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitPrintBtnActionPerformed

        java.lang.Boolean nhif = false;
        if ((nhifChbx.isSelected() == true) && nhifCardMemberNumberTxt.getText().length() > 1) {
            nhif = true;
        } else if ((nhifChbx.isSelected() == false)) {
            nhif = true;
        }

        if (admitPrintBtn.getText().equalsIgnoreCase("Update file")) {
            String adm = null;
            String sex = null;

            if (jCheckBox221.isSelected()) {
                adm = "false";
            } else {
                if (jCheckBox311.isSelected()) {
                    adm = "true";
                }
            }

            if (maleChkbx.isSelected()) {
                sex = maleChkbx.getText();
            } else {
                sex = femaleChkbx.getText();
            }

            if (this.marriedMaritalChkbx.isSelected()) {
                selectedStatus = marriedMaritalChkbx.getText();
            }

            if (this.singleMaritalChkbx.isSelected()) {
                selectedStatus = singleMaritalChkbx.getText();
            }

            if (this.divorcedMaritalChkbx.isSelected()) {
                selectedStatus = divorcedMaritalChkbx.getText();
            }

            if (this.widowedMaritalChkbx.isSelected()) {
                selectedStatus = widowedMaritalChkbx.getText();
            }

            try {

                java.sql.Statement stmtfsx = connectDB.createStatement();
                java.sql.ResultSet rsetfsx = stmtfsx.executeQuery("SELECT '" + datePickerYOB.getDate() + "'::DATE ");
                while (rsetfsx.next()) {
                    dateOfBirth = rsetfsx.getString(1);

                }

                java.sql.Statement stmnzab = connectDB.createStatement();
                java.sql.ResultSet rsnzab = stmnzab.executeQuery("select (CURRENT_DATE::DATE - '" + datePickerYOB.getDate() + "'::DATE)/365");
                while (rsnzab.next()) {
                    ageYrs = rsnzab.getDouble(1);
                }

                java.sql.PreparedStatement pstmt811x = connectDB.prepareStatement("UPDATE hp_admission SET  patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "',residence ='" + currentResidence.getText() + "',nok = '" + nokNameTxt.getText() + "',tel = '" + nokTelephoneTxt.getText() + "',address = '" + jTextField9.getText() + "',pat_age = '" + ageYrs + "',gender = '" + sex + "',"
                        + "marital_status = '" + selectedStatus + "',id_no='" + idPassportTxt.getText() + "', nationality='" + nationalityCmbx.getSelectedItem() + "',  speciality='" + specialtyClinicCmbx.getSelectedItem() + "', occupation='" + occupationCmbx.getSelectedItem() + "', pat_religion='" + religionCmbx.getSelectedItem() + "', pat_district='" + districtCmbx.getSelectedItem() + "',pat_location='" + locationTxt.getText() + "', chief_name='" + jTextField27.getText() + "', sub_chief='" + unitNumberTxt.getText() + "', nok_residence='" + nokResidenceTxt.getText() + "', nok_relationship='" + nokRelationShipCmbx.getSelectedItem() + "', \n"
                        + "       home_county='" + countyofBirthCmbx.getSelectedItem() + "',comments='" + patientUrgencyCMBX.getSelectedItem().toString() + "', residence_county='" + countyofResidenceCmbx.getSelectedItem() + "', education_level='" + educationLevelCmbx.getSelectedItem() + "', date_admitted = '" + datePicker1.getDate() + "' WHERE  patient_no = '" + admissionNumberTxt.getText() + "' AND check_out = false AND discharge_date is null");
                //visit_id = '" + jTextField122.getText() + "' and 
                pstmt811x.executeUpdate();

//                            java.sql.PreparedStatement pstmt811x = connectDB.prepareStatement("UPDATE hp_admission SET  patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "',date_admitted = '" + datePicker1.getDate().toString() + "',bed_no = '" + bedNumberCmbx.getSelectedItem() + "',ward = '" + admissionWardCmbx.getSelectedItem() + "',wing = '" + bedCategoryCmbx.getSelectedItem() + "', deposit = '" + bedRateTxt.getText() + "',residence ='" + currentResidence.getText() + "',nok = '" + nokNameTxt.getText() + "',tel = '" + nokTelephoneTxt.getText() + "',address = '" + jTextField9.getText() + "',discharge = '" + adm + "',pat_age = '" + ageYrs + "',gender = '" + sex + "',"
//                                    + "marital_status = '" + selectedStatus + "',id_no='"+idPassportTxt.getText()+"', nationality='"+nationalityCmbx.getSelectedItem()+"',  speciality='"+specialtyClinicCmbx.getSelectedItem()+"', occupation='"+occupationCmbx.getSelectedItem()+"', pat_religion='"+religionCmbx.getSelectedItem()+"', pat_district='"+districtCmbx.getSelectedItem()+"',pat_location='"+locationTxt.getText()+"', chief_name='"+jTextField27.getText()+"', sub_chief='"+unitNumberTxt.getText()+"', nok_residence='"+nokResidenceTxt.getText()+"', nok_relationship='"+nokRelationShipCmbx.getSelectedItem()+"', \n" +
//"       home_county='"+countyofBirthCmbx.getSelectedItem()+"',comments='"+ patientUrgencyCMBX.getSelectedItem().toString()+"', residence_county='"+countyofResidenceCmbx.getSelectedItem()+"', education_level='"+educationLevelCmbx.getSelectedItem()+"' WHERE visit_id = '" + jTextField122.getText() + "' and patient_no = '" + admissionNumber.getText() + "'");
//                            pstmt811x.executeUpdate();
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE hp_inpatient_register SET  first_name = '" + surNameTxt.getText() + "',second_name = '" + firstNameTxt.getText() + "',adm_date = '" + datePicker1.getDate().toString() + "',residence ='" + currentResidence.getText() + "',nok = '" + nokNameTxt.getText() + "',tel_no = '" + nokTelephoneTxt.getText() + "',address = '" + jTextField9.getText() + "',sex = '" + sex + "',year_of_birth = '" + dateOfBirth + "',payer = '" + jTextField4.getText() + "'  where patient_no = '" + admissionNumberTxt.getText() + "'");
                pstmt.executeUpdate();

                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("UPDATE hp_patient_register set first_name = '" + surNameTxt.getText() + "',"
                        + "second_name = '" + firstNameTxt.getText() + "' "
                        + " WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                pstmt1.executeUpdate();

                java.sql.PreparedStatement pstmn = connectDB.prepareStatement("UPDATE hp_patient_visit SET name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                pstmn.executeUpdate();

                java.sql.PreparedStatement pstmnx = connectDB.prepareStatement("UPDATE credit_acc_slip SET pat_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                pstmnx.executeUpdate();

                java.sql.PreparedStatement pstmnw = connectDB.prepareStatement("UPDATE ac_ledger SET dealer = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "' and description not ilike '%grn account%'");
                pstmnw.executeUpdate();

                java.sql.PreparedStatement pstmnf = connectDB.prepareStatement("UPDATE hp_patient_billing SET patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                pstmnf.executeUpdate();

                java.sql.PreparedStatement pstmnq = connectDB.prepareStatement("UPDATE hp_pharmacy SET patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                pstmnq.executeUpdate();
            } catch (java.sql.SQLException ex) {
                System.out.println("the update file error is" + ex);
                ex.printStackTrace();
            }

            javax.swing.JOptionPane.showMessageDialog(this, "File updated for patient no [" + admissionNumberTxt.getText() + "]", "Information", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            admitPrintBtn.setEnabled(false);

        } else {

            if (nationalityCmbx.getSelectedItem() != null) {
//            if (unitNumberTxt.getText().length() > 1) {
//                if (cSheetNoTxt.getText().length() > 1) {
                if (surNameTxt.getText().length() > 1) {
                    if (firstNameTxt.getText().length() > 1) {
                        if (currentResidence.getText().length() > 1) {
                            if (admissionWardCmbx.getSelectedItem() != null) {
                                if (bedCategoryCmbx.getSelectedItem() != null) {
                                    if (specialtyClinicCmbx.getSelectedItem() != null) {
                                        if (!paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                                            if (bedNumberCmbx.getSelectedItem() != null) {
                                                if (bedRateTxt.getText().length() > 0) {
                                                    if (nokNameTxt.getText().length() > 1) {
                                                        if (nhif == true) {
                                                            if (nokRelationShipCmbx.getSelectedItem() != null) {
                                                                if (nokTelephoneTxt.getText().length() > 6) {

                                                                    int unitNo = 0;
                                                                    boolean status = true;
                                                                    if (newAdimissionRbtn.isSelected()) {

//                                                                            try {
//                                                                                java.sql.Statement stmtx = connectDB.createStatement();
//                                                                                java.sql.ResultSet rsetx = stmtx.executeQuery("SELECT count(*) FROM hp_admission WHERE sub_chief ='" + unitNumberTxt.getText() + "'");
//                                                                                while (rsetx.next()) {
//                                                                                    unitNo = rsetx.getInt(1);
//                                                                                }
//
//                                                                                if (unitNo > 0) {
//                                                                                    //  jLabel33.setForeground(java.awt.Color.red);
//                                                                                    //  jLabel33.setText("PATIENT No. Already On File");
//                                                                                    status = false;
//                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "The Unit Number is already in use", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//                                                                                }
//                                                                            } catch (java.sql.SQLException sql) {
//                                                                                sql.printStackTrace();
//                                                                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//                                                                            }
                                                                    }

                                                                    if (status == true) {

                                                                        //  else 
                                                                        if (admitPrintBtn.getText().equalsIgnoreCase("Admit & Print")) {
                                                                            adminPrint();
                                                                        }

                                                                    }
                                                                } else {
                                                                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : NOK Telephone Number is mandatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                                }
                                                            } else {
                                                                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : NOK Relationship is mandatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                            }
                                                        } else {
                                                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :"
                                                                    + " You MUST provide a card number for NHIF beneficiary", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                        }
                                                    } else {
                                                        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Next of Kin name is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                    }
                                                } else {
                                                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Bed Rate is manadatory, You MUST set rate through setting the \"Bed Category\"", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                }
                                            } else {
                                                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Bed Number is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                            }
                                        } else {
                                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Payment Mode is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                        }
                                    } else {
                                        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Specialty Clinic is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                    }
                                } else {
                                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Bed category is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                }
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Admission ward is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                            }
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : Current residence is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : First name is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Surname is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

//                } else {
//                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Charge Sheet Number is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//                }
//            } else {
//                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Unit Number is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//            }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS :  Nationality field is manadatory", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }

        //jButton3.doClick();
        searchbyPatientNumberChkbx.setSelected(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_admitPrintBtnActionPerformed

    private void employerTelTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employerTelTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employerTelTxtActionPerformed

    private void disposeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeBtnActionPerformed

        jSearchDialog4.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_disposeBtnActionPerformed

    private void unitNumberTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_unitNumberTxtCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_unitNumberTxtCaretUpdate

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        admitPrintBtn.setText("Update File");
        admitPrintBtn.setEnabled(true);
        searchButton1.setEnabled(false);
//jButton2.doClick();
        jTextField361.setEnabled(false);

        jButton2.setEnabled(true);
        jButton6.setEnabled(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String nhifStatusTxt = null;

        if (nhifChbx.isSelected()) {
            nhifStatusTxt = "YES";
        } else {
            nhifStatusTxt = "NO";
        }

        String interviewer = null;

        String receiptNo = null, amt = null;

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT current_user");
            java.sql.ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                interviewer = rset.getString(1);
            }

            java.sql.Statement stmt11 = connectDB.createStatement();
            java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT  description,receipt_no, debit  FROM ac_cash_collection where  patient_no='" + admissionNumberTxt.getText() + "' and receipt_time::date >= current_date-1 ");
            while (rset11.next()) {
                receiptNo = rset11.getObject(2).toString();
                amt = rset11.getObject(3).toString();
            }

            String selectgender = null;
            if (this.maleChkbx.isSelected()) {
                selectgender = maleChkbx.getText();
            } else {

                selectgender = femaleChkbx.getText();
            }

            com.afrisoftech.reports.PatientRegFormPdf.connectDB = connectDB;
////            com.afrisoftech.reports.PatientRegFormPdf regForm = new com.afrisoftech.reports.PatientRegFormPdf();
////            regForm.callPdf(connectDB, admissionNumberTxt.getText(), "IP");
        } catch (SQLException ex) {
            ex.printStackTrace();

            Logger.getLogger(PatientRegisterIntfr.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton6ActionPerformed
    private void changeDate() {
        agelabel.setText(com.afrisoftech.lib.PatientAge.getPatientActualAge(connectDB, this.datePickerYOB.getDate()));
        ageTxt.setText(String.valueOf(com.afrisoftech.lib.PatientAge.getPatientAge(connectDB, this.datePickerYOB.getDate())));

    }
    private void jPanel18MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel18MouseMoved
//       changeDate();
    }//GEN-LAST:event_jPanel18MouseMoved

    private void admissionsReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admissionsReportBtnActionPerformed
        com.afrisoftech.reports.PatientAdminPdf_ policy = new com.afrisoftech.reports.PatientAdminPdf_();
        policy.PatientAdminPdf(connectDB, startDatePicker.getDate(), endDatePicker.getDate(), "-");

        // TODO add your handling code here:
    }//GEN-LAST:event_admissionsReportBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        if (reportTypeChooserCmbx.getSelectedItem().toString().equalsIgnoreCase("ALL Records Officers")) {
            admissionListingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, sub_chief as unit_number, visit_id, patient_name, gender, pat_age as patient_age, ward, wing, mode_of_payment, data_capture_time from hp_admission where date_admitted between '" + startDatePicker.getDate() + "' and '" + endDatePicker.getDate() + "' order by data_capture_time"));
        } else {
            admissionListingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, sub_chief as unit_number, visit_id, patient_name, gender, pat_age as patient_age, ward, wing, mode_of_payment, data_capture_time from hp_admission where user_name = current_user and date_admitted between '" + startDatePicker.getDate() + "' and '" + endDatePicker.getDate() + "' order by data_capture_time"));
        }
// TODO add your handling code here:
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void reportTypeChooserCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportTypeChooserCmbxActionPerformed
        if (reportTypeChooserCmbx.getSelectedItem().toString().equalsIgnoreCase("ALL Records Officers")) {
            admissionListingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, sub_chief as unit_number, visit_id, patient_name, gender, pat_age as patient_age, ward, wing, mode_of_payment, data_capture_time from hp_admission where date_admitted between '" + startDatePicker.getDate() + "' and '" + endDatePicker.getDate() + "' order by data_capture_time"));
        } else {
            admissionListingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, sub_chief as unit_number, visit_id, patient_name, gender, pat_age as patient_age, ward, wing, mode_of_payment, data_capture_time from hp_admission where user_name = current_user and date_admitted between '" + startDatePicker.getDate() + "' and '" + endDatePicker.getDate() + "' order by data_capture_time"));

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_reportTypeChooserCmbxActionPerformed

    private void wardNameCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wardNameCmbxActionPerformed

        this.occupationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, visit_id, sub_chief as unit_number, patient_name, wing, date_admitted, false as discharge, 'DISCHARGE_BED_RECONCILIATION' as comments, (SELECT sum(debit-credit)::numeric(30,2) FROM hp_patient_card WHERE hp_patient_card.patient_no = hp_admission.patient_no) as BILL_AMOUNT FROM hp_admission WHERE ward = '" + this.wardNameCmbx.getSelectedItem().toString() + "' and check_out = false order by 4"));

        int patientTotal = 0;

        try {

            java.sql.PreparedStatement pstmtTotal = connectDB.prepareStatement("SELECT  count(*) FROM hp_admission WHERE ward = '" + this.wardNameCmbx.getSelectedItem().toString() + "' and check_out = false");

            java.sql.ResultSet rsetTotal = pstmtTotal.executeQuery();

            while (rsetTotal.next()) {

                patientTotal = rsetTotal.getInt(1);

            }

        } catch (SQLException ex) {

            ex.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());

            Logger
                    .getLogger(WardOccupancyIntfr.class
                            .getName()).log(Level.SEVERE, null, ex);

        }

        this.totalsLabel.setText("Number Admitted in the Ward: " + patientTotal);

        // TODO add your handling code here:
    }//GEN-LAST:event_wardNameCmbxActionPerformed

    private void patientNumberCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientNumberCaretUpdate
        if (patientNumber.getText().length() > 3) {
            this.occupationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, visit_id, sub_chief as unit_number, patient_name, wing, date_admitted, false as Reinstate, 'REINSTATEMENT' as comments FROM hp_admission WHERE (patient_no ilike '%" + patientNumber.getText() + "%' or patient_name ilike '%" + patientNumber.getText() + "%' or sub_chief ilike '%" + patientNumber.getText() + "%') and check_out = true AND comments = 'DISCHARGE_BED_RECONCILIATION' order by 4"));
        }     // TODO add your handling code here:
    }//GEN-LAST:event_patientNumberCaretUpdate

    private void patientNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNumberActionPerformed

    private void searchFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFileBtnActionPerformed

        this.occupationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, visit_id, sub_chief as unit_number, patient_name, wing, date_admitted, false as discharge, '' as comments FROM hp_admission WHERE patient_no = '" + patientNumber.getText() + "' and check_out = true AND comments = '' order by 4"));

        // TODO add your handling code here:
    }//GEN-LAST:event_searchFileBtnActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        this.occupationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, visit_id, sub_chief as unit_number, patient_name, wing, date_admitted, false as discharge, 'DISCHARGE_BED_RECONCILIATION' as comments, (SELECT sum(debit-credit)::numeric(30,2) FROM hp_patient_card WHERE hp_patient_card.patient_no = hp_admission.patient_no) as BILL_AMOUNT FROM hp_admission WHERE ward = '" + this.wardNameCmbx.getSelectedItem().toString() + "' and check_out = false order by 4"));

        int patientTotal = 0;

        try {

            java.sql.PreparedStatement pstmtTotal = connectDB.prepareStatement("SELECT  count(*) FROM hp_admission WHERE ward = '" + this.wardNameCmbx.getSelectedItem().toString() + "' and check_out = false");

            java.sql.ResultSet rsetTotal = pstmtTotal.executeQuery();

            while (rsetTotal.next()) {

                patientTotal = rsetTotal.getInt(1);

            }

        } catch (SQLException ex) {

            ex.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());

            Logger
                    .getLogger(WardOccupancyIntfr.class
                            .getName()).log(Level.SEVERE, null, ex);

        }

        this.totalsLabel.setText("Number Admitted in the Ward: " + patientTotal);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void refreshBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtn1ActionPerformed
        if (reportTypeChooserCmbx1.getSelectedItem().toString().equalsIgnoreCase("ALL Records Officers")) {
            admissionAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT ward, count(ward) FROM hp_admission  where date_admitted between '" + startDatePicker1.getDate() + "' and '" + endDatePicker1.getDate() + "' group by 1 order by 1"));
        } else {
            admissionAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT ward, count(ward) FROM hp_admission  where date_admitted  between '" + startDatePicker1.getDate() + "' and '" + endDatePicker1.getDate() + "' and user_name = current_user group by 1 order by 1"));
        }     // TODO add your handling code here:
    }//GEN-LAST:event_refreshBtn1ActionPerformed

    private void reportTypeChooserCmbx1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportTypeChooserCmbx1ActionPerformed
        if (reportTypeChooserCmbx1.getSelectedItem().toString().equalsIgnoreCase("ALL Records Officers")) {
            admissionAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT ward, count(ward) FROM hp_admission  where date_admitted between '" + startDatePicker1.getDate() + "' and '" + endDatePicker1.getDate() + "' group by 1 order by 1"));
        } else {
            admissionAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT ward, count(ward) FROM hp_admission  where date_admitted  between '" + startDatePicker1.getDate() + "' and '" + endDatePicker1.getDate() + "' and user_name = current_user group by 1 order by 1"));
        }// TODO add your handling code here:
    }//GEN-LAST:event_reportTypeChooserCmbx1ActionPerformed

    private void ageYrsTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ageYrsTxtCaretUpdate

        if (ageYrsTxt.getText().length() > 0) {
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT current_date - ? * 365");
                pstmt.setInt(1, Integer.parseInt(ageYrsTxt.getText()));
                java.sql.ResultSet rset = pstmt.executeQuery();
                while (rset.next()) {
                    datePickerYOB.setDate(rset.getDate(1));
                }

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());

            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ageYrsTxtCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel admissionAnalysisPanel;
    private javax.swing.JTable admissionAnalysisTable;
    private javax.swing.JPanel admissionListingPanel;
    private javax.swing.JTable admissionListingTable;
    private javax.swing.JTextField admissionNumberTxt;
    private javax.swing.JScrollPane admissionScrollPane;
    private javax.swing.JComboBox admissionWardCmbx;
    private javax.swing.JButton admissionsReportBtn;
    private javax.swing.JButton admitPrintBtn;
    private javax.swing.JTextField ageTxt;
    private javax.swing.JTextField ageYrsTxt;
    private javax.swing.JLabel agelabel;
    private javax.swing.JComboBox bedCategoryCmbx;
    private javax.swing.JComboBox bedNumberCmbx;
    private javax.swing.JTextField bedRateTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JTextField cSheetNoTxt;
    private javax.swing.JTextField cardNumberTxt;
    private javax.swing.JComboBox countyofBirthCmbx;
    private javax.swing.JComboBox countyofResidenceCmbx;
    public javax.swing.JRadioButton createManualNumbersRbtn;
    private javax.swing.JTextField currentResidence;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker11;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private com.afrisoftech.lib.DatePicker datePicker21;
    private com.afrisoftech.lib.DatePicker datePickerYOB;
    private javax.swing.JButton dispose1;
    private javax.swing.JButton disposeBtn;
    private javax.swing.JComboBox districtCmbx;
    private javax.swing.JCheckBox divorcedMaritalChkbx;
    private javax.swing.JComboBox educationLevelCmbx;
    private javax.swing.JTextField employerTelTxt;
    private javax.swing.JTextField employerTxt;
    private javax.swing.JLabel endDateLbl;
    private javax.swing.JLabel endDateLbl1;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private com.afrisoftech.lib.DatePicker endDatePicker1;
    private javax.swing.JCheckBox femaleChkbx;
    private javax.swing.JTextField firstNameTxt;
    private javax.swing.JCheckBox hospitalCategoryChkbx;
    private javax.swing.JLabel idNoLbl2;
    private javax.swing.JTextField idPassportTxt;
    private javax.swing.JDialog ipSearchDialog;
    private javax.swing.JPanel ipSearchPanel;
    private javax.swing.JTable ipSearchTable;
    private javax.swing.JTextField ipSearchTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton1521;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton2021;
    private javax.swing.JButton jButton2521;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton3011;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton411;
    public static javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton512;
    private javax.swing.JButton jButton5121;
    private javax.swing.JButton jButton513;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox221;
    private javax.swing.JCheckBox jCheckBox311;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox31;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel141;
    private javax.swing.JLabel jLabel1411;
    private javax.swing.JLabel jLabel142;
    private javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel172;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel182;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57211;
    private javax.swing.JLabel jLabel58211;
    private javax.swing.JLabel jLabel5822;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel661;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel101;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel4113;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel81;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JPanel jSearchPanel5;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator711;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1112;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField11131;
    private javax.swing.JTextField jTextField1114;
    private javax.swing.JTextField jTextField121;
    private javax.swing.JTextField jTextField141;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField151;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField161;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField361;
    private javax.swing.JTextField jTextField3611;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField58211;
    private javax.swing.JTextField jTextField71;
    private javax.swing.JTextField jTextField72;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField locationTxt;
    private javax.swing.JCheckBox maleChkbx;
    private javax.swing.JCheckBox marriedMaritalChkbx;
    private javax.swing.JTextField memberNumberTxt;
    private javax.swing.JComboBox nationalityCmbx;
    private javax.swing.JRadioButton newAdimissionRbtn;
    private javax.swing.JTextField nhifCardMemberNumberTxt;
    private javax.swing.JCheckBox nhifChbx;
    private javax.swing.JTextField nhifClaimNumberTxt;
    private javax.swing.JTextField nokNameTxt;
    private javax.swing.JComboBox nokRelationShipCmbx;
    private javax.swing.JTextField nokResidenceTxt;
    private javax.swing.JTextField nokTelephoneTxt;
    private javax.swing.JTextField nokteltxt;
    private javax.swing.JPanel occupancyReportPanel;
    private javax.swing.JPanel occupationButtonPanel;
    private javax.swing.JComboBox occupationCmbx;
    private javax.swing.JScrollPane occupationJScrl;
    private javax.swing.JTable occupationTable;
    private javax.swing.JPanel occupationsHeaderTable;
    private javax.swing.JPanel occupationsPanel;
    private javax.swing.JTextField oldFileNumberTxt;
    private javax.swing.JDialog opSearchDialog;
    private javax.swing.JTextField opSearchFieldTxt;
    private javax.swing.JTable opSearchTable;
    private javax.swing.JTextField patientDebtTxt;
    private javax.swing.JComboBox patientDisabilityCmbx;
    private javax.swing.JTextField patientNumber;
    private javax.swing.JComboBox patientUrgencyCMBX;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JTextField prevVisitIdtxt;
    private javax.swing.JPanel previousPanel;
    private javax.swing.JDialog previousVisitIDDialog;
    private javax.swing.JScrollPane previousVisitsScrollPane;
    private javax.swing.JTable previousVisitsTable;
    private javax.swing.JCheckBox privateCategoryChkbx;
    private javax.swing.JRadioButton reAdmissionRbtn;
    private javax.swing.JComboBox referredcombo;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton refreshBtn1;
    private javax.swing.JScrollPane refreshScrollPane;
    private javax.swing.JComboBox religionCmbx;
    private javax.swing.JComboBox reportTypeChooserCmbx;
    private javax.swing.JComboBox reportTypeChooserCmbx1;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton21;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton4;
    private javax.swing.JButton searchFileBtn;
    private javax.swing.JCheckBox searchbyPatientNameChkbx;
    private javax.swing.JCheckBox searchbyPatientNumberChkbx;
    private javax.swing.JButton select1;
    private javax.swing.JCheckBox singleMaritalChkbx;
    private javax.swing.JLabel spacerLabel;
    private javax.swing.JLabel spacerLabel1;
    private javax.swing.JComboBox specialtyClinicCmbx;
    private javax.swing.JLabel startDateLbl;
    private javax.swing.JLabel startDateLbl1;
    private com.afrisoftech.lib.DatePicker startDatePicker;
    private com.afrisoftech.lib.DatePicker startDatePicker1;
    private javax.swing.JTextField surNameTxt;
    private javax.swing.JLabel totalsLabel;
    private javax.swing.JTextField unitNumberTxt;
    private javax.swing.JTextField wardCodeTxt;
    private javax.swing.JComboBox wardNameCmbx;
    private javax.swing.JCheckBox widowedMaritalChkbx;
    // End of variables declaration//GEN-END:variables

    private void admitPatient() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        String yrs = null;
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        java.sql.Savepoint registerSavePoint = null;

        //   try {
        //       connectDB.setAutoCommit(false);
        //       registerSavePoint = connectDB.setSavepoint("registration");
        //   } catch (java.sql.SQLException ex) {
        //       ex.printStackTrace();
        //   }
        try {

            // Date parser
            java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yy");
            com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(datePicker1.getDate().toString().trim()), "yy");

            java.lang.String monthString = dateFormatter.getDateString();

            yrs = monthString;

            // Catch java.text.parse exception.
        } catch (java.text.ParseException prs) {
            prs.printStackTrace();
        }
        try {

            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }
                java.sql.Statement stmtfs = connectDB.createStatement();
                java.sql.ResultSet rsetfs = stmtfs.executeQuery("SELECT '" + datePickerYOB.getDate() + "'::DATE ");
                while (rsetfs.next()) {
                    dateOfBirth = rsetfs.getString(1);

                }

                if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {

                    String name = null;
                    String activity = null;
                    String actNo = null;
                    String billNo = null;
                    String rate = null;
                    String transNo = null;
                    String patientAcc = null;
                    String insAcc = null;
                    String cardAcc = null;
                    String AccDesc = null;
                    String cardName = null;
                    String insName = null;
                    String user = null;
                    String adcode = null;
                    double adrate = 0.00;
                    double nursing = 0.00;
                    double bedfees = 0.00;
                    String Type = null;
                    String Typet = null;
                    String Main = null;
                    double Limit = 0.0;
                    String Categ = null;
                    String visitid = null;
                    String patientNo = null;
                    String selectedchkbx = null;

                    boolean manualNo = false;
                    String preFix = null;
                    int digitNo = 0;
                    String yrEnd = null;
                    boolean incYr = false;
                    String patientsNo = null;
                    String patientsNo2 = com.afrisoftech.lib.DateLables.getDateLabel();
                    String useoneNumber = null;

                    boolean chargeNursing = false;
                    boolean chargeBed = false;
                    boolean nhifStatus = false;
                    java.sql.Statement stmnzz = connectDB.createStatement();
                    java.sql.ResultSet rsnzz = stmnzz.executeQuery("select ip_numbering,use_one_number from pb_patient_names");
                    while (rsnzz.next()) {
                        manualNo = rsnzz.getBoolean(1);
                        useoneNumber = rsnzz.getString(2);
                    }
                    if (newAdimissionRbtn.isSelected() && manualNo == true) {
                        manualNo = true;
                    } else {
                        if (createManualNumbersRbtn.isSelected() && manualNo == true) {
                            manualNo = false;
                        } else {
                            manualNo = manualNo;
                        }
                    }
                    /*
                     * if(useoneNumber.equalsIgnoreCase("USEONENUMBER") &&
                     * jTextField361.getText().equalsIgnoreCase("")){ manualNo =
                     * true; }else{ manualNo = false; }
                     */

                    if (this.privateCategoryChkbx.isSelected()) {
                        Categ = privateCategoryChkbx.getText();
                    } else {
                        Categ = hospitalCategoryChkbx.getText();
                    }

                    if (this.maleChkbx.isSelected()) {
                        selectedchkbx = maleChkbx.getText();
                    } else {

                        selectedchkbx = femaleChkbx.getText();
                    }

                    if (this.marriedMaritalChkbx.isSelected()) {
                        selectedStatus = marriedMaritalChkbx.getText();
                    } else {
                        if (this.singleMaritalChkbx.isSelected()) {
                            selectedStatus = singleMaritalChkbx.getText();
                        } else {
                            if (this.divorcedMaritalChkbx.isSelected()) {
                                selectedStatus = divorcedMaritalChkbx.getText();
                            } else {
                                if (this.widowedMaritalChkbx.isSelected()) {
                                    selectedStatus = widowedMaritalChkbx.getText();
                                }
                            }
                        }
                    }
                    java.sql.Statement stmnza = connectDB.createStatement();
                    java.sql.ResultSet rsnza = stmnza.executeQuery("select (CURRENT_DATE::DATE - '" + datePickerYOB.getDate() + "'::DATE)/365");
                    while (rsnza.next()) {
                        ageYrs = rsnza.getDouble(1);
                    }
                    if (manualNo == false && admissionNumberTxt.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter Patient No.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    } else {
                        if (jButton1.getText().equalsIgnoreCase("Update")) {

                            String adm = null;
                            String sex = null;

                            if (jCheckBox221.isSelected()) {
                                adm = "false";
                            } else {
                                if (jCheckBox311.isSelected()) {
                                    adm = "true";
                                }
                            }

                            if (maleChkbx.isSelected()) {
                                sex = maleChkbx.getText();
                            } else {
                                sex = femaleChkbx.getText();
                            }

                            java.sql.PreparedStatement pstmt811x = connectDB.prepareStatement("UPDATE hp_admission SET  patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "',date_admitted = '" + datePicker1.getDate().toString() + "',bed_no = '" + bedNumberCmbx.getSelectedItem() + "',ward = '" + admissionWardCmbx.getSelectedItem() + "',wing = '" + bedCategoryCmbx.getSelectedItem() + "', deposit = '" + bedRateTxt.getText() + "',residence ='" + currentResidence.getText() + "',nok = '" + nokNameTxt.getText() + "',tel = '" + nokTelephoneTxt.getText() + "',address = '" + jTextField9.getText() + "',discharge = '" + adm + "',pat_age = '" + ageYrs + "',gender = '" + selectedchkbx + "',marital_status = '" + selectedStatus + "' WHERE visit_id = '" + prevVisitIdtxt.getText() + "'");
                            pstmt811x.executeUpdate();

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE hp_inpatient_register SET  first_name = '" + surNameTxt.getText() + "',second_name = '" + firstNameTxt.getText() + "',adm_date = '" + datePicker1.getDate().toString() + "',residence ='" + currentResidence.getText() + "',nok = '" + nokNameTxt.getText() + "',tel_no = '" + nokTelephoneTxt.getText() + "',address = '" + jTextField9.getText() + "',sex = '" + sex + "',year_of_birth = '" + dateOfBirth + "',payer = '" + jTextField4.getText() + "'  where patient_no = '" + admissionNumberTxt.getText() + "'");
                            pstmt.executeUpdate();

                            javax.swing.JOptionPane.showConfirmDialog(this, "File updated for patient no [" + admissionNumberTxt.getText() + "]", "Information", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        } else {

                            java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_admission SET diagnosed = true WHERE patient_no ilike '" + admissionNumberTxt.getText() + "'");

                            pstmt21.executeUpdate();

                            if (newAdimissionRbtn.isSelected() || createManualNumbersRbtn.isSelected()) {
                                java.sql.Statement stmt = connectDB.createStatement();
                                java.sql.ResultSet rset = stmt.executeQuery("SELECT patient_no FROM hp_inpatient_register WHERE patient_no ='" + this.admissionNumberTxt.getText() + "'");
                                while (rset.next()) {
                                    patientNo = rset.getObject(1).toString();
                                }

                                java.sql.Statement stmt11 = connectDB.createStatement();

                                java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT patient_no,check_out FROM hp_admission WHERE patient_no ='" + admissionNumberTxt.getText() + "' and check_out = false");
                                while (rset11.next()) {
                                    // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                                    name = rset11.getObject(1).toString();
                                    if (rset11.getBoolean(2) == false) {
                                        jCheckBox7.setSelected(true);
                                    } else {
                                        jCheckBox7.setSelected(false);
                                    }
                                }

                                if (this.admissionNumberTxt.getText().equalsIgnoreCase(patientNo)) {
                                    jLabel33.setForeground(java.awt.Color.red);
                                    jLabel33.setText("PATIENT No. Already On File");

                                    // javax.swing.JOptionPane.showMessageDialog(this,"PATIENT No. Already Exists", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else if (admissionNumberTxt.getText().equalsIgnoreCase(name)) {
                                    javax.swing.JOptionPane.showMessageDialog(this, " Patient with patient no '" + name + "' already admitted ", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                } else {

                                    if (manualNo) {

                                        patientsNo2 = patientsNo2;

                                    } else {

                                        patientsNo = admissionNumberTxt.getText();
                                        patientsNo2 = patientsNo;
                                    }
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_inpatient_register VALUES(?, UPPER(?), UPPER(?), ?, ?, ?, ?, ?, ?, ?)");
                                    pstmt.setString(1, patientsNo2);
                                    if (surNameTxt.getText().equals("")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter First Name and Second Name", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        pstmt.setString(2, surNameTxt.getText().toUpperCase());
                                    }
                                    pstmt.setString(3, firstNameTxt.getText());
                                    pstmt.setString(4, "");
                                    pstmt.setString(5, nokNameTxt.getText());
                                    pstmt.setString(8, dateOfBirth);
                                    pstmt.setString(7, jTextField9.getText());
                                    if (currentResidence.getText().equals("")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter residence", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        pstmt.setString(6, currentResidence.getText());
                                    }

                                    pstmt.setString(9, nokTelephoneTxt.getText());
                                    if (selectedchkbx == null) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient sex", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        pstmt.setObject(10, selectedchkbx);
                                    }

                                    pstmt.executeUpdate();
                                    this.jButton1.setVisible(false);
                                    //   javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                }
                            }

                            if (newAdimissionRbtn.isSelected()) {

                                if (manualNo) {
                                    String patNos = null;

                                    if (useoneNumber.equalsIgnoreCase("useonenumber")) {
                                        // Checking the presence of out patient number in hp_patient_register
                                        int opNos = 0;
                                        java.sql.Statement stmnz1c = connectDB.createStatement();
                                        java.sql.ResultSet rsnz1c = stmnz1c.executeQuery("SELECT COUNT(patient_no) FROM hp_patient_register WHERE patient_no = '" + jTextField361.getText() + "'");
                                        while (rsnz1c.next()) {
                                            opNos = rsnz1c.getInt(1);
                                        }
                                        if (opNos > 0) {
                                            patientNo = jTextField361.getText();
                                            admissionNumberTxt.setText(jTextField361.getText());
                                        } else {
                                            java.sql.Statement stmnz1 = connectDB.createStatement();
                                            java.sql.ResultSet rsnz1 = stmnz1.executeQuery("select prefix_item,digit_no,yr_end,inc_year from pb_patient_names");
                                            while (rsnz1.next()) {
                                                preFix = rsnz1.getString(1);
                                                digitNo = rsnz1.getInt(2);
                                                yrEnd = rsnz1.getString(3);
                                                incYr = rsnz1.getBoolean(4);
                                            }
                                            if (incYr) {

                                                java.sql.Statement pss1x = connectDB.createStatement();
                                                java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('outpatient_no_seq')");
                                                while (rss1x.next()) {
                                                    patNos = rss1x.getObject(1).toString();
                                                }
                                                if (preFix.equalsIgnoreCase("noPrefix")) {
                                                    java.sql.Statement pss1 = connectDB.createStatement();
                                                    java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                    while (rss1.next()) {
                                                        patientNo = rss1.getObject(1).toString();
                                                        admissionNumberTxt.setText(rss1.getObject(1).toString());

                                                    }

                                                } else {
                                                    java.sql.Statement pss1 = connectDB.createStatement();
                                                    java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                    while (rss1.next()) {
                                                        patientNo = rss1.getObject(1).toString();
                                                        admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                    }
                                                }
                                            } else {
                                                java.sql.Statement pss1x = connectDB.createStatement();
                                                java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('outpatient_no_seq')");
                                                while (rss1x.next()) {
                                                    patNos = rss1x.getObject(1).toString();
                                                }
                                                if (preFix.equalsIgnoreCase("noPrefix")) {
                                                    java.sql.Statement pss1 = connectDB.createStatement();
                                                    java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')");
                                                    while (rss1.next()) {
                                                        patientNo = rss1.getObject(1).toString();
                                                        admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                    }
                                                } else {
                                                    java.sql.Statement pss1 = connectDB.createStatement();
                                                    java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')");
                                                    while (rss1.next()) {
                                                        patientNo = rss1.getObject(1).toString();
                                                        admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                    }
                                                }
                                            }
                                        }
                                    } else {

                                        java.sql.Statement pss1x = connectDB.createStatement();
                                        java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('inpatient_no_seq')");
                                        while (rss1x.next()) {
                                            patNos = rss1x.getObject(1).toString();
                                        }
                                        java.sql.Statement stmnz1 = connectDB.createStatement();
                                        java.sql.ResultSet rsnz1 = stmnz1.executeQuery("select ip_prefix,ip_digit,ip_yr from pb_patient_names");
                                        while (rsnz1.next()) {
                                            preFix = rsnz1.getString(1);
                                            digitNo = rsnz1.getInt(2);
                                            incYr = rsnz1.getBoolean(3);
                                        }
                                        if (incYr) {

                                            if (preFix.equalsIgnoreCase("noIP")) {

                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                while (rss1.next()) {
                                                    patientsNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }

                                            } else {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                while (rss1.next()) {
                                                    patientsNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }
                                            }
                                        } else {
                                            if (preFix.equalsIgnoreCase("noiP")) {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')");
                                                while (rss1.next()) {
                                                    patientsNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }
                                            } else {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')");
                                                while (rss1.next()) {
                                                    patientsNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }
                                            }
                                        }

                                    }
                                    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE hp_inpatient_register SET patient_no = '" + admissionNumberTxt.getText() + "'  WHERE patient_no = '" + patientsNo2 + "'");
                                    pstmt11.executeUpdate();
                                    java.sql.PreparedStatement pstmt11z = connectDB.prepareStatement("UPDATE hp_admission SET patient_no = '" + admissionNumberTxt.getText() + "',admission_no = '" + admissionNumberTxt.getText() + "'  WHERE patient_no = '" + patientsNo2 + "'");
                                    pstmt11z.executeUpdate();
                                }

                            }
                            if (admissionNumberTxt.getText().equalsIgnoreCase(name)) {
                                javax.swing.JOptionPane.showMessageDialog(this, " Patient with with patient no '" + name + "' already admitted ", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                            } else {
                                java.sql.Statement stmtD = connectDB.createStatement();
                                java.sql.ResultSet rsetD = stmtD.executeQuery("select rate,gl_account,service_type,main_service from pb_operating_parameters where category ='AF'");
                                while (rsetD.next()) {

                                    // adrate = rsetD.getDouble(1);
                                    //   adcode = rsetD.getObject(2).toString();
                                    Type = rsetD.getObject(3).toString();
                                    //   Main = rsetD.getObject(4).toString();
                                }

                                java.sql.Statement stmtDt = connectDB.createStatement();
                                java.sql.ResultSet rsetDt = stmtDt.executeQuery("select rate,gl_account,service_type,main_service from pb_operating_parameters where category ='NF'");
                                while (rsetDt.next()) {

                                    // adrate = rsetD.getDouble(1);
                                    //   adcode = rsetD.getObject(2).toString();
                                    Typet = rsetDt.getObject(3).toString();
                                    //   Main = rsetD.getObject(4).toString();
                                }

                                java.sql.Statement stmtDq = connectDB.createStatement();
                                java.sql.ResultSet rsetDq = stmtDq.executeQuery("select revdesc,revcode from hp_wards where ward_name = '" + admissionWardCmbx.getSelectedItem() + "'");
                                while (rsetDq.next()) {

                                    //   adrate = rsetD.getDouble(1);
                                    adcode = rsetDq.getObject(2).toString();
                                    //    Type = rsetD.getObject(3).toString();
                                    Main = rsetDq.getObject(1).toString();
                                }

                                java.sql.Statement stm1 = connectDB.createStatement();
                                java.sql.ResultSet rse1 = stm1.executeQuery("select code,activity,user from pb_activity where activity_category ='PR'");
                                while (rse1.next()) {

                                    patientAcc = rse1.getObject(1).toString();
                                    AccDesc = rse1.getObject(2).toString();
                                }

                                java.sql.Statement stm1d = connectDB.createStatement();
                                java.sql.ResultSet rse1d = stm1d.executeQuery("select current_user");
                                while (rse1d.next()) {

                                    user = rse1d.getObject(1).toString();
                                }

                                java.sql.Statement stm1l = connectDB.createStatement();
                                java.sql.ResultSet rse1l = stm1l.executeQuery("select amount from pb_iplimit");
                                while (rse1l.next()) {

                                    Limit = rse1l.getDouble(1);

                                }
                                java.sql.Statement stm1lx = connectDB.createStatement();
                                java.sql.ResultSet rse1lx = stm1lx.executeQuery("select nursing,adm_rate, rate,charge_nfee,charge_bfee from hp_bed_category WHERE category ilike '" + bedCategoryCmbx.getSelectedItem() + "'");
                                while (rse1lx.next()) {

                                    adrate = rse1lx.getDouble(2);
                                    nursing = rse1lx.getDouble(1);
                                    bedfees = rse1lx.getDouble(3);
                                    chargeNursing = rse1lx.getBoolean(4);
                                    chargeBed = rse1lx.getBoolean(5);
                                }
                                java.sql.Statement stm2 = connectDB.createStatement();
                                java.sql.ResultSet rse2 = stm2.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                while (rse2.next()) {

                                    insAcc = rse2.getObject(1).toString();
                                    insName = rse2.getObject(2).toString();
                                }
                                // if(jCheckBox1.isSelected()||jCheckBox2.isSelected()){

                                java.sql.Statement stmt1 = connectDB.createStatement();
                                java.sql.ResultSet rset1 = stmt1.executeQuery("select nextval('billing_no_seq')");
                                while (rset1.next()) {
                                    billNo = rset1.getObject(1).toString();
                                }
                                java.sql.Statement stmt3 = connectDB.createStatement();
                                java.sql.ResultSet rset3 = stmt3.executeQuery("select nextval('transaction_no_seq')");
                                while (rset3.next()) {
                                    transNo = rset3.getObject(1).toString();
                                }
                                java.sql.Statement stmtq = connectDB.createStatement();
                                java.sql.ResultSet rsetq = stmtq.executeQuery("select nextval('ipvisit_id')");
                                while (rsetq.next()) {
                                    visitid = rsetq.getObject(1).toString();
                                }

                                java.sql.PreparedStatement pstmt27 = connectDB.prepareStatement("update hp_bed_setup set occupied = true where bed_no ='" + bedNumberCmbx.getSelectedItem() + "' and ward = '" + admissionWardCmbx.getSelectedItem() + "'");
                                pstmt27.execute();

                                java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE hp_inpatient_register set pay_mode = '" + paymentModeCmbx.getSelectedItem().toString() + "',category = '" + bedCategoryCmbx.getSelectedItem().toString() + "',adm_date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()) + "',payer = '" + jTextField4.getText() + "'  WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                                pstmt11.executeUpdate();

                                //  java.sql.PreparedStatement pstmt81x = connectDB.prepareStatement("UPDATE hp_patient_card SET invoice_no = '"+visitid+"', visit_id = '"+visitid+"' where patient_no = '"+jTextField12.getText()+"' and visit_id = 'Booking'");
                                //  pstmt81x.executeUpdate();
                                java.sql.PreparedStatement pstmt811x = connectDB.prepareStatement("UPDATE hp_patient_card SET visit_id = '" + visitid + "' where patient_no = '" + admissionNumberTxt.getText() + "' and service ilike 'Receip%' AND invoice_no not ilike 'I%' and date::date BETWEEN (current_date - 200) AND CURRENT_DATE and (visit_id = '' or visit_id = '-')");
                                pstmt811x.executeUpdate();

                                if (jPanel5.isVisible()) {
                                    java.sql.PreparedStatement pstmt111 = connectDB.prepareStatement("UPDATE hp_inpatient_register set description = '" + jTextField3611.getText() + "',payer = '" + jTextField23.getText() + "',account_no ='" + memberNumberTxt.getText() + "',expiry_date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()) + "', member_no = '" + memberNumberTxt.getText() + "',member_name = '" + jTextField36.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                                    pstmt111.executeUpdate();
                                } else {
                                    if (jPanel21.isVisible()) {
                                        java.sql.PreparedStatement pstmta = connectDB.prepareStatement("UPDATE hp_inpatient_register set description = '" + jComboBox31.getSelectedItem().toString() + "',payer = '" + jTextField71.getText() + "',account_no ='" + cardNumberTxt.getText() + "',expiry_date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()) + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");

                                        pstmta.executeUpdate();
                                    }

                                }

// Entry of nursing fees into the hp_admission table
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_admission VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                                pstmt.setString(1, admissionNumberTxt.getText());

                                pstmt.setString(2, firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase());
                                pstmt.setString(3, jTextPane1.getText());
                                if (admissionWardCmbx.getSelectedItem() == null) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You must Select Ward Name", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {

                                    pstmt.setString(5, admissionWardCmbx.getSelectedItem().toString());
                                }
                                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                    pstmt.setString(4, jTextField3611.getText());
                                } else {
                                    pstmt.setString(4, "Self");
                                }
                                pstmt.setString(6, bedNumberCmbx.getSelectedItem().toString());
                                pstmt.setString(7, jTextField121.getText().toString());
                                pstmt.setString(8, bedCategoryCmbx.getSelectedItem().toString());
                                pstmt.setString(9, nokNameTxt.getText());
                                pstmt.setString(10, nokTelephoneTxt.getText());
                                pstmt.setString(11, jTextField9.getText());
                                pstmt.setString(12, idPassportTxt.getText());
                                pstmt.setString(13, paymentModeCmbx.getSelectedItem().toString());
                                pstmt.setString(14, Categ);
                                pstmt.setDouble(15, java.lang.Double.valueOf(bedRateTxt.getText()));
                                pstmt.setString(16, referredcombo.getSelectedItem().toString());
                                pstmt.setString(17, nationalityCmbx.getSelectedItem().toString());
                                pstmt.setBoolean(18, false);
                                pstmt.setString(19, currentResidence.getText());
                                pstmt.setString(20, "");
                                pstmt.setString(21, nhifChbx.getText());
                                pstmt.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));

                                pstmt.setString(23, admissionNumberTxt.getText());

                                pstmt.setString(24, user);
                                pstmt.setString(25, null);
                                pstmt.setString(26, null);
                                pstmt.setString(27, visitid);
                                pstmt.setDouble(28, 0.00);
                                pstmt.setString(29, "");
                                pstmt.setDouble(30, nursing);
                                pstmt.setBoolean(31, false);
                                pstmt.setString(32, "");
                                pstmt.setString(33, "");
                                pstmt.setString(34, jComboBox2.getSelectedItem().toString());
                                pstmt.setString(35, "");
                                pstmt.setDouble(36, ageYrs);
                                pstmt.setObject(37, selectedchkbx);
                                pstmt.setObject(38, selectedStatus);
                                pstmt.setString(39, "Admitted");
                                if (newAdimissionRbtn.isSelected()) {
                                    pstmt.setString(40, "First Admission ");
                                } else {
                                    pstmt.setString(40, "Re Admission ");
                                }
                                pstmt.setObject(41, specialtyClinicCmbx.getSelectedItem());
                                pstmt.setObject(42, occupationCmbx.getSelectedItem());
                                pstmt.setBoolean(43, false);
                                pstmt.setObject(44, religionCmbx.getSelectedItem());
                                pstmt.setObject(45, this.districtCmbx.getSelectedItem());
                                pstmt.setObject(46, this.locationTxt.getText());
                                pstmt.setObject(47, this.nokteltxt.getText());
                                pstmt.setObject(48, this.unitNumberTxt.getText());
                                pstmt.setObject(49, this.nokResidenceTxt.getText());
                                pstmt.setObject(50, this.nokRelationShipCmbx.getSelectedItem());
                                pstmt.setBoolean(51, false);
                                pstmt.setString(52, null);
                                if (nhifChbx.isSelected()) {
                                    nhifStatus = true;
                                } else {
                                    nhifStatus = false;
                                }
                                pstmt.setBoolean(53, nhifStatus);
                                pstmt.setString(54, countyofBirthCmbx.getSelectedItem().toString());
                                pstmt.setString(55, countyofResidenceCmbx.getSelectedItem().toString());
                                pstmt.setString(56, educationLevelCmbx.getSelectedItem().toString());
                                pstmt.setString(57, cSheetNoTxt.getText());

                                pstmt.executeUpdate();

// Ledger entry for admission fees at the point of registration. (This is done on ac_ledger)                                
                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2.setString(1, adcode);
                                pstmt2.setString(2, Type);
                                pstmt2.setString(3, admissionNumberTxt.getText());
                                pstmt2.setString(4, surNameTxt.getText());
                                pstmt2.setString(5, "");
                                pstmt2.setString(6, "");
                                pstmt2.setString(7, "");
                                pstmt2.setString(8, "IP");
                                pstmt2.setString(9, "");
                                pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                pstmt2.setString(11, "");
                                pstmt2.setString(12, "");
                                pstmt2.setString(13, "");
                                pstmt2.setString(14, Type);
                                pstmt2.setString(15, "Revenue");
                                pstmt2.setDouble(16, 0.00);
                                pstmt2.setDouble(17, adrate);
                                pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2.setString(19, "" + transNo + "");
                                pstmt2.setBoolean(20, false);
                                pstmt2.setBoolean(21, false);
                                pstmt2.setBoolean(22, false);
                                pstmt2.setString(23, user);
                                pstmt2.executeUpdate();

// Billing for admission fee at the point point of admission.
                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmt1.setString(1, admissionNumberTxt.getText());
                                pstmt1.setString(2, Type);
                                pstmt1.setString(3, bedCategoryCmbx.getSelectedItem().toString());
                                pstmt1.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                pstmt1.setString(5, "" + transNo + "");
                                if (paymentModeCmbx.getSelectedItem().equals("Cash")) {
                                    pstmt1.setString(6, "");
                                    pstmt1.setString(7, "");
                                    pstmt1.setString(8, "");
                                    pstmt1.setString(9, "");
                                    pstmt1.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1.setString(15, patientAcc);
                                    pstmt1.setString(18, "");
                                    // pstmt1.setString(22,AccDesc);
                                } else {
                                    if (jPanel5.isVisible()) {
                                        //  if(jComboBox5.getSelectedItem().toString().equalsIgnoreCase(jTextField6.getText())){

                                        pstmt1.setString(6, "");
                                        pstmt1.setString(8, "");
                                        pstmt1.setString(7, jTextField3611.getText());
                                        pstmt1.setString(9, jTextField23.getText());
                                        pstmt1.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()));
                                        pstmt1.setString(15, insAcc);
                                        pstmt1.setString(18, memberNumberTxt.getText());

                                    } else {
                                        pstmt1.setString(6, cardNumberTxt.getText());
                                        pstmt1.setString(7, "");
                                        pstmt1.setString(8, jComboBox31.getSelectedItem().toString());
                                        pstmt1.setString(9, jTextField71.getText());
                                        pstmt1.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                        pstmt1.setString(15, cardAcc);
                                        pstmt1.setString(18, "");
                                        //  pstmt1.setString(22,cardName);
                                    }
                                }
                                pstmt1.setString(11, jTextField121.getText());
                                pstmt1.setDouble(12, adrate);
                                pstmt1.setDouble(13, 0.00);
                                pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1.setString(16, Main);
                                pstmt1.setDouble(17, 1);
                                pstmt1.setBoolean(19, false);
                                pstmt1.setString(20, "Billing");
                                pstmt1.setBoolean(21, true);
                                pstmt1.setString(22, AccDesc);
                                pstmt1.setString(23, visitid);
                                pstmt1.setString(24, user);
                                pstmt1.setString(25, billNo);
                                pstmt1.setString(26, "IP");
                                pstmt1.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt1.setString(28, visitid);
                                pstmt1.executeUpdate();

// Ledger entry for nursing fees at the point of admission. This is done on ac_ledger table
                                if (chargeNursing) {
                                    java.sql.PreparedStatement pstmt2n = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt2n.setString(1, adcode);
                                    //                                pstmt2n.setString(2, Type);
                                    pstmt2n.setString(2, "Nursing/Professional Fees");
                                    pstmt2n.setString(3, admissionNumberTxt.getText());
                                    pstmt2n.setString(4, surNameTxt.getText());
                                    pstmt2n.setString(5, "");
                                    pstmt2n.setString(6, "");
                                    pstmt2n.setString(7, "");
                                    pstmt2n.setString(8, "IP");
                                    pstmt2n.setString(9, "");
                                    pstmt2n.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2n.setString(11, "");
                                    pstmt2n.setString(12, "");
                                    pstmt2n.setString(13, "");
                                    pstmt2n.setString(14, "Nursing/Professional Fees");
                                    pstmt2n.setString(15, "Revenue");
                                    pstmt2n.setDouble(16, 0.00);
                                    pstmt2n.setDouble(17, nursing);
                                    pstmt2n.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt2n.setString(19, "" + transNo + "");
                                    pstmt2n.setBoolean(20, false);
                                    pstmt2n.setBoolean(21, false);
                                    pstmt2n.setBoolean(22, false);
                                    pstmt2n.setString(23, user);
                                    pstmt2n.executeUpdate();

// Bill admission nursing/professional fees at the point of admission (This is done on the patient bill - hp_patient_card table
                                    java.sql.PreparedStatement pstmt1m = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt1m.setString(1, admissionNumberTxt.getText());
                                    pstmt1m.setString(2, "Nursing/Professional Fees");
                                    pstmt1m.setString(3, bedCategoryCmbx.getSelectedItem().toString());
                                    pstmt1m.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt1m.setString(5, "" + transNo + "");
                                    if (paymentModeCmbx.getSelectedItem().equals("Cash")) {
                                        pstmt1m.setString(6, "");
                                        pstmt1m.setString(7, "");
                                        pstmt1m.setString(8, "");
                                        pstmt1m.setString(9, "");
                                        pstmt1m.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt1m.setString(15, patientAcc);
                                        pstmt1m.setString(18, "");
                                        // pstmt1.setString(22,AccDesc);
                                    } else {
                                        if (jPanel5.isVisible()) {
                                            //  if(jComboBox5.getSelectedItem().toString().equalsIgnoreCase(jTextField6.getText())){

                                            pstmt1m.setString(6, "");
                                            pstmt1m.setString(8, "");
                                            pstmt1m.setString(7, jTextField3611.getText());
                                            pstmt1m.setString(9, jTextField23.getText());
                                            pstmt1m.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()));
                                            pstmt1m.setString(15, insAcc);
                                            pstmt1m.setString(18, memberNumberTxt.getText());

                                        } else {
                                            pstmt1m.setString(6, cardNumberTxt.getText());
                                            pstmt1m.setString(7, "");
                                            pstmt1m.setString(8, jComboBox31.getSelectedItem().toString());
                                            pstmt1m.setString(9, jTextField71.getText());
                                            pstmt1m.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                            pstmt1m.setString(15, cardAcc);
                                            pstmt1m.setString(18, "");
                                            //  pstmt1.setString(22,cardName);
                                        }
                                    }
                                    pstmt1m.setString(11, jTextField121.getText());
                                    pstmt1m.setDouble(12, nursing);
                                    pstmt1m.setDouble(13, 0.00);
                                    pstmt1m.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1m.setString(16, Main);
                                    pstmt1m.setDouble(17, 1);
                                    pstmt1m.setBoolean(19, false);
                                    pstmt1m.setString(20, "Billing");
                                    pstmt1m.setBoolean(21, true);
                                    pstmt1m.setString(22, AccDesc);
                                    pstmt1m.setString(23, visitid);
                                    pstmt1m.setString(24, user);
                                    pstmt1m.setString(25, billNo);
                                    pstmt1m.setString(26, "IP");
                                    pstmt1m.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt1m.setString(28, visitid);
                                    pstmt1m.executeUpdate();
                                }
// Ledger entry for bed fees at the point of admission. This is done on ac_ledger table
                                if (chargeBed) {
                                    java.sql.PreparedStatement pstmt2bed = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt2bed.setString(1, adcode);
                                    //                                pstmt2n.setString(2, Type);
                                    pstmt2bed.setString(2, "Bed Fees");
                                    pstmt2bed.setString(3, admissionNumberTxt.getText());
                                    pstmt2bed.setString(4, surNameTxt.getText());
                                    pstmt2bed.setString(5, "");
                                    pstmt2bed.setString(6, "");
                                    pstmt2bed.setString(7, "");
                                    pstmt2bed.setString(8, "IP");
                                    pstmt2bed.setString(9, "");
                                    pstmt2bed.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2bed.setString(11, "");
                                    pstmt2bed.setString(12, "");
                                    pstmt2bed.setString(13, "");
                                    pstmt2bed.setString(14, "Bed Fees");
                                    pstmt2bed.setString(15, "Revenue");
                                    pstmt2bed.setDouble(16, 0.00);
                                    pstmt2bed.setDouble(17, bedfees);
                                    pstmt2bed.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt2bed.setString(19, "" + transNo + "");
                                    pstmt2bed.setBoolean(20, false);
                                    pstmt2bed.setBoolean(21, false);
                                    pstmt2bed.setBoolean(22, false);
                                    pstmt2bed.setString(23, user);
                                    pstmt2bed.executeUpdate();

// Bill admission bed fees at the point of admission (This is done on the patient bill - hp_patient_card table
                                    java.sql.PreparedStatement pstmt1bedhp = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt1bedhp.setString(1, admissionNumberTxt.getText());
                                    pstmt1bedhp.setString(2, "Bed Fees");
                                    pstmt1bedhp.setString(3, bedCategoryCmbx.getSelectedItem().toString());
                                    pstmt1bedhp.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt1bedhp.setString(5, "" + transNo + "");
                                    if (paymentModeCmbx.getSelectedItem().equals("Cash")) {
                                        pstmt1bedhp.setString(6, "");
                                        pstmt1bedhp.setString(7, "");
                                        pstmt1bedhp.setString(8, "");
                                        pstmt1bedhp.setString(9, "");
                                        pstmt1bedhp.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt1bedhp.setString(15, patientAcc);
                                        pstmt1bedhp.setString(18, "");
                                        // pstmt1.setString(22,AccDesc);
                                    } else {
                                        if (jPanel5.isVisible()) {
                                            //  if(jComboBox5.getSelectedItem().toString().equalsIgnoreCase(jTextField6.getText())){

                                            pstmt1bedhp.setString(6, "");
                                            pstmt1bedhp.setString(8, "");
                                            pstmt1bedhp.setString(7, jTextField3611.getText());
                                            pstmt1bedhp.setString(9, jTextField23.getText());
                                            pstmt1bedhp.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()));
                                            pstmt1bedhp.setString(15, insAcc);
                                            pstmt1bedhp.setString(18, memberNumberTxt.getText());

                                        } else {
                                            pstmt1bedhp.setString(6, cardNumberTxt.getText());
                                            pstmt1bedhp.setString(7, "");
                                            pstmt1bedhp.setString(8, jComboBox31.getSelectedItem().toString());
                                            pstmt1bedhp.setString(9, jTextField71.getText());
                                            pstmt1bedhp.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                            pstmt1bedhp.setString(15, cardAcc);
                                            pstmt1bedhp.setString(18, "");
                                            //  pstmt1.setString(22,cardName);
                                        }
                                    }
                                    pstmt1bedhp.setString(11, jTextField121.getText());
                                    pstmt1bedhp.setDouble(12, bedfees);
                                    pstmt1bedhp.setDouble(13, 0.00);
                                    pstmt1bedhp.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1bedhp.setString(16, Main);
                                    pstmt1bedhp.setDouble(17, 1);
                                    pstmt1bedhp.setBoolean(19, false);
                                    pstmt1bedhp.setString(20, "Billing");
                                    pstmt1bedhp.setBoolean(21, true);
                                    pstmt1bedhp.setString(22, AccDesc);
                                    pstmt1bedhp.setString(23, visitid);
                                    pstmt1bedhp.setString(24, user);
                                    pstmt1bedhp.setString(25, billNo);
                                    pstmt1bedhp.setString(26, "IP");
                                    pstmt1bedhp.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt1bedhp.setString(28, visitid);
                                    pstmt1bedhp.executeUpdate();

                                }

                                java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE hp_inpatient_register SET iplimit = " + Limit + "  WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                                pstmt31.executeUpdate();
                                if (jCheckBox6.isSelected()) {
                                    if (jTextField361.getText().toString().equalsIgnoreCase("") | jTextField361.getText().toString().equalsIgnoreCase(" ") | jTextField361.getText().toString().equalsIgnoreCase("  ")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "You Must select patient details from out patient", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                    } else {

                                        java.sql.PreparedStatement pstmt221 = connectDB.prepareStatement("UPDATE hp_patient_billing set paid = 'true' WHERE patient_no = '" + jTextField361.getText() + "' AND trans_date ='" + datePicker1.getDate() + "'");
                                        pstmt221.executeUpdate();

                                        java.sql.PreparedStatement pstmt2221 = connectDB.prepareStatement("UPDATE ac_ledger set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date ='" + datePicker1.getDate() + "'");
                                        pstmt2221.executeUpdate();

                                        java.sql.PreparedStatement pstmt2223 = connectDB.prepareStatement("UPDATE ac_cash_collection set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date ='" + datePicker1.getDate() + "'");
                                        pstmt2223.executeUpdate();

                                        java.sql.PreparedStatement pstmt2224 = connectDB.prepareStatement("UPDATE ac_doctors_ledger set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND input_date ='" + datePicker1.getDate() + "'");
                                        pstmt2224.executeUpdate();

                                        java.sql.PreparedStatement pstmt221111 = connectDB.prepareStatement("UPDATE hp_pharmacy set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date_prescribed ='" + datePicker1.getDate() + "'");
                                        pstmt221111.executeUpdate();

                                        java.sql.PreparedStatement pstmtz = connectDB.prepareStatement("UPDATE hp_patient_card set visit_id = '" + visitid + "',patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date::date ='" + datePicker1.getDate() + "'");
                                        pstmtz.executeUpdate();
                                    }
                                }
                                java.sql.Statement pss1 = connectDB.createStatement();
                                java.sql.ResultSet rss1 = pss1.executeQuery("select patient_no from hp_inpatient_register ORDER BY OID desc LIMIT 1");
                                while (rss1.next()) {
                                    // patientsNo = rss1.getObject(1).toString();
                                    //       jTextField24.setText(rss1.getObject(1).toString());
                                }

                                javax.swing.JOptionPane.showMessageDialog(this, "Admission record successful, Patient Number : [" + admissionNumberTxt.getText() + "] with Name : [" + firstNameTxt.getText() + " " + surNameTxt.getText() + "]", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        referredcombo.setSelectedItem("-");
                        jTextField9.setText("");
                        nokTelephoneTxt.setText("");
                        nokNameTxt.setText("");
                        wardCodeTxt.setText("");
                        surNameTxt.setText("");
//                        referredFromTxt.setText("");
                        currentResidence.setText("");
                        jTextField4.setText("");
                        jTextField3611.setText("");
                        jTextField23.setText("");
                        jTextField36.setText("");
                        nhifClaimNumberTxt.setText("");
                        cSheetNoTxt.setText("");
                        countyofResidenceCmbx.setSelectedItem(null);
                        countyofBirthCmbx.setSelectedItem(null);
                        educationLevelCmbx.setSelectedItem(null);
                        oldFileNumberTxt.setText("");
                        employerTxt.setText("");
                        employerTelTxt.setText("");
                        this.jButton1.setEnabled(false);
                        this.admitPrintBtn.setEnabled(false);
                    }
                }
                // connectDB.releaseSavepoint(registerSavePoint);
                jButton1.setText("Admit");

            } catch (java.lang.Exception sq) {

                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                sq.printStackTrace();
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

    }

    private void adminPrint() {
        int countAdmissions = 0;
        try {
            java.sql.PreparedStatement pstmtCheckAdmissionStatus = connectDB.prepareStatement("SELECT count(*) FROM hp_admission WHERE patient_no = ? AND sub_chief = ? AND check_out = false");
            pstmtCheckAdmissionStatus.setString(1, admissionNumberTxt.getText());
            pstmtCheckAdmissionStatus.setString(2, unitNumberTxt.getText());
            java.sql.ResultSet rsetCheckAdmissionStatus = pstmtCheckAdmissionStatus.executeQuery();
            while (rsetCheckAdmissionStatus.next()) {
                countAdmissions = rsetCheckAdmissionStatus.getInt(1);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger
                    .getLogger(AdmissionIntfr.class
                            .getName()).log(Level.SEVERE, null, ex);
        }
        if (countAdmissions == 0) {
            String yrs = null;
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;

            String dateOfBirth = null;
            String name = null;
            String activity = null;
            String actNo = null;
            String billNo = null;
            String rate = null;
            String transNo = null;
            String patientAcc = null;
            String insAcc = null;
            String cardAcc = null;
            String AccDesc = null;
            String cardName = null;
            String insName = null;
            String user = null;
            String adcode = null;
            double adrate = 0.00;
            double nursing = 0.00;
            double bedfees = 0.00;
            String Type = null;
            String Typet = null;
            String Main = null;
            double Limit = 0.0;
            int unitNo = 0;
            String Categ = null;
            String visitid = null;
            String patientNo = null;
            String selectedchkbx = null;
            String selectedStatus = null;
            boolean manualNo = false;
            String preFix = null;
            int digitNo = 0;
            String yrEnd = null;
            boolean incYr = false;
            String patientsNo = null;
            String patientsNo2 = com.afrisoftech.lib.DateLables.getDateLabel();
            String useoneNumber = null;
            double ageYrs = 0.00;
            boolean chargeNursing = false;
            boolean chargeBed = false;
            boolean nhifStatus;

            try {

                // Date parser
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yy");
                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(datePicker1.getDate().toString().trim()), "yy");

                java.lang.String monthString = dateFormatter.getDateString();

                yrs = monthString;

                // Catch java.text.parse exception.
            } catch (java.text.ParseException prs) {
                prs.printStackTrace();
            }
            java.sql.Savepoint registerSavePoint = null;
            try {

                //            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");

                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }
                java.sql.Statement stmtfs = connectDB.createStatement();
                java.sql.ResultSet rsetfs = stmtfs.executeQuery("SELECT '" + datePickerYOB.getDate() + "'::DATE ");
                while (rsetfs.next()) {
                    dateOfBirth = rsetfs.getString(1);

                }

                if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {

                    java.sql.Statement stmnzz = connectDB.createStatement();
                    java.sql.ResultSet rsnzz = stmnzz.executeQuery("select ip_numbering,use_one_number from pb_patient_names");
                    while (rsnzz.next()) {
                        manualNo = rsnzz.getBoolean(1);
                        useoneNumber = rsnzz.getString(2);
                    }
                    if (newAdimissionRbtn.isSelected() && manualNo == true) {
                        manualNo = true;
                    } else {
                        if (createManualNumbersRbtn.isSelected() && manualNo == true) {
                            manualNo = false;
                        } else {
                            manualNo = manualNo;
                        }
                    }

                    if (this.privateCategoryChkbx.isSelected()) {
                        Categ = privateCategoryChkbx.getText();
                    } else {
                        Categ = hospitalCategoryChkbx.getText();
                    }

                    if (this.maleChkbx.isSelected()) {
                        selectedchkbx = maleChkbx.getText();
                    } else {

                        selectedchkbx = femaleChkbx.getText();
                    }

                    if (this.marriedMaritalChkbx.isSelected()) {
                        selectedStatus = marriedMaritalChkbx.getText();
                    } else {
                        if (this.singleMaritalChkbx.isSelected()) {
                            selectedStatus = singleMaritalChkbx.getText();
                        } else {
                            if (this.divorcedMaritalChkbx.isSelected()) {
                                selectedStatus = divorcedMaritalChkbx.getText();
                            } else {
                                if (this.widowedMaritalChkbx.isSelected()) {
                                    selectedStatus = widowedMaritalChkbx.getText();
                                }
                            }
                        }
                    }
                    java.sql.Statement stmnza = connectDB.createStatement();
                    java.sql.ResultSet rsnza = stmnza.executeQuery("select (CURRENT_DATE::DATE - '" + datePickerYOB.getDate() + "'::DATE)/365");
                    while (rsnza.next()) {
                        ageYrs = rsnza.getDouble(1);
                    }
                    if (manualNo == false && admissionNumberTxt.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter Patient No.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    } else {

                        System.out.println(admitPrintBtn.getText());

                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_admission SET diagnosed = true WHERE patient_no ilike '" + admissionNumberTxt.getText() + "'");

                        pstmt21.executeUpdate();

                        if (newAdimissionRbtn.isSelected() || createManualNumbersRbtn.isSelected()) {

                            java.sql.Statement stmtx = connectDB.createStatement();
                            java.sql.ResultSet rsetx = stmtx.executeQuery("SELECT count(*) FROM hp_admission WHERE sub_chief ='" + unitNumberTxt.getText() + "'");
                            while (rsetx.next()) {
                                unitNo = rsetx.getInt(1);
                            }

                            java.sql.Statement stmt = connectDB.createStatement();
                            java.sql.ResultSet rset = stmt.executeQuery("SELECT patient_no FROM hp_inpatient_register WHERE patient_no ='" + this.admissionNumberTxt.getText() + "'");
                            while (rset.next()) {
                                patientNo = rset.getObject(1).toString();
                            }

                            java.sql.Statement stmt11 = connectDB.createStatement();

                            java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT patient_no,check_out FROM hp_admission WHERE patient_no ='" + admissionNumberTxt.getText() + "' and check_out = false");
                            while (rset11.next()) {
                                // jComboBox1.setSelectedItem(rset11.getObject(1).toString());
                                name = rset11.getObject(1).toString();
                                if (rset11.getBoolean(2) == false) {
                                    jCheckBox7.setSelected(true);
                                } else {
                                    jCheckBox7.setSelected(false);
                                }
                            }

                            if (this.admissionNumberTxt.getText().equalsIgnoreCase(patientNo)) {
                                jLabel33.setForeground(java.awt.Color.red);
                                jLabel33.setText("PATIENT No. Already On File");

                                // javax.swing.JOptionPane.showMessageDialog(this,"PATIENT No. Already Exists", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                            } else if (admissionNumberTxt.getText().equalsIgnoreCase(name)) {
                                javax.swing.JOptionPane.showMessageDialog(this, " Patient with patient no '" + name + "' already admitted ", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                            } else {

                                if (manualNo) {

                                    patientsNo2 = patientsNo2;

                                } else {

                                    patientsNo = admissionNumberTxt.getText();
                                    patientsNo2 = patientsNo;
                                }
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_inpatient_register VALUES(?, UPPER(?), UPPER(?), ?, ?, ?, ?, ?, ?, ?)");
                                pstmt.setString(1, patientsNo2);
                                if (surNameTxt.getText().equals("")) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You must enter First Name and Second Name", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {
                                    pstmt.setString(2, surNameTxt.getText().toUpperCase());
                                }
                                pstmt.setString(3, firstNameTxt.getText());
                                pstmt.setString(4, "");
                                pstmt.setString(5, nokNameTxt.getText());
                                pstmt.setString(8, dateOfBirth);
                                pstmt.setString(7, jTextField9.getText());
                                if (currentResidence.getText().equals("")) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You must enter residence", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {
                                    pstmt.setString(6, currentResidence.getText());
                                }

                                pstmt.setString(9, nokTelephoneTxt.getText());
                                if (selectedchkbx == null) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient sex", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {
                                    pstmt.setObject(10, selectedchkbx);
                                }

                                pstmt.executeUpdate();
                                this.jButton1.setVisible(false);
                                //   javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            }
                        }

                        if (newAdimissionRbtn.isSelected()) {

                            if (manualNo) {
                                String patNos = null;

                                if (useoneNumber.equalsIgnoreCase("useonenumber")) {
                                    // Checking the presence of out patient number in hp_patient_register
                                    int opNos = 0;
                                    java.sql.Statement stmnz1c = connectDB.createStatement();
                                    java.sql.ResultSet rsnz1c = stmnz1c.executeQuery("SELECT COUNT(patient_no) FROM hp_patient_register WHERE patient_no = '" + jTextField361.getText() + "'");
                                    while (rsnz1c.next()) {
                                        opNos = rsnz1c.getInt(1);
                                    }
                                    if (opNos > 0) {
                                        patientNo = jTextField361.getText();
                                        admissionNumberTxt.setText(jTextField361.getText());
                                    } else {
                                        java.sql.Statement stmnz1 = connectDB.createStatement();
                                        java.sql.ResultSet rsnz1 = stmnz1.executeQuery("select prefix_item,digit_no,yr_end,inc_year from pb_patient_names");
                                        while (rsnz1.next()) {
                                            preFix = rsnz1.getString(1);
                                            digitNo = rsnz1.getInt(2);
                                            yrEnd = rsnz1.getString(3);
                                            incYr = rsnz1.getBoolean(4);
                                        }
                                        if (incYr) {

                                            java.sql.Statement pss1x = connectDB.createStatement();
                                            java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('outpatient_no_seq')");
                                            while (rss1x.next()) {
                                                patNos = rss1x.getObject(1).toString();
                                            }
                                            if (preFix.equalsIgnoreCase("noPrefix")) {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                while (rss1.next()) {
                                                    patientNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());

                                                }

                                            } else {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                while (rss1.next()) {
                                                    patientNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }
                                            }
                                        } else {
                                            java.sql.Statement pss1x = connectDB.createStatement();
                                            java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('outpatient_no_seq')");
                                            while (rss1x.next()) {
                                                patNos = rss1x.getObject(1).toString();
                                            }
                                            if (preFix.equalsIgnoreCase("noPrefix")) {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')");
                                                while (rss1.next()) {
                                                    patientNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }
                                            } else {
                                                java.sql.Statement pss1 = connectDB.createStatement();
                                                java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')");
                                                while (rss1.next()) {
                                                    patientNo = rss1.getObject(1).toString();
                                                    admissionNumberTxt.setText(rss1.getObject(1).toString());
                                                }
                                            }
                                        }
                                    }
                                } else {

                                    java.sql.Statement pss1x = connectDB.createStatement();
                                    java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('inpatient_no_seq')");
                                    while (rss1x.next()) {
                                        patNos = rss1x.getObject(1).toString();
                                    }
                                    java.sql.Statement stmnz1 = connectDB.createStatement();
                                    java.sql.ResultSet rsnz1 = stmnz1.executeQuery("select ip_prefix,ip_digit,ip_yr from pb_patient_names");
                                    while (rsnz1.next()) {
                                        preFix = rsnz1.getString(1);
                                        digitNo = rsnz1.getInt(2);
                                        incYr = rsnz1.getBoolean(3);
                                    }
                                    if (incYr) {

                                        if (preFix.equalsIgnoreCase("noIP")) {

                                            java.sql.Statement pss1 = connectDB.createStatement();
                                            java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                            while (rss1.next()) {
                                                patientsNo = rss1.getObject(1).toString();
                                                admissionNumberTxt.setText(rss1.getObject(1).toString());
                                            }

                                        } else {
                                            java.sql.Statement pss1 = connectDB.createStatement();
                                            java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                            while (rss1.next()) {
                                                patientsNo = rss1.getObject(1).toString();
                                                admissionNumberTxt.setText(rss1.getObject(1).toString());
                                            }
                                        }
                                    } else {
                                        if (preFix.equalsIgnoreCase("noiP")) {
                                            java.sql.Statement pss1 = connectDB.createStatement();
                                            java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')");
                                            while (rss1.next()) {
                                                patientsNo = rss1.getObject(1).toString();
                                                admissionNumberTxt.setText(rss1.getObject(1).toString());
                                            }
                                        } else {
                                            java.sql.Statement pss1 = connectDB.createStatement();
                                            java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')");
                                            while (rss1.next()) {
                                                patientsNo = rss1.getObject(1).toString();
                                                admissionNumberTxt.setText(rss1.getObject(1).toString());
                                            }
                                        }
                                    }

                                }
                                java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE hp_inpatient_register SET patient_no = '" + admissionNumberTxt.getText() + "'  WHERE patient_no = '" + patientsNo2 + "'");
                                pstmt11.executeUpdate();
                                java.sql.PreparedStatement pstmt11z = connectDB.prepareStatement("UPDATE hp_admission SET patient_no = '" + admissionNumberTxt.getText() + "',admission_no = '" + admissionNumberTxt.getText() + "'  WHERE patient_no = '" + patientsNo2 + "'");
                                pstmt11z.executeUpdate();
                            }

                        }
                        if (admissionNumberTxt.getText().equalsIgnoreCase(name)) {
                            javax.swing.JOptionPane.showMessageDialog(this, " Patient with with patient no '" + name + "' already admitted ", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        } else {
                            java.sql.Statement stmtD = connectDB.createStatement();
                            java.sql.ResultSet rsetD = stmtD.executeQuery("select rate,gl_account,service_type,main_service from pb_operating_parameters where category ='AF'");
                            while (rsetD.next()) {

                                // adrate = rsetD.getDouble(1);
                                //   adcode = rsetD.getObject(2).toString();
                                Type = rsetD.getObject(3).toString();
                                //   Main = rsetD.getObject(4).toString();
                            }

                            java.sql.Statement stmtDt = connectDB.createStatement();
                            java.sql.ResultSet rsetDt = stmtDt.executeQuery("select rate,gl_account,service_type,main_service from pb_operating_parameters where category ='NF'");
                            while (rsetDt.next()) {

                                // adrate = rsetD.getDouble(1);
                                //   adcode = rsetD.getObject(2).toString();
                                Typet = rsetDt.getObject(3).toString();
                                //   Main = rsetD.getObject(4).toString();
                            }

                            java.sql.Statement stmtDq = connectDB.createStatement();
                            java.sql.ResultSet rsetDq = stmtDq.executeQuery("select admission_revdesc, admission_revcode from hp_wards where ward_name = '" + admissionWardCmbx.getSelectedItem() + "'");
                            while (rsetDq.next()) {

                                //   adrate = rsetD.getDouble(1);
                                adcode = rsetDq.getObject(2).toString();
                                //    Type = rsetD.getObject(3).toString();
                                Main = rsetDq.getObject(1).toString();
                            }

                            java.sql.Statement stm1 = connectDB.createStatement();
                            java.sql.ResultSet rse1 = stm1.executeQuery("select code,activity,user from pb_activity where activity_category ='PR'");
                            while (rse1.next()) {

                                patientAcc = rse1.getObject(1).toString();
                                AccDesc = rse1.getObject(2).toString();
                            }

                            java.sql.Statement stm1d = connectDB.createStatement();
                            java.sql.ResultSet rse1d = stm1d.executeQuery("select current_user");
                            while (rse1d.next()) {

                                user = rse1d.getObject(1).toString();
                            }

                            java.sql.Statement stm1l = connectDB.createStatement();
                            java.sql.ResultSet rse1l = stm1l.executeQuery("select amount from pb_iplimit");
                            while (rse1l.next()) {

                                Limit = rse1l.getDouble(1);

                            }
                            java.sql.Statement stm1lx = connectDB.createStatement();
                            java.sql.ResultSet rse1lx = stm1lx.executeQuery("select nursing,adm_rate, rate,charge_nfee,charge_bfee from hp_bed_category WHERE category ilike '" + bedCategoryCmbx.getSelectedItem() + "'");
                            while (rse1lx.next()) {

                                adrate = rse1lx.getDouble(2);
                                nursing = rse1lx.getDouble(1);
                                bedfees = rse1lx.getDouble(3);
                                chargeNursing = rse1lx.getBoolean(4);
                                chargeBed = rse1lx.getBoolean(5);
                            }
                            java.sql.Statement stm2 = connectDB.createStatement();
                            java.sql.ResultSet rse2 = stm2.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rse2.next()) {

                                insAcc = rse2.getObject(1).toString();
                                insName = rse2.getObject(2).toString();
                            }
                            // if(jCheckBox1.isSelected()||jCheckBox2.isSelected()){

                            java.sql.Statement stmt1 = connectDB.createStatement();
                            java.sql.ResultSet rset1 = stmt1.executeQuery("select nextval('billing_no_seq')");
                            while (rset1.next()) {
                                billNo = rset1.getObject(1).toString();
                            }
                            java.sql.Statement stmt3 = connectDB.createStatement();
                            java.sql.ResultSet rset3 = stmt3.executeQuery("select nextval('transaction_no_seq')");
                            while (rset3.next()) {
                                transNo = rset3.getObject(1).toString();
                            }
                            java.sql.Statement stmtq = connectDB.createStatement();
                            java.sql.ResultSet rsetq = stmtq.executeQuery("select nextval('ipvisit_id')");
                            while (rsetq.next()) {
                                visitid = rsetq.getObject(1).toString();
                            }

                            java.sql.PreparedStatement pstmt27 = connectDB.prepareStatement("update hp_bed_setup set occupied = true where bed_no ='" + bedNumberCmbx.getSelectedItem() + "' and ward = '" + admissionWardCmbx.getSelectedItem() + "'");
                            pstmt27.execute();

                            java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE hp_inpatient_register set pay_mode = '" + paymentModeCmbx.getSelectedItem().toString() + "',category = '" + bedCategoryCmbx.getSelectedItem().toString() + "',adm_date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()) + "',payer = '" + jTextField4.getText() + "'  WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                            pstmt11.executeUpdate();

                            //  java.sql.PreparedStatement pstmt81x = connectDB.prepareStatement("UPDATE hp_patient_card SET invoice_no = '"+visitid+"', visit_id = '"+visitid+"' where patient_no = '"+jTextField12.getText()+"' and visit_id = 'Booking'");
                            //  pstmt81x.executeUpdate();
                            java.sql.PreparedStatement pstmt811x = connectDB.prepareStatement("UPDATE hp_patient_card SET visit_id = '" + visitid + "' where patient_no = '" + admissionNumberTxt.getText() + "' and service ilike 'Receip%' AND invoice_no not ilike 'I%' and date::date BETWEEN (current_date - 200) AND CURRENT_DATE and (visit_id = '' or visit_id = '-')");
                            pstmt811x.executeUpdate();

                            if (jPanel5.isVisible()) {
                                java.sql.PreparedStatement pstmt111 = connectDB.prepareStatement("UPDATE hp_inpatient_register set description = '" + jTextField3611.getText() + "',payer = '" + jTextField23.getText() + "',account_no ='" + memberNumberTxt.getText() + "',expiry_date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()) + "', member_no = '" + memberNumberTxt.getText() + "',member_name = '" + jTextField36.getText() + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                                pstmt111.executeUpdate();
                            } else {
                                if (jPanel21.isVisible()) {
                                    java.sql.PreparedStatement pstmta = connectDB.prepareStatement("UPDATE hp_inpatient_register set description = '" + jComboBox31.getSelectedItem().toString() + "',payer = '" + jTextField71.getText() + "',account_no ='" + cardNumberTxt.getText() + "',expiry_date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()) + "' WHERE patient_no = '" + admissionNumberTxt.getText() + "'");

                                    pstmta.executeUpdate();
                                }

                            }

// Entry of admission information into the hp_admission table
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_admission VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                            pstmt.setString(1, admissionNumberTxt.getText());

                            pstmt.setString(2, firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase());
                            pstmt.setString(3, jTextPane1.getText());
                            if (admissionWardCmbx.getSelectedItem() == null) {
                                javax.swing.JOptionPane.showMessageDialog(this, "You must Select Ward Name", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                            } else {

                                pstmt.setString(5, admissionWardCmbx.getSelectedItem().toString());
                            }
                            if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                pstmt.setString(4, jTextField3611.getText());
                            } else {
                                pstmt.setString(4, "Self");
                            }
                            pstmt.setString(6, bedNumberCmbx.getSelectedItem().toString());
                            pstmt.setString(7, jTextField121.getText().toString());
                            pstmt.setString(8, bedCategoryCmbx.getSelectedItem().toString());
                            pstmt.setString(9, nokNameTxt.getText());
                            pstmt.setString(10, nokTelephoneTxt.getText());
                            pstmt.setString(11, jTextField9.getText());
                            pstmt.setString(12, idPassportTxt.getText());
                            pstmt.setString(13, paymentModeCmbx.getSelectedItem().toString());
                            pstmt.setString(14, Categ);
                            pstmt.setDouble(15, java.lang.Double.valueOf(bedRateTxt.getText()));
                            pstmt.setString(16, referredcombo.getSelectedItem().toString());
                            pstmt.setString(17, nationalityCmbx.getSelectedItem().toString());
                            pstmt.setBoolean(18, false);
                            pstmt.setString(19, currentResidence.getText());
                            pstmt.setString(20, "");
                            pstmt.setString(21, nhifChbx.getText());
                            pstmt.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));

                            pstmt.setString(23, admissionNumberTxt.getText());

                            pstmt.setString(24, user);
                            pstmt.setString(25, null);
                            pstmt.setString(26, null);
                            pstmt.setString(27, visitid);
                            pstmt.setDouble(28, 0.00);
                            pstmt.setString(29, "");
                            pstmt.setDouble(30, nursing);
                            pstmt.setBoolean(31, false);
                            pstmt.setString(32, "");
                            pstmt.setString(33, oldFileNumberTxt.getText());
                            pstmt.setObject(34, jComboBox2.getSelectedItem());
                            pstmt.setObject(35, patientUrgencyCMBX.getSelectedItem());
                            pstmt.setDouble(36, ageYrs);
                            pstmt.setObject(37, selectedchkbx);
                            pstmt.setObject(38, selectedStatus);
                            pstmt.setString(39, "Admitted");
                            if (newAdimissionRbtn.isSelected()) {
                                pstmt.setString(40, "First Admission ");
                            } else {
                                pstmt.setString(40, "Re Admission ");
                            }
                            pstmt.setObject(41, specialtyClinicCmbx.getSelectedItem());
                            pstmt.setObject(42, occupationCmbx.getSelectedItem());
                            pstmt.setBoolean(43, false);
                            pstmt.setObject(44, religionCmbx.getSelectedItem());
                            pstmt.setObject(45, this.districtCmbx.getSelectedItem());
                            pstmt.setObject(46, this.locationTxt.getText());
                            pstmt.setObject(47, this.nokteltxt.getText());
                            pstmt.setObject(48, this.unitNumberTxt.getText());
                            pstmt.setObject(49, this.nokResidenceTxt.getText());
                            pstmt.setObject(50, this.nokRelationShipCmbx.getSelectedItem());
                            pstmt.setBoolean(51, false);
                            pstmt.setString(52, null);
                            if (nhifChbx.isSelected()) {
                                nhifStatus = true;
                            } else {
                                nhifStatus = false;
                            }
                            pstmt.setBoolean(53, nhifStatus);
                            pstmt.setObject(54, countyofBirthCmbx.getSelectedItem());
                            pstmt.setObject(55, countyofResidenceCmbx.getSelectedItem());
                            pstmt.setObject(56, educationLevelCmbx.getSelectedItem());
                            pstmt.setString(57, cSheetNoTxt.getText());

                            pstmt.executeUpdate();

// Ledger entry for admission fees at the point of registration. (This is done on ac_ledger)                                
                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt2.setString(1, com.afrisoftech.lib.WardGLAccountsFactory.getAdmissionChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString()));
                            pstmt2.setString(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, com.afrisoftech.lib.WardGLAccountsFactory.getAdmissionChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString())));
                            pstmt2.setString(3, admissionNumberTxt.getText());
                            pstmt2.setString(4, surNameTxt.getText());
                            pstmt2.setString(5, "");
                            pstmt2.setString(6, "");
                            pstmt2.setString(7, "");
                            pstmt2.setString(8, "IP");
                            pstmt2.setString(9, "");
                            pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                            pstmt2.setString(11, "");
                            pstmt2.setString(12, "");
                            pstmt2.setString(13, "");
                            pstmt2.setString(14, Type);
                            pstmt2.setString(15, "Revenue");
                            pstmt2.setDouble(16, 0.00);
                            pstmt2.setDouble(17, adrate);
                            pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt2.setString(19, "" + transNo + "");
                            pstmt2.setBoolean(20, false);
                            pstmt2.setBoolean(21, false);
                            pstmt2.setBoolean(22, false);
                            pstmt2.setString(23, user);
                            pstmt2.executeUpdate();

// Billing for admission fee at the point of admission.
                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                            pstmt1.setString(1, admissionNumberTxt.getText());
                            pstmt1.setString(2, Type);
                            pstmt1.setString(3, bedCategoryCmbx.getSelectedItem().toString());
                            pstmt1.setString(4, paymentModeCmbx.getSelectedItem().toString());
                            pstmt1.setString(5, "" + transNo + "");
                            if (paymentModeCmbx.getSelectedItem().equals("Cash")) {
                                pstmt1.setString(6, "");
                                pstmt1.setString(7, "");
                                pstmt1.setString(8, "");
                                pstmt1.setString(9, "");
                                pstmt1.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1.setString(15, patientAcc);
                                pstmt1.setString(18, "");
                                // pstmt1.setString(22,AccDesc);
                            } else {
                                if (jPanel5.isVisible()) {
                                    //  if(jComboBox5.getSelectedItem().toString().equalsIgnoreCase(jTextField6.getText())){

                                    pstmt1.setString(6, "");
                                    pstmt1.setString(8, "");
                                    pstmt1.setString(7, jTextField3611.getText());
                                    pstmt1.setString(9, jTextField23.getText());
                                    pstmt1.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()));
                                    pstmt1.setString(15, insAcc);
                                    pstmt1.setString(18, memberNumberTxt.getText());

                                } else {
                                    pstmt1.setString(6, cardNumberTxt.getText());
                                    pstmt1.setString(7, "");
                                    pstmt1.setString(8, jComboBox31.getSelectedItem().toString());
                                    pstmt1.setString(9, jTextField71.getText());
                                    pstmt1.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                    pstmt1.setString(15, cardAcc);
                                    pstmt1.setString(18, "");
                                    //  pstmt1.setString(22,cardName);
                                }
                            }
                            pstmt1.setString(11, jTextField121.getText());
                            pstmt1.setDouble(12, adrate);
                            pstmt1.setDouble(13, 0.00);
                            pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1.setString(16, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, com.afrisoftech.lib.WardGLAccountsFactory.getAdmissionChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString())));
                            pstmt1.setDouble(17, 1);
                            pstmt1.setBoolean(19, false);
                            pstmt1.setString(20, "Billing");
                            pstmt1.setBoolean(21, true);
                            pstmt1.setString(22, AccDesc);
                            pstmt1.setString(23, visitid);
                            pstmt1.setString(24, user);
                            pstmt1.setString(25, billNo);
                            pstmt1.setString(26, "IP");
                            pstmt1.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt1.setString(28, visitid);
                            pstmt1.executeUpdate();

// Ledger entry for nursing fees at the point of admission. This is done on ac_ledger table
                            if (chargeNursing) {
                                java.sql.PreparedStatement pstmt2n = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2n.setString(1, com.afrisoftech.lib.WardGLAccountsFactory.getNursingChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString()));
                                pstmt2n.setString(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, com.afrisoftech.lib.WardGLAccountsFactory.getNursingChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString())));
                                pstmt2n.setString(3, admissionNumberTxt.getText());
                                pstmt2n.setString(4, surNameTxt.getText());
                                pstmt2n.setString(5, "");
                                pstmt2n.setString(6, "");
                                pstmt2n.setString(7, "");
                                pstmt2n.setString(8, "IP");
                                pstmt2n.setString(9, "");
                                pstmt2n.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                pstmt2n.setString(11, "");
                                pstmt2n.setString(12, "");
                                pstmt2n.setString(13, "");
                                pstmt2n.setString(14, "Nursing/Professional Fees");
                                pstmt2n.setString(15, "Revenue");
                                pstmt2n.setDouble(16, 0.00);
                                pstmt2n.setDouble(17, nursing);
                                pstmt2n.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2n.setString(19, "" + transNo + "");
                                pstmt2n.setBoolean(20, false);
                                pstmt2n.setBoolean(21, false);
                                pstmt2n.setBoolean(22, false);
                                pstmt2n.setString(23, user);
                                pstmt2n.executeUpdate();

// Bill admission nursing/professional fees at the point of admission (This is done on the patient bill - hp_patient_card table
                                java.sql.PreparedStatement pstmt1m = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmt1m.setString(1, admissionNumberTxt.getText());
                                pstmt1m.setString(2, "Nursing/Professional Fees");
                                pstmt1m.setString(3, bedCategoryCmbx.getSelectedItem().toString());
                                pstmt1m.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                pstmt1m.setString(5, "" + transNo + "");
                                if (paymentModeCmbx.getSelectedItem().equals("Cash")) {
                                    pstmt1m.setString(6, "");
                                    pstmt1m.setString(7, "");
                                    pstmt1m.setString(8, "");
                                    pstmt1m.setString(9, "");
                                    pstmt1m.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1m.setString(15, patientAcc);
                                    pstmt1m.setString(18, "");
                                    // pstmt1.setString(22,AccDesc);
                                } else {
                                    if (jPanel5.isVisible()) {
                                        //  if(jComboBox5.getSelectedItem().toString().equalsIgnoreCase(jTextField6.getText())){

                                        pstmt1m.setString(6, "");
                                        pstmt1m.setString(8, "");
                                        pstmt1m.setString(7, jTextField3611.getText());
                                        pstmt1m.setString(9, jTextField23.getText());
                                        pstmt1m.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()));
                                        pstmt1m.setString(15, insAcc);
                                        pstmt1m.setString(18, memberNumberTxt.getText());

                                    } else {
                                        pstmt1m.setString(6, cardNumberTxt.getText());
                                        pstmt1m.setString(7, "");
                                        pstmt1m.setString(8, jComboBox31.getSelectedItem().toString());
                                        pstmt1m.setString(9, jTextField71.getText());
                                        pstmt1m.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                        pstmt1m.setString(15, cardAcc);
                                        pstmt1m.setString(18, "");
                                        //  pstmt1.setString(22,cardName);
                                    }
                                }
                                pstmt1m.setString(11, jTextField121.getText());
                                pstmt1m.setDouble(12, nursing);
                                pstmt1m.setDouble(13, 0.00);
                                pstmt1m.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1m.setString(16, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, com.afrisoftech.lib.WardGLAccountsFactory.getNursingChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString())));
                                pstmt1m.setDouble(17, 1);
                                pstmt1m.setBoolean(19, false);
                                pstmt1m.setString(20, "Billing");
                                pstmt1m.setBoolean(21, true);
                                pstmt1m.setString(22, AccDesc);
                                pstmt1m.setString(23, visitid);
                                pstmt1m.setString(24, user);
                                pstmt1m.setString(25, billNo);
                                pstmt1m.setString(26, "IP");
                                pstmt1m.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt1m.setString(28, visitid);
                                pstmt1m.executeUpdate();
                            }
// Ledger entry for bed fees at the point of admission. This is done on ac_ledger table
                            if (chargeBed) {
                                java.sql.PreparedStatement pstmt2bed = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2bed.setString(1, com.afrisoftech.lib.WardGLAccountsFactory.getBedChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString()));
                                //                                pstmt2n.setString(2, Type);
                                pstmt2bed.setString(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, com.afrisoftech.lib.WardGLAccountsFactory.getBedChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString())));
                                pstmt2bed.setString(3, admissionNumberTxt.getText());
                                pstmt2bed.setString(4, surNameTxt.getText());
                                pstmt2bed.setString(5, "");
                                pstmt2bed.setString(6, "");
                                pstmt2bed.setString(7, "");
                                pstmt2bed.setString(8, "IP");
                                pstmt2bed.setString(9, "");
                                pstmt2bed.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                pstmt2bed.setString(11, "");
                                pstmt2bed.setString(12, "");
                                pstmt2bed.setString(13, "");
                                pstmt2bed.setString(14, "Daily Bed Fees");
                                pstmt2bed.setString(15, "Revenue");
                                pstmt2bed.setDouble(16, 0.00);
                                pstmt2bed.setDouble(17, bedfees);
                                pstmt2bed.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2bed.setString(19, "" + transNo + "");
                                pstmt2bed.setBoolean(20, false);
                                pstmt2bed.setBoolean(21, false);
                                pstmt2bed.setBoolean(22, false);
                                pstmt2bed.setString(23, user);
                                pstmt2bed.executeUpdate();

// Bill admission bed fees at the point of admission (This is done on the patient bill - hp_patient_card table
                                java.sql.PreparedStatement pstmt1bedhp = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmt1bedhp.setString(1, admissionNumberTxt.getText());
                                pstmt1bedhp.setString(2, "Bed Fees");
                                pstmt1bedhp.setString(3, bedCategoryCmbx.getSelectedItem().toString());
                                pstmt1bedhp.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                pstmt1bedhp.setString(5, "" + transNo + "");
                                if (paymentModeCmbx.getSelectedItem().equals("Cash")) {
                                    pstmt1bedhp.setString(6, "");
                                    pstmt1bedhp.setString(7, "");
                                    pstmt1bedhp.setString(8, "");
                                    pstmt1bedhp.setString(9, "");
                                    pstmt1bedhp.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1bedhp.setString(15, patientAcc);
                                    pstmt1bedhp.setString(18, "");
                                    // pstmt1.setString(22,AccDesc);
                                } else {
                                    if (jPanel5.isVisible()) {
                                        //  if(jComboBox5.getSelectedItem().toString().equalsIgnoreCase(jTextField6.getText())){

                                        pstmt1bedhp.setString(6, "");
                                        pstmt1bedhp.setString(8, "");
                                        pstmt1bedhp.setString(7, jTextField3611.getText());
                                        pstmt1bedhp.setString(9, jTextField23.getText());
                                        pstmt1bedhp.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker21.getDate()));
                                        pstmt1bedhp.setString(15, insAcc);
                                        pstmt1bedhp.setString(18, memberNumberTxt.getText());

                                    } else {
                                        pstmt1bedhp.setString(6, cardNumberTxt.getText());
                                        pstmt1bedhp.setString(7, "");
                                        pstmt1bedhp.setString(8, jComboBox31.getSelectedItem().toString());
                                        pstmt1bedhp.setString(9, jTextField71.getText());
                                        pstmt1bedhp.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                        pstmt1bedhp.setString(15, cardAcc);
                                        pstmt1bedhp.setString(18, "");
                                        //  pstmt1.setString(22,cardName);
                                    }
                                }
                                pstmt1bedhp.setString(11, jTextField121.getText());
                                pstmt1bedhp.setDouble(12, bedfees);
                                pstmt1bedhp.setDouble(13, 0.00);
                                pstmt1bedhp.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1bedhp.setString(16, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, com.afrisoftech.lib.WardGLAccountsFactory.getBedChargesGLAccount(connectDB, admissionWardCmbx.getSelectedItem().toString())));
                                pstmt1bedhp.setDouble(17, 1);
                                pstmt1bedhp.setBoolean(19, false);
                                pstmt1bedhp.setString(20, "Billing");
                                pstmt1bedhp.setBoolean(21, true);
                                pstmt1bedhp.setString(22, AccDesc);
                                pstmt1bedhp.setString(23, visitid);
                                pstmt1bedhp.setString(24, user);
                                pstmt1bedhp.setString(25, billNo);
                                pstmt1bedhp.setString(26, "IP");
                                pstmt1bedhp.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt1bedhp.setString(28, visitid);
                                pstmt1bedhp.executeUpdate();

                            }

                            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE hp_inpatient_register SET iplimit = " + Limit + "  WHERE patient_no = '" + admissionNumberTxt.getText() + "'");
                            pstmt31.executeUpdate();
                            if (jCheckBox6.isSelected()) {
                                if (jTextField361.getText().toString().equalsIgnoreCase("") | jTextField361.getText().toString().equalsIgnoreCase(" ") | jTextField361.getText().toString().equalsIgnoreCase("  ")) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You Must select patient details from out patient", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                } else {

                                    java.sql.PreparedStatement pstmt221 = connectDB.prepareStatement("UPDATE hp_patient_billing set paid = 'true' WHERE patient_no = '" + jTextField361.getText() + "' AND trans_date ='" + datePicker1.getDate() + "'");
                                    pstmt221.executeUpdate();

                                    java.sql.PreparedStatement pstmt2221 = connectDB.prepareStatement("UPDATE ac_ledger set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date ='" + datePicker1.getDate() + "'");
                                    pstmt2221.executeUpdate();

                                    java.sql.PreparedStatement pstmt2223 = connectDB.prepareStatement("UPDATE ac_cash_collection set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date ='" + datePicker1.getDate() + "'");
                                    pstmt2223.executeUpdate();

                                    java.sql.PreparedStatement pstmt2224 = connectDB.prepareStatement("UPDATE ac_doctors_ledger set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND input_date ='" + datePicker1.getDate() + "'");
                                    pstmt2224.executeUpdate();

                                    java.sql.PreparedStatement pstmt221111 = connectDB.prepareStatement("UPDATE hp_pharmacy set patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date_prescribed ='" + datePicker1.getDate() + "'");
                                    pstmt221111.executeUpdate();

                                    java.sql.PreparedStatement pstmtz = connectDB.prepareStatement("UPDATE hp_patient_card set visit_id = '" + visitid + "',patient_no = '" + admissionNumberTxt.getText() + "' WHERE patient_no = '" + jTextField361.getText() + "' AND date::date ='" + datePicker1.getDate() + "'");
                                    pstmtz.executeUpdate();
                                }
                            }
                            java.sql.Statement pss1 = connectDB.createStatement();
                            java.sql.ResultSet rss1 = pss1.executeQuery("select patient_no from hp_inpatient_register ORDER BY OID desc LIMIT 1");
                            while (rss1.next()) {
                                // patientsNo = rss1.getObject(1).toString();
                                //     jTextField24.setText(rss1.getObject(1).toString());
                            }

                            javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }

                        connectDB.commit();
                        connectDB.setAutoCommit(true);

                    }
                }

                String nhifStatusTxt = null;

                if (nhifChbx.isSelected()) {
                    nhifStatusTxt = "YES";
                } else {
                    nhifStatusTxt = "NO";
                }

                String interviewer = null;
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT current_user");
                java.sql.ResultSet rset = pstmt.executeQuery();
                while (rset.next()) {
                    interviewer = rset.getString(1);
                }

                String receiptNo = null, amt = null;

                try {
                    java.sql.Statement stmt11 = connectDB.createStatement();
                    java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT  description,receipt_no, debit  FROM ac_cash_collection where  patient_no='" + admissionNumberTxt.getText() + "' and receipt_time::date >= current_date-1 ");
                    while (rset11.next()) {
                        receiptNo = rset11.getObject(2).toString();
                        amt = rset11.getObject(3).toString();

                    }

                } catch (SQLException ex) {
                    Logger.getLogger(PatientRegisterIntfr.class
                            .getName()).log(Level.SEVERE, null, ex);
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                }
                String selectgender = null;
                if (this.maleChkbx.isSelected()) {
                    selectgender = maleChkbx.getText();
                } else {

                    selectgender = femaleChkbx.getText();
                }
                java.sql.PreparedStatement pstmtDisability = connectDB.prepareStatement("UPDATE hp_patient_register SET patient_disability = ? WHERE patient_no = ?");
                pstmtDisability.setObject(1, this.patientDisabilityCmbx.getSelectedItem());
                pstmtDisability.setObject(2, this.admissionNumberTxt.getText());
                pstmtDisability.executeUpdate();

                com.afrisoftech.reports.PatientRegFormPdf.connectDB = connectDB;
////                com.afrisoftech.reports.PatientRegFormPdf regForm = new com.afrisoftech.reports.PatientRegFormPdf();
////                regForm.callPdf(connectDB, admissionNumberTxt.getText(), "IP");
//                                                                           
//                    regForm.generatePdf(firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase(),
//                            agelabel.getText(), selectedStatus, nationalityCmbx.getSelectedItem().toString(),
//                            idPassportTxt.getText(), districtCmbx.getSelectedItem().toString(), occupationCmbx.getSelectedItem().toString(), selectedStatus,
//                            religionCmbx.getSelectedItem().toString(), nokTelephoneTxt.getText(), " ", currentResidence.getText(), locationTxt.getText(), countyofBirthCmbx.getSelectedItem().toString(),
//                            countyofResidenceCmbx.getSelectedItem().toString(), nokNameTxt.getText(), nokRelationShipCmbx.getSelectedItem().toString(), nokTelephoneTxt.getText(), referredFromTxt.getText(), " ",
//                            specialtyClinicCmbx.getSelectedItem().toString(), nhifStatusTxt, nhifClaimNumberTxt.getText(),
//                            educationLevelCmbx.getSelectedItem().toString(), employerTelTxt.getText(), employerTxt.getText(), amt, receiptNo, cSheetNoTxt.getText(), " ",
//                            interviewer, com.afrisoftech.lib.ServerTime.serverTimeStamp(connectDB), jComboBox2.getSelectedItem().toString(),
//                            unitNumberTxt.getText(), admissionNumber.getText(), admissionWardCmbx.getSelectedItem().toString(),
//                            com.afrisoftech.lib.ServerTime.serverTimeStamp(connectDB), bedCategoryCmbx.getSelectedItem().toString(), nhifClaimNumberTxt.getText(), datePicker1.getDate(), selectgender,
//                            "", "", "", "", "", "", "", "", "", "");

                jButton1.setText("Admit");

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                sq.printStackTrace();
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            this.jButton1.setVisible(true);

//        }catch (java.lang.Exception ex) {
//                ex.printStackTrace();
//                System.out.println(ex.getMessage());
//                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Patient is already admitted! You CANNOT have multiple admissions for a patient.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

    }

    private void resetFields() {

        this.admitPrintBtn.setEnabled(true);
        this.jButton1.setVisible(true);
        this.jButton1.setText("Admit");
        admitPrintBtn.setText("Admit & Print");
        referredcombo.setSelectedItem("-");
        jTextField9.setText("");
        nokTelephoneTxt.setText("");
        nokNameTxt.setText("");
        firstNameTxt.setText("");
        wardCodeTxt.setText("");
        surNameTxt.setText("");
        //jTextField6.setText("");
        admissionNumberTxt.setText("");
        memberNumberTxt.setText("");
        currentResidence.setText("");
        jTextField4.setText("");
        jTextField3611.setText("");
        jTextField361.setText("");
        jTextField23.setText("");
        jTextField36.setText("");
        searchButton1.setEnabled(true);
        searchButton.setEnabled(true);
//        searchbyPatientNameChkbx.setEnabled(true);
//        searchbyPatientNumberChkbx.setEnabled(true);
        jCheckBox311.setEnabled(false);
        jCheckBox221.setEnabled(false);
//        referredFromTxt.setEditable(true);
        jTextField9.setEditable(true);
        nokTelephoneTxt.setEditable(true);
        nokNameTxt.setEditable(true);
        firstNameTxt.setEditable(true);
        surNameTxt.setEditable(true);
        //jTextField6.setEditable(true);
        admissionNumberTxt.setEditable(true);
        memberNumberTxt.setEditable(true);
        currentResidence.setEditable(true);
        jTextField4.setEditable(true);
        jTextField3611.setEditable(true);
        jTextField361.setEditable(false);
        jTextField23.setEditable(true);
        jTextField36.setEditable(true);
        String useonenumber = null;
        religionCmbx.setSelectedIndex(-1);
        nationalityCmbx.setSelectedIndex(-1);
        districtCmbx.setSelectedIndex(-1);
        occupationCmbx.setSelectedIndex(-1);
        admissionWardCmbx.setSelectedIndex(-1);
        bedNumberCmbx.setSelectedIndex(-1);
        bedCategoryCmbx.setSelectedIndex(-1);
        specialtyClinicCmbx.setSelectedIndex(-1);
        nokRelationShipCmbx.setSelectedIndex(-1);
        countyofBirthCmbx.setSelectedIndex(-1);
        educationLevelCmbx.setSelectedIndex(-1);
        paymentModeCmbx.setSelectedItem("-");
        countyofResidenceCmbx.setSelectedIndex(-1);
        try {

            java.text.DateFormat df = java.text.DateFormat.getDateInstance();

            java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

            sdf.applyPattern("yyyy-MM-dd");
            java.sql.Statement stmtx2 = connectDB.createStatement();
            java.sql.ResultSet rsetx2 = stmtx2.executeQuery("SELECT CURRENT_DATE::DATE");
            try {
                while (rsetx2.next()) {
                    datePicker1.setDate(sdf.parse(rsetx2.getObject(1).toString()));
                }
            } catch (java.text.ParseException pe) {
                javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
            }
            java.sql.Statement stmtx = connectDB.createStatement();
            java.sql.ResultSet rsetx = stmtx.executeQuery("select ip_numbering,use_one_number from pb_patient_names");
            while (rsetx.next()) {
                autonumber = rsetx.getBoolean(1);
                useonenumber = rsetx.getString(2);
                java.sql.Statement pss1 = connectDB.createStatement();
                java.sql.ResultSet rss1 = pss1.executeQuery("select patient_no from hp_inpatient_register ORDER BY OID desc LIMIT 1");
                while (rss1.next()) {
                    // patientsNo = rss1.getObject(1).toString();
                    //   jTextField24.setText(rss1.getObject(1).toString());
                }
            }
            rsetx.close();
            stmtx.close();
            if (autonumber) {
                admissionNumberTxt.setEditable(false);

            } else {
                admissionNumberTxt.setEditable(true);
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("selection not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }
    }
}
