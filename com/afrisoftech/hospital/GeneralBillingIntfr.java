/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospital;

////import com.sun.star.lib.uno.environments.java.java_environment;
import java.awt.event.MouseEvent;
import org.jfree.xml.factory.objects.JavaBaseClassFactory;
import java.awt.event.*;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.*;
import org.openide.util.Exceptions;

/**
 *
 * @author root
 */
public class GeneralBillingIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    com.afrisoftech.lib.DBObject dbObject;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox3;
    private javax.swing.JComboBox cmbox4;
    java.sql.Connection connectDB = null;
    //  GeneralBillingIntfrcurr.SearchThreadchThread searchThread = null;
    //  GeneralBillingIntfrcurr.SearchServicesThreadrvicesThread searchServicesThread = null;
    com.afrisoftech.timeseries.YearyAgeing ageingSeries = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean DirectRev;
    DispatchThread dispatchThread;
    public static String transNo = null;
    boolean priceEdit = false;
    boolean rePrints = false;
    private String age;
    String payerTelephoneNumber = null;
    public static String checkoutRequestID = null;

    public GeneralBillingIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT edit_prices, re_prints FROM sales_prefs");
            java.sql.ResultSet rsetSales = pstmt.executeQuery();
            while (rsetSales.next()) {
                priceEdit = rsetSales.getBoolean(1);
                rePrints = rsetSales.getBoolean(2);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GeneralBillingIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        generalBillingPatientSearchDialog = new javax.swing.JDialog();
        patientDialogSearchPanel = new javax.swing.JPanel();
        patientSearchFieldTxt = new javax.swing.JTextField();
        patientSearchJscrl = new javax.swing.JScrollPane();
        patientSearchTbl = new com.afrisoftech.dbadmin.JTable();
        selectBtn = new javax.swing.JButton();
        disposeBtn = new javax.swing.JButton();
        serviceorcodeSearchDialog = new javax.swing.JDialog();
        serviceorcodeSearchPanel = new javax.swing.JPanel();
        serviceorcodeSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        serviceorcodeSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        patientSearchDialog = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton421 = new javax.swing.JButton();
        jButton521 = new javax.swing.JButton();
        consultantBillingServiceSearchDialog = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        doctorsSearchDialog = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        jButton911 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        inpatientRegisterSearchDialog = new javax.swing.JDialog();
        jSearchPanel211 = new javax.swing.JPanel();
        jTextField11311 = new javax.swing.JTextField();
        jSearchScrollPane211 = new javax.swing.JScrollPane();
        jSearchTable211 = new com.afrisoftech.dbadmin.JTable();
        jButton4211 = new javax.swing.JButton();
        jButton5211 = new javax.swing.JButton();
        servicesSearchDialog = new javax.swing.JDialog();
        jSearchPanel12 = new javax.swing.JPanel();
        jTextField1112 = new javax.swing.JTextField();
        jSearchScrollPane12 = new javax.swing.JScrollPane();
        jSearchTable12 = new com.afrisoftech.dbadmin.JTable();
        jButton912 = new javax.swing.JButton();
        doctorSearchDialog = new javax.swing.JDialog();
        jSearchPanel111 = new javax.swing.JPanel();
        jTextField11111 = new javax.swing.JTextField();
        jSearchScrollPane111 = new javax.swing.JScrollPane();
        jSearchTable111 = new com.afrisoftech.dbadmin.JTable();
        jButton9111 = new javax.swing.JButton();
        jSearchDialog3 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        generalBillingDoctorSearchDialog = new javax.swing.JDialog();
        jSearchPanel31 = new javax.swing.JPanel();
        jTextField1121 = new javax.swing.JTextField();
        jSearchScrollPane31 = new javax.swing.JScrollPane();
        jSearchTable31 = new com.afrisoftech.dbadmin.JTable();
        jButton921 = new javax.swing.JButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        schemesSearchDialog = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        packagesSearchDialog = new javax.swing.JDialog();
        packagesSearchPanel = new javax.swing.JPanel();
        packagesSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        packagesSearchTable = new com.afrisoftech.dbadmin.JTable();
        packagesCancelBtn = new javax.swing.JButton();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jCheckBox5 = new javax.swing.JCheckBox();
        genderButtonGroup = new javax.swing.ButtonGroup();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        billingPanel = new javax.swing.JTabbedPane();
        generalBillingPanel = new javax.swing.JPanel();
        billingTablesJscrl = new javax.swing.JScrollPane();
        packagesTbl = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        discreetServicesTbl = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            /*   boolean[] canEdit = new boolean [] {
                false, true, priceEdit, false, false
            };
            */
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        patientParticularsPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        patientCategoryTxt = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        revenueDepartmentCmbx = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        byNumberChkbx = new javax.swing.JCheckBox();
        byNameChkbx = new javax.swing.JCheckBox();
        jPanel42 = new javax.swing.JPanel();
        doctorAcctNumberTxt = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        doctorNameTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        paymentModeCmbx = new javax.swing.JComboBox();
        jPanel641 = new javax.swing.JPanel();
        searchButton3 = new javax.swing.JButton();
        schemeNameTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        schemeAccountNumberTxt = new javax.swing.JTextField();
        payerNameTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        unitNumberTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        schemeMemberNumberTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        schemeMemberNameTxt = new javax.swing.JTextField();
        cardBalanceTxt = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        glcodeTxt = new javax.swing.JTextField();
        subActivityTxt = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        wardNameTxt = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        billingStationTxt = new javax.swing.JTextField();
        maleChkbx = new javax.swing.JCheckBox();
        femaleChkbx = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        payerMobileTelephoneNumberTxt = new javax.swing.JFormattedTextField();
        jLabel53 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        billTotalTxt = new javax.swing.JTextField();
        billingActionButtonsPanel = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        savebillBtn = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        saveAndPrintBillBtn = new javax.swing.JButton();
        rePrintBillBtn = new javax.swing.JButton();
        removeRowBtn = new javax.swing.JButton();
        clearformDataBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        removePackageBtn = new javax.swing.JButton();
        readSmartCardBtn = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        chargeRatesCategoriesPanel = new javax.swing.JPanel();
        searchbyCodeChkbx = new javax.swing.JCheckBox();
        searchbyNameChkbx = new javax.swing.JCheckBox();
        back2ServicesTableChkbx = new javax.swing.JCheckBox();
        packageBillingChkbx = new javax.swing.JCheckBox();
        applyPackagesBillingChkbx = new javax.swing.JCheckBox();
        normalRateRbtn = new javax.swing.JRadioButton();
        specialRateRbtn = new javax.swing.JRadioButton();
        mergeOpBillBtn = new javax.swing.JButton();
        oldOPVisitDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel25 = new javax.swing.JLabel();
        patientSelectionModePanel = new javax.swing.JPanel();
        patientCheckBoxPanel = new javax.swing.JPanel();
        opdChkbx = new javax.swing.JCheckBox();
        ipdChkbx = new javax.swing.JCheckBox();
        walkinChkbx = new javax.swing.JCheckBox();
        mchfpChkbx = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        packageAmountTxt = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        imgPanel = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        bedAmountTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        consultantsBillingPanel = new javax.swing.JPanel();
        consultantBillingMainPanel = new javax.swing.JPanel();
        consultantBillingJscrl = new javax.swing.JScrollPane();
        consultantBillingTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jPanel21 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        consultantBillingPatientNameTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        consultantPatientCategoryTxt = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        consultantBillingPatientNoTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        consultantBillingPayModeTxt = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        consultantBillingRevenueDeptCmbx = new javax.swing.JComboBox();
        jLabel531 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jSeparator11 = new javax.swing.JSeparator();
        jLabel71 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton11 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jPanel111 = new javax.swing.JPanel();
        jPanel111.setVisible(false);
        jScrollPane211 = new javax.swing.JScrollPane();
        jTable111 = new com.afrisoftech.dbadmin.JTable();
        jPanel211 = new javax.swing.JPanel();
        jLabel911 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jTextField121 = new javax.swing.JTextField();
        jLabel211 = new javax.swing.JLabel();
        jLabel311 = new javax.swing.JLabel();
        jTextField211 = new javax.swing.JTextField();
        jTextField411 = new javax.swing.JTextField();
        jPanel411 = new javax.swing.JPanel();
        jTextField911 = new javax.swing.JTextField();
        searchButton11 = new javax.swing.JButton();
        jTextField51 = new javax.swing.JTextField();

        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select distinct main_service from pb_operating_parameters  where category = 'CA'");
            while (rset.next()){
                jTextField51.setText(rset.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }
        jTextField711 = new javax.swing.JTextField();
        jLabel411 = new javax.swing.JLabel();
        jLabel5311 = new javax.swing.JLabel();
        jTextField311 = new javax.swing.JTextField();
        jSeparator111 = new javax.swing.JSeparator();
        jLabel711 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton111 = new javax.swing.JButton();
        jButton611 = new javax.swing.JButton();
        jButton311 = new javax.swing.JButton();
        jButton411 = new javax.swing.JButton();
        jButton511 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox41 = new javax.swing.JCheckBox();
        jCheckBox61 = new javax.swing.JCheckBox();
        datePicker2 = new com.afrisoftech.lib.DatePicker();

        generalBillingPatientSearchDialog.setModal(true);
        generalBillingPatientSearchDialog.setUndecorated(true);
        generalBillingPatientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientDialogSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientDialogSearchPanel.setLayout(new java.awt.GridBagLayout());

        patientSearchFieldTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientSearchFieldTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientDialogSearchPanel.add(patientSearchFieldTxt, gridBagConstraints);

        patientSearchJscrl.setDoubleBuffered(true);

        patientSearchTbl.setToolTipText("Click on the target row to select the patient from the search.");
        patientSearchTbl.setDoubleBuffered(true);
        patientSearchTbl.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTbl.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientSearchTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientSearchTblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                patientSearchTblMouseEntered(evt);
            }
        });
        patientSearchJscrl.setViewportView(patientSearchTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        patientDialogSearchPanel.add(patientSearchJscrl, gridBagConstraints);

        selectBtn.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDialogSearchPanel.add(selectBtn, gridBagConstraints);

        disposeBtn.setText("Dispose");
        disposeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disposeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDialogSearchPanel.add(disposeBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        generalBillingPatientSearchDialog.getContentPane().add(patientDialogSearchPanel, gridBagConstraints);

        serviceorcodeSearchDialog.setModal(true);
        serviceorcodeSearchDialog.setUndecorated(true);
        serviceorcodeSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        serviceorcodeSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        serviceorcodeSearchPanel.setLayout(new java.awt.GridBagLayout());

        serviceorcodeSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                serviceorcodeSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        serviceorcodeSearchPanel.add(serviceorcodeSearchTxt, gridBagConstraints);

        jSearchScrollPane.setDoubleBuffered(true);

        serviceorcodeSearchTable.setDoubleBuffered(true);
        serviceorcodeSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        serviceorcodeSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serviceorcodeSearchTableMouseClicked(evt);
            }
        });
        serviceorcodeSearchTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serviceorcodeSearchTableKeyReleased(evt);
            }
        });
        jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        serviceorcodeSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        serviceorcodeSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        serviceorcodeSearchDialog.getContentPane().add(serviceorcodeSearchPanel, gridBagConstraints);

        patientSearchDialog.setModal(true);
        patientSearchDialog.setUndecorated(true);
        patientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTbl.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton421.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton421, gridBagConstraints);

        jButton521.setText("Close");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchDialog.getContentPane().add(jSearchPanel21, gridBagConstraints);

        consultantBillingServiceSearchDialog.setModal(true);
        consultantBillingServiceSearchDialog.setUndecorated(true);
        consultantBillingServiceSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Close");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        consultantBillingServiceSearchDialog.getContentPane().add(jSearchPanel1, gridBagConstraints);

        doctorsSearchDialog.setModal(true);
        doctorsSearchDialog.setUndecorated(true);
        doctorsSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable11MouseClicked(evt);
            }
        });
        jSearchScrollPane11.setViewportView(jSearchTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        jButton911.setText("Close");
        jButton911.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton911ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(jButton911, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        doctorsSearchDialog.getContentPane().add(jSearchPanel11, gridBagConstraints);

        inpatientRegisterSearchDialog.setModal(true);
        inpatientRegisterSearchDialog.setUndecorated(true);
        inpatientRegisterSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel211.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel211.setLayout(new java.awt.GridBagLayout());

        jTextField11311.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11311CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel211.add(jTextField11311, gridBagConstraints);

        jSearchTable211.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable211.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTbl.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable211.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable211MouseClicked(evt);
            }
        });
        jSearchScrollPane211.setViewportView(jSearchTable211);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel211.add(jSearchScrollPane211, gridBagConstraints);

        jButton4211.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel211.add(jButton4211, gridBagConstraints);

        jButton5211.setText("Close");
        jButton5211.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5211ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel211.add(jButton5211, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        inpatientRegisterSearchDialog.getContentPane().add(jSearchPanel211, gridBagConstraints);

        servicesSearchDialog.setModal(true);
        servicesSearchDialog.setUndecorated(true);
        servicesSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel12.setLayout(new java.awt.GridBagLayout());

        jTextField1112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel12.add(jTextField1112, gridBagConstraints);

        jSearchTable12.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable12MouseClicked(evt);
            }
        });
        jSearchScrollPane12.setViewportView(jSearchTable12);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel12.add(jSearchScrollPane12, gridBagConstraints);

        jButton912.setText("Close");
        jButton912.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton912ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel12.add(jButton912, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        servicesSearchDialog.getContentPane().add(jSearchPanel12, gridBagConstraints);

        doctorSearchDialog.setModal(true);
        doctorSearchDialog.setUndecorated(true);
        doctorSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel111.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel111.setLayout(new java.awt.GridBagLayout());

        jTextField11111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11111CaretUpdate(evt);
            }
        });
        jTextField11111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel111.add(jTextField11111, gridBagConstraints);

        jSearchTable111.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable111.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable111MouseClicked(evt);
            }
        });
        jSearchScrollPane111.setViewportView(jSearchTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel111.add(jSearchScrollPane111, gridBagConstraints);

        jButton9111.setText("Close");
        jButton9111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel111.add(jButton9111, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        doctorSearchDialog.getContentPane().add(jSearchPanel111, gridBagConstraints);

        jSearchDialog3.setModal(true);
        jSearchDialog3.setUndecorated(true);
        jSearchDialog3.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField112, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog3.getContentPane().add(jSearchPanel3, gridBagConstraints);

        generalBillingDoctorSearchDialog.setModal(true);
        generalBillingDoctorSearchDialog.setUndecorated(true);
        generalBillingDoctorSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel31.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel31.setLayout(new java.awt.GridBagLayout());

        jTextField1121.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1121CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel31.add(jTextField1121, gridBagConstraints);

        jSearchTable31.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable31MouseClicked(evt);
            }
        });
        jSearchScrollPane31.setViewportView(jSearchTable31);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel31.add(jSearchScrollPane31, gridBagConstraints);

        jButton921.setText("Close");
        jButton921.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton921ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel31.add(jButton921, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        generalBillingDoctorSearchDialog.getContentPane().add(jSearchPanel31, gridBagConstraints);

        schemesSearchDialog.setModal(true);
        schemesSearchDialog.setUndecorated(true);
        schemesSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel13.setLayout(new java.awt.GridBagLayout());

        jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel13.add(jTextField1113, gridBagConstraints);

        jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable13.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = serviceorcodeSearchTable.getModel();

                jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = serviceorcodeSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable13MouseClicked(evt);
                }
            });
            jSearchScrollPane13.setViewportView(jSearchTable13);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel13.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            schemesSearchDialog.getContentPane().add(jSearchPanel13, gridBagConstraints);

            packagesSearchDialog.setModal(true);
            packagesSearchDialog.setUndecorated(true);
            packagesSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            packagesSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            packagesSearchPanel.setLayout(new java.awt.GridBagLayout());

            packagesSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    packagesSearchTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 100.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            packagesSearchPanel.add(packagesSearchTxt, gridBagConstraints);

            jSearchScrollPane4.setDoubleBuffered(true);

            packagesSearchTable.setDoubleBuffered(true);
            packagesSearchTable.setShowHorizontalLines(false);
            /*    try {
                searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
                searchRowSet.setConnectionSource(pConnDB);

                searchRowSet.execute();

                // crset2.setExecuteOnLoad(true);
                serviceorcodeSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

                }));
                // jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

            } catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }
            */
            packagesSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    packagesSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane4.setViewportView(packagesSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            packagesSearchPanel.add(jSearchScrollPane4, gridBagConstraints);

            packagesCancelBtn.setText("Cancel");
            packagesCancelBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    packagesCancelBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            packagesSearchPanel.add(packagesCancelBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            packagesSearchDialog.getContentPane().add(packagesSearchPanel, gridBagConstraints);

            jCheckBox5.setText("Confirm Visit");
            jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox5ActionPerformed(evt);
                }
            });

            setClosable(true);
            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            setTitle("General Billing for Services and Items");
            setFrameIcon(null);
            try {
                setSelected(true);
            } catch (java.beans.PropertyVetoException e1) {
                e1.printStackTrace();
            }
            setVisible(true);
            addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    formKeyPressed(evt);
                }
            });
            getContentPane().setLayout(new java.awt.GridBagLayout());

            jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jLabel7, gridBagConstraints);

            jTextField6.setEditable(false);
            jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            getContentPane().add(jTextField6, gridBagConstraints);

            generalBillingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            generalBillingPanel.setLayout(new java.awt.GridBagLayout());

            packagesTbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            packagesTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null}
                },
                new String [] {
                    "Packages", "Qty", "Rate", "Total", "GL Code"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });
            packagesTbl.setShowHorizontalLines(false);
            javax.swing.table.TableColumn columnPackages = null;
            for (int i = 0; i < 5; i++) {
                columnPackages = packagesTbl.getColumnModel().getColumn(i);
                if (i == 0) {

                    columnPackages.setPreferredWidth(500); //sport column is bigger
                } else {
                    if(i == 1){
                        columnPackages.setPreferredWidth(50);
                    }else{
                        if(i == 5){
                            columnPackages.setPreferredWidth(250);
                        }else{
                            //if (i == 2) {
                                columnPackages.setPreferredWidth(100);
                                // }  else
                            //column.setPreferredWidth(50);
                        }
                    }
                }
            }
            packagesTbl.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    packagesTblMouseClicked(evt);
                }
            });
            packagesTbl.addInputMethodListener(new java.awt.event.InputMethodListener() {
                public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                    packagesTblCaretPositionChanged(evt);
                }
                public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                }
            });
            packagesTbl.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    packagesTblKeyPressed(evt);
                }
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    packagesTblKeyReleased(evt);
                }
            });
            billingTablesJscrl.setViewportView(packagesTbl);

            discreetServicesTbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            discreetServicesTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null}
                },
                new String [] {
                    "Service", "Quantity", "Price", "Total", "GL Code"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            discreetServicesTbl.setGridColor(new java.awt.Color(204, 204, 255));
            discreetServicesTbl.setRowHeight(22);
            javax.swing.table.TableColumn column = null;
            for (int i = 0; i < 5; i++) {
                column = discreetServicesTbl.getColumnModel().getColumn(i);
                if (i == 0) {

                    column.setPreferredWidth(500); //sport column is bigger
                } else {
                    if(i == 1){
                        column.setPreferredWidth(50);
                    }else{
                        if(i == 5){
                            column.setPreferredWidth(250);
                        }else{
                            //if (i == 2) {
                                column.setPreferredWidth(100);
                                // }  else
                            //column.setPreferredWidth(50);
                        }
                    }
                }
            }
            discreetServicesTbl.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    discreetServicesTblMouseClicked(evt);
                }
            });
            discreetServicesTbl.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    discreetServicesTblKeyReleased(evt);
                }
            });
            billingTablesJscrl.setViewportView(discreetServicesTbl);
            discreetServicesTbl.getAccessibleContext().setAccessibleParent(billingTablesJscrl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 100;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 500.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
            generalBillingPanel.add(billingTablesJscrl, gridBagConstraints);

            patientParticularsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select patient here. (The highlighted fields are mandatory)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));
            patientParticularsPanel.setLayout(new java.awt.GridBagLayout());

            jLabel9.setForeground(new java.awt.Color(255, 0, 51));
            jLabel9.setText("Patient No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel9, gridBagConstraints);

            jLabel1.setForeground(new java.awt.Color(255, 0, 51));
            jLabel1.setText("Patient Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel1, gridBagConstraints);

            patientNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(patientNameTxt, gridBagConstraints);

            jLabel2.setForeground(new java.awt.Color(255, 0, 51));
            jLabel2.setText("Revenue Dep.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel2, gridBagConstraints);

            jLabel3.setText("Patient Category");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel3, gridBagConstraints);

            patientCategoryTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(patientCategoryTxt, gridBagConstraints);

            jTextField4.setEditable(false);
            jTextField4.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField4.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(jTextField4, gridBagConstraints);

            revenueDepartmentCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT department FROM department_allocation WHERE user_name ilike current_user ORDER BY 1"));
            revenueDepartmentCmbx.setMinimumSize(new java.awt.Dimension(32, 20));
            revenueDepartmentCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    revenueDepartmentCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(revenueDepartmentCmbx, gridBagConstraints);

            jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel4.setMinimumSize(new java.awt.Dimension(54, 57));
            jPanel4.setPreferredSize(new java.awt.Dimension(50, 40));
            jPanel4.setLayout(new java.awt.GridBagLayout());

            patientNumberTxt.setEditable(false);
            patientNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Please type at least 6 characters"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 100.0;
            gridBagConstraints.weighty = 1.0;
            jPanel4.add(patientNumberTxt, gridBagConstraints);

            searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
            searchButton.setToolTipText("Search");
            searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton.setMinimumSize(new java.awt.Dimension(20, 53));
            searchButton.setPreferredSize(new java.awt.Dimension(50, 19));
            searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel4.add(searchButton, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(jPanel4, gridBagConstraints);

            jLabel4.setText("Payment Mode");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel4, gridBagConstraints);

            buttonGroup2.add(byNumberChkbx);
            byNumberChkbx.setSelected(true);
            byNumberChkbx.setText("Search By  No.");
            byNumberChkbx.setMinimumSize(new java.awt.Dimension(112, 20));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            patientParticularsPanel.add(byNumberChkbx, gridBagConstraints);

            buttonGroup2.add(byNameChkbx);
            byNameChkbx.setText("Search By Name");
            byNameChkbx.setMinimumSize(new java.awt.Dimension(123, 20));
            patientParticularsPanel.add(byNameChkbx, new java.awt.GridBagConstraints());

            jPanel42.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel42.setMinimumSize(new java.awt.Dimension(33, 20));
            jPanel42.setPreferredSize(new java.awt.Dimension(28, 20));
            jPanel42.setLayout(new java.awt.GridBagLayout());

            doctorAcctNumberTxt.setEditable(false);
            doctorAcctNumberTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    doctorAcctNumberTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 100.0;
            gridBagConstraints.weighty = 1.0;
            jPanel42.add(doctorAcctNumberTxt, gridBagConstraints);

            searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
            searchButton2.setToolTipText("Search");
            searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton2.setMinimumSize(new java.awt.Dimension(20, 19));
            searchButton2.setPreferredSize(new java.awt.Dimension(15, 19));
            searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel42.add(searchButton2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(jPanel42, gridBagConstraints);

            jLabel8.setText("Doctor's Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel8, gridBagConstraints);

            jLabel10.setText("Doctor No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel10, gridBagConstraints);

            doctorNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(doctorNameTxt, gridBagConstraints);

            jLabel12.setText("Scheme Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel12, gridBagConstraints);

            paymentModeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT payment_mode FROM pb_paymentmodes ORDER BY 1")
            );
            paymentModeCmbx.setEnabled(false);
            paymentModeCmbx.setMinimumSize(new java.awt.Dimension(75, 20));
            paymentModeCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    paymentModeCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(paymentModeCmbx, gridBagConstraints);

            jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
            jPanel641.setPreferredSize(new java.awt.Dimension(42, 20));
            jPanel641.setLayout(new java.awt.GridBagLayout());

            searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
            searchButton3.setToolTipText("Search");
            searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton3.setMaximumSize(new java.awt.Dimension(14, 53));
            searchButton3.setMinimumSize(new java.awt.Dimension(20, 53));
            searchButton3.setPreferredSize(new java.awt.Dimension(40, 20));
            searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(searchButton3, gridBagConstraints);

            schemeNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 100.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(schemeNameTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(jPanel641, gridBagConstraints);

            jLabel13.setText("Payer Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel13, gridBagConstraints);

            schemeAccountNumberTxt.setEditable(false);
            schemeAccountNumberTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    schemeAccountNumberTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(schemeAccountNumberTxt, gridBagConstraints);

            payerNameTxt.setEditable(false);
            payerNameTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    payerNameTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(payerNameTxt, gridBagConstraints);

            jLabel14.setText("Scheme A/C No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel14, gridBagConstraints);

            jLabel18.setText("Unit/Tel. Number");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel18, gridBagConstraints);

            jLabel15.setText("A/C Code");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel15, gridBagConstraints);

            unitNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(unitNumberTxt, gridBagConstraints);

            jLabel19.setText("Member No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel19, gridBagConstraints);

            schemeMemberNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(schemeMemberNumberTxt, gridBagConstraints);

            jLabel20.setText("Member Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel20, gridBagConstraints);

            jLabel22.setText("Card Balance");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel22, gridBagConstraints);

            schemeMemberNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(schemeMemberNameTxt, gridBagConstraints);

            cardBalanceTxt.setEditable(false);
            cardBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            cardBalanceTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(cardBalanceTxt, gridBagConstraints);

            jPanel12.setLayout(new java.awt.GridBagLayout());

            glcodeTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel12.add(glcodeTxt, gridBagConstraints);

            subActivityTxt.setEditable(false);
            subActivityTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            subActivityTxt.setMinimumSize(new java.awt.Dimension(2, 7));
            subActivityTxt.setPreferredSize(new java.awt.Dimension(2, 19));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel12.add(subActivityTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(jPanel12, gridBagConstraints);

            jLabel24.setText("Ward Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel24, gridBagConstraints);

            wardNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientParticularsPanel.add(wardNameTxt, gridBagConstraints);

            jLabel26.setText("Billing Station");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel26, gridBagConstraints);

            billingStationTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(billingStationTxt, gridBagConstraints);

            genderButtonGroup.add(maleChkbx);
            maleChkbx.setText("Male");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(maleChkbx, gridBagConstraints);

            genderButtonGroup.add(femaleChkbx);
            femaleChkbx.setText("Female");
            femaleChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    femaleChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(femaleChkbx, gridBagConstraints);

            jLabel27.setText("Indicate Gender");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            patientParticularsPanel.add(jLabel27, gridBagConstraints);

            payerMobileTelephoneNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bill Payer Telephone No.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));
            payerMobileTelephoneNumberTxt.setForeground(new java.awt.Color(0, 0, 255));
            try {
                payerMobileTelephoneNumberTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("254-7##-######")));
            } catch (java.text.ParseException ex) {
                ex.printStackTrace();
            }
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            patientParticularsPanel.add(payerMobileTelephoneNumberTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(patientParticularsPanel, gridBagConstraints);

            jLabel53.setText("Charge Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(jLabel53, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
            gridBagConstraints.weightx = 1.0;
            generalBillingPanel.add(jSeparator1, gridBagConstraints);

            billTotalTxt.setEditable(false);
            billTotalTxt.setForeground(new java.awt.Color(255, 0, 51));
            billTotalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            billTotalTxt.setText("0.00");
            billTotalTxt.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    billTotalTxtPropertyChange(evt);
                }
            });
            billTotalTxt.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
                public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                    billTotalTxtVetoableChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 5.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            generalBillingPanel.add(billTotalTxt, gridBagConstraints);

            billingActionButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            billingActionButtonsPanel.setMinimumSize(new java.awt.Dimension(100, 220));
            billingActionButtonsPanel.setPreferredSize(new java.awt.Dimension(100, 220));
            billingActionButtonsPanel.setLayout(new java.awt.GridBagLayout());

            savebillBtn.setMnemonic('s');
            savebillBtn.setText("Save >> XML");
            savebillBtn.setToolTipText("Click here enter data");
            savebillBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    savebillBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(savebillBtn, gridBagConstraints);

            saveAndPrintBillBtn.setMnemonic('R');
            saveAndPrintBillBtn.setText("Save & Print");
            saveAndPrintBillBtn.setToolTipText("Click here enter data");
            saveAndPrintBillBtn.setEnabled(false);
            saveAndPrintBillBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    saveAndPrintBillBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(saveAndPrintBillBtn, gridBagConstraints);

            rePrintBillBtn.setText("Re-Print");
            rePrintBillBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    rePrintBillBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(rePrintBillBtn, gridBagConstraints);

            removeRowBtn.setMnemonic('r');
            removeRowBtn.setText("Remove row");
            removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    removeRowBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(removeRowBtn, gridBagConstraints);

            clearformDataBtn.setMnemonic('l');
            clearformDataBtn.setText("Clear data");
            clearformDataBtn.setToolTipText("Click here to clear textfields");
            clearformDataBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    clearformDataBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(clearformDataBtn, gridBagConstraints);

            closeFormBtn.setMnemonic('C');
            closeFormBtn.setText("Close form");
            closeFormBtn.setToolTipText("Click here to close window");
            closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    closeFormBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(closeFormBtn, gridBagConstraints);

            removePackageBtn.setMnemonic('h');
            removePackageBtn.setText("Remove Package Row");
            removePackageBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    removePackageBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(removePackageBtn, gridBagConstraints);

            readSmartCardBtn.setMnemonic('h');
            readSmartCardBtn.setText("Read Card");
            readSmartCardBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    readSmartCardBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(readSmartCardBtn, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 5.0;
            billingActionButtonsPanel.add(spacerPanel, gridBagConstraints);

            jButton1.setText("Summarized Bill");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(jButton1, gridBagConstraints);

            jButton2.setText("Detailed Bill");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            billingActionButtonsPanel.add(jButton2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 7;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.gridheight = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 3;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(billingActionButtonsPanel, gridBagConstraints);

            chargeRatesCategoriesPanel.setLayout(new java.awt.GridBagLayout());

            buttonGroup3.add(searchbyCodeChkbx);
            searchbyCodeChkbx.setText("Search By Code");
            searchbyCodeChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            searchbyCodeChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
            searchbyCodeChkbx.setMinimumSize(new java.awt.Dimension(120, 20));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
            chargeRatesCategoriesPanel.add(searchbyCodeChkbx, gridBagConstraints);

            buttonGroup3.add(searchbyNameChkbx);
            searchbyNameChkbx.setSelected(true);
            searchbyNameChkbx.setText("Search By Name");
            searchbyNameChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            searchbyNameChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
            searchbyNameChkbx.setMinimumSize(new java.awt.Dimension(123, 20));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
            chargeRatesCategoriesPanel.add(searchbyNameChkbx, gridBagConstraints);

            back2ServicesTableChkbx.setBackground(new java.awt.Color(153, 255, 102));
            buttonGroup5.add(back2ServicesTableChkbx);
            back2ServicesTableChkbx.setSelected(true);
            back2ServicesTableChkbx.setText("General Billing");
            back2ServicesTableChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            back2ServicesTableChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
            back2ServicesTableChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    back2ServicesTableChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            chargeRatesCategoriesPanel.add(back2ServicesTableChkbx, gridBagConstraints);

            packageBillingChkbx.setBackground(new java.awt.Color(255, 204, 204));
            buttonGroup5.add(packageBillingChkbx);
            packageBillingChkbx.setText("Package Billing");
            packageBillingChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            packageBillingChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
            packageBillingChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    packageBillingChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            chargeRatesCategoriesPanel.add(packageBillingChkbx, gridBagConstraints);

            applyPackagesBillingChkbx.setBackground(new java.awt.Color(255, 204, 102));
            buttonGroup5.add(applyPackagesBillingChkbx);
            applyPackagesBillingChkbx.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
            applyPackagesBillingChkbx.setForeground(new java.awt.Color(0, 0, 204));
            applyPackagesBillingChkbx.setText("View Detailed Bill");
            applyPackagesBillingChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            applyPackagesBillingChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
            applyPackagesBillingChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    applyPackagesBillingChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            chargeRatesCategoriesPanel.add(applyPackagesBillingChkbx, gridBagConstraints);

            buttonGroup4.add(normalRateRbtn);
            normalRateRbtn.setSelected(true);
            normalRateRbtn.setText("Normal Rate");
            normalRateRbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            normalRateRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            normalRateRbtn.setIconTextGap(25);
            normalRateRbtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            chargeRatesCategoriesPanel.add(normalRateRbtn, gridBagConstraints);

            buttonGroup4.add(specialRateRbtn);
            specialRateRbtn.setText("Special Rate");
            specialRateRbtn.setActionCommand("    Special Rate");
            specialRateRbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            specialRateRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            specialRateRbtn.setIconTextGap(28);
            specialRateRbtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
            chargeRatesCategoriesPanel.add(specialRateRbtn, gridBagConstraints);

            mergeOpBillBtn.setText("Merge OP Bill");
            mergeOpBillBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    mergeOpBillBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            chargeRatesCategoriesPanel.add(mergeOpBillBtn, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            chargeRatesCategoriesPanel.add(oldOPVisitDatePicker, gridBagConstraints);

            jLabel25.setText("  OP Visit Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            chargeRatesCategoriesPanel.add(jLabel25, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            generalBillingPanel.add(chargeRatesCategoriesPanel, gridBagConstraints);

            patientSelectionModePanel.setLayout(new java.awt.GridBagLayout());

            patientCheckBoxPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 153)));
            patientCheckBoxPanel.setMinimumSize(new java.awt.Dimension(258, 20));
            patientCheckBoxPanel.setLayout(new java.awt.GridBagLayout());

            buttonGroup1.add(opdChkbx);
            opdChkbx.setForeground(new java.awt.Color(51, 51, 255));
            opdChkbx.setMnemonic('o');
            opdChkbx.setText("OUT- Patients");
            opdChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    opdChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientCheckBoxPanel.add(opdChkbx, gridBagConstraints);

            buttonGroup1.add(ipdChkbx);
            ipdChkbx.setMnemonic('i');
            ipdChkbx.setSelected(true);
            ipdChkbx.setText("IN-Patients");
            ipdChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ipdChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientCheckBoxPanel.add(ipdChkbx, gridBagConstraints);

            buttonGroup1.add(walkinChkbx);
            walkinChkbx.setForeground(new java.awt.Color(153, 0, 153));
            walkinChkbx.setText("Walk-IN");
            walkinChkbx.setEnabled(false);
            walkinChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    walkinChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientCheckBoxPanel.add(walkinChkbx, gridBagConstraints);

            buttonGroup1.add(mchfpChkbx);
            mchfpChkbx.setText("MCH/FP");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientCheckBoxPanel.add(mchfpChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            patientSelectionModePanel.add(patientCheckBoxPanel, gridBagConstraints);

            jLabel5.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            patientSelectionModePanel.add(jLabel5, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientSelectionModePanel.add(datePicker1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(patientSelectionModePanel, gridBagConstraints);

            packageAmountTxt.setEditable(false);
            packageAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            packageAmountTxt.setText("0.00");
            packageAmountTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    packageAmountTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 5.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            generalBillingPanel.add(packageAmountTxt, gridBagConstraints);

            jLabel54.setText("Package Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(jLabel54, gridBagConstraints);

            jLabel16.setText("Bill Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(jLabel16, gridBagConstraints);

            imgPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            imgPanel.setLayout(new java.awt.GridBagLayout());
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            imgPanel.add(jLabel17, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            generalBillingPanel.add(imgPanel, gridBagConstraints);

            bedAmountTxt.setEditable(false);
            bedAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            bedAmountTxt.setText("0.00");
            bedAmountTxt.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    bedAmountTxtPropertyChange(evt);
                }
            });
            bedAmountTxt.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
                public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                    bedAmountTxtVetoableChange(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 5.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            generalBillingPanel.add(bedAmountTxt, gridBagConstraints);

            jLabel23.setText("Bed Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            generalBillingPanel.add(jLabel23, gridBagConstraints);

            billingPanel.addTab("General", generalBillingPanel);

            consultantsBillingPanel.setLayout(new java.awt.GridBagLayout());

            consultantBillingMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select patient here"));
            consultantBillingMainPanel.setLayout(new java.awt.GridBagLayout());

            consultantBillingTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null}
                },
                new String [] {
                    "Service", "Quantity", "Price", "Total", "Gl Account", "Doctor"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, true, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            consultantBillingTable.setGridColor(new java.awt.Color(204, 204, 255));
            javax.swing.table.TableColumn column1 = null;
            for (int i = 0; i < 5; i++) {
                column1 = consultantBillingTable.getColumnModel().getColumn(i);
                if (i == 0) {

                    column1.setPreferredWidth(300); //sport column is bigger
                } else {

                    //if (i == 2) {
                        column1.setPreferredWidth(150);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
            consultantBillingTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    consultantBillingTableMouseClicked(evt);
                }
            });
            consultantBillingTable.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    consultantBillingTableKeyReleased(evt);
                }
            });
            consultantBillingJscrl.setViewportView(consultantBillingTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 10;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 100.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
            consultantBillingMainPanel.add(consultantBillingJscrl, gridBagConstraints);

            jPanel21.setLayout(new java.awt.GridBagLayout());

            jLabel91.setText("Patient No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel21.add(jLabel91, gridBagConstraints);

            jLabel11.setText("Patient Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel21.add(jLabel11, gridBagConstraints);

            consultantBillingPatientNameTxt.setEditable(false);
            consultantBillingPatientNameTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    consultantBillingPatientNameTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel21.add(consultantBillingPatientNameTxt, gridBagConstraints);

            jLabel21.setText("Revenue Dep.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel21.add(jLabel21, gridBagConstraints);

            jLabel31.setText("Patient Category");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel21.add(jLabel31, gridBagConstraints);

            consultantPatientCategoryTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel21.add(consultantPatientCategoryTxt, gridBagConstraints);

            jTextField41.setEditable(false);
            jTextField41.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField41.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jTextField41, gridBagConstraints);

            jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel41.setLayout(new java.awt.GridBagLayout());

            consultantBillingPatientNoTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel41.add(consultantBillingPatientNoTxt, gridBagConstraints);

            searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton1.setToolTipText("Search");
            searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
            jPanel41.add(searchButton1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jPanel41, gridBagConstraints);

            consultantBillingPayModeTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel21.add(consultantBillingPayModeTxt, gridBagConstraints);

            jLabel41.setText("Payment Mode");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel21.add(jLabel41, gridBagConstraints);

            consultantBillingRevenueDeptCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION ALL SELECT main_service from pb_operating_parameters WHERE category = 'CA' ORDER BY 1"));
            consultantBillingRevenueDeptCmbx.setMinimumSize(new java.awt.Dimension(32, 20));
            consultantBillingRevenueDeptCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    consultantBillingRevenueDeptCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(consultantBillingRevenueDeptCmbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 50.0;
            consultantBillingMainPanel.add(jPanel21, gridBagConstraints);

            jLabel531.setText("Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            consultantBillingMainPanel.add(jLabel531, gridBagConstraints);

            jTextField31.setEditable(false);
            jTextField31.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField31.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 40);
            consultantBillingMainPanel.add(jTextField31, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
            gridBagConstraints.weightx = 1.0;
            consultantBillingMainPanel.add(jSeparator11, gridBagConstraints);

            jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            consultantBillingMainPanel.add(jLabel71, gridBagConstraints);

            jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel7.setLayout(new java.awt.GridBagLayout());

            jButton11.setMnemonic('O');
            jButton11.setText("Save");
            jButton11.setToolTipText("Click here enter data");
            jButton11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel7.add(jButton11, gridBagConstraints);

            jButton61.setMnemonic('r');
            jButton61.setText("Remove Row");
            jButton61.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton61ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            jPanel7.add(jButton61, gridBagConstraints);

            jButton31.setMnemonic('l');
            jButton31.setText("Clear");
            jButton31.setToolTipText("Click here to clear textfields");
            jButton31.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton31ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel7.add(jButton31, gridBagConstraints);

            jButton41.setMnemonic('C');
            jButton41.setText("Close");
            jButton41.setToolTipText("Click here to close window");
            jButton41.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton41ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel7.add(jButton41, gridBagConstraints);

            jButton51.setMnemonic('h');
            jButton51.setText("Help");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel7.add(jButton51, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            consultantBillingMainPanel.add(jPanel7, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 100.0;
            consultantsBillingPanel.add(consultantBillingMainPanel, gridBagConstraints);

            jPanel111.setBorder(javax.swing.BorderFactory.createTitledBorder("Select patient here"));
            jPanel111.setLayout(new java.awt.GridBagLayout());

            jTable111.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null}
                },
                new String [] {
                    "Service", "Quatity", "Price", "Total", "Gl Account", "Doctor"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, true, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            jTable111.setGridColor(new java.awt.Color(204, 204, 255));
            jTable111.setShowHorizontalLines(false);
            javax.swing.table.TableColumn column111 = null;
            for (int i = 0; i < 5; i++) {
                column111 = jTable111.getColumnModel().getColumn(i);
                if (i == 0) {

                    column111.setPreferredWidth(300); //sport column is bigger
                } else {

                    //if (i == 2) {
                        column111.setPreferredWidth(150);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
            jTable111.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable111MouseClicked(evt);
                }
            });
            jTable111.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    jTable111KeyReleased(evt);
                }
            });
            jScrollPane211.setViewportView(jTable111);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.ipady = 10;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 5.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
            jPanel111.add(jScrollPane211, gridBagConstraints);

            jPanel211.setLayout(new java.awt.GridBagLayout());

            jLabel911.setText("Patient No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel211.add(jLabel911, gridBagConstraints);

            jLabel111.setText("Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel211.add(jLabel111, gridBagConstraints);

            jTextField121.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel211.add(jTextField121, gridBagConstraints);

            jLabel211.setText("Revenue Dep.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            jPanel211.add(jLabel211, gridBagConstraints);

            jLabel311.setText("Patient Category");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            jPanel211.add(jLabel311, gridBagConstraints);

            jTextField211.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel211.add(jTextField211, gridBagConstraints);

            jTextField411.setEditable(false);
            jTextField411.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField411.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel211.add(jTextField411, gridBagConstraints);

            jPanel411.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel411.setLayout(new java.awt.GridBagLayout());

            jTextField911.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel411.add(jTextField911, gridBagConstraints);

            searchButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton11.setToolTipText("Search");
            searchButton11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton11.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton11.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel411.add(searchButton11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel211.add(jPanel411, gridBagConstraints);

            jTextField51.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel211.add(jTextField51, gridBagConstraints);

            jTextField711.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel211.add(jTextField711, gridBagConstraints);

            jLabel411.setText("Payment Mode");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            jPanel211.add(jLabel411, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel111.add(jPanel211, gridBagConstraints);

            jLabel5311.setText("Amount KShs.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel111.add(jLabel5311, gridBagConstraints);

            jTextField311.setEditable(false);
            jTextField311.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField311.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 10);
            jPanel111.add(jTextField311, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
            gridBagConstraints.weightx = 1.0;
            jPanel111.add(jSeparator111, gridBagConstraints);

            jLabel711.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel111.add(jLabel711, gridBagConstraints);

            jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel8.setLayout(new java.awt.GridBagLayout());

            jButton111.setMnemonic('O');
            jButton111.setText("Save");
            jButton111.setToolTipText("Click here enter data");
            jButton111.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton111ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(jButton111, gridBagConstraints);

            jButton611.setMnemonic('r');
            jButton611.setText("Remove Row");
            jButton611.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton611ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            jPanel8.add(jButton611, gridBagConstraints);

            jButton311.setMnemonic('l');
            jButton311.setText("Clear");
            jButton311.setToolTipText("Click here to clear textfields");
            jButton311.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton311ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(jButton311, gridBagConstraints);

            jButton411.setMnemonic('C');
            jButton411.setText("Close");
            jButton411.setToolTipText("Click here to close window");
            jButton411.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton411ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(jButton411, gridBagConstraints);

            jButton511.setMnemonic('h');
            jButton511.setText("Help");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(jButton511, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel111.add(jPanel8, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            consultantsBillingPanel.add(jPanel111, gridBagConstraints);

            jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 153)));
            jPanel3.setLayout(new java.awt.GridBagLayout());

            buttonGroup1.add(jCheckBox1);
            jCheckBox1.setForeground(new java.awt.Color(51, 51, 255));
            jCheckBox1.setMnemonic('o');
            jCheckBox1.setText("Out Patients");
            jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel3.add(jCheckBox1, gridBagConstraints);

            buttonGroup1.add(jCheckBox2);
            jCheckBox2.setForeground(new java.awt.Color(255, 0, 51));
            jCheckBox2.setMnemonic('i');
            jCheckBox2.setText("InPatients");
            jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jCheckBox2, gridBagConstraints);

            jLabel6.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            jPanel3.add(jLabel6, gridBagConstraints);

            buttonGroup2.add(jCheckBox31);
            jCheckBox31.setText("Search By  No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel3.add(jCheckBox31, gridBagConstraints);

            buttonGroup2.add(jCheckBox41);
            jCheckBox41.setText("Search By Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jCheckBox41, gridBagConstraints);

            buttonGroup1.add(jCheckBox61);
            jCheckBox61.setForeground(new java.awt.Color(153, 0, 153));
            jCheckBox61.setText("Others");
            jCheckBox61.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox61ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jCheckBox61, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(datePicker2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 10.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
            consultantsBillingPanel.add(jPanel3, gridBagConstraints);

            billingPanel.addTab("Consultancy Ledger", consultantsBillingPanel);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(billingPanel, gridBagConstraints);

            setBounds(0, 0, 850, 506);
        }// </editor-fold>//GEN-END:initComponents

    private void packageAmountTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packageAmountTxtActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_packageAmountTxtActionPerformed

    private void billTotalTxtVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_billTotalTxtVetoableChange
// TODO add your handling code here:
    }//GEN-LAST:event_billTotalTxtVetoableChange

    private void billTotalTxtPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_billTotalTxtPropertyChange
// TODO add your handling code here:
    }//GEN-LAST:event_billTotalTxtPropertyChange

    private void readSmartCardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readSmartCardBtnActionPerformed
        com.afrisoftech.hospital.GeneralBillingIntfr.unitNumberTxt.setText("");
        com.afrisoftech.hospital.GeneralBillingIntfr.schemeMemberNumberTxt.setText("");
        com.afrisoftech.hospital.GeneralBillingIntfr.schemeMemberNameTxt.setText("");
        com.afrisoftech.hospital.GeneralBillingIntfr.cardBalanceTxt.setText("");

        java.io.File xmlDocFile = null;

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        biz.systempartners.claims.XMLClaimFile claimFile = new biz.systempartners.claims.XMLClaimFile();

        claimFile.processFile(xmlDocFile);

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        javax.swing.JOptionPane.showMessageDialog(this, "Smart Card read successfully with identity:\nCard Number :[" + claimFile.cardNumber + "] and Name : [" + claimFile.patientSurName + " " + claimFile.patientForenames + "]");

        com.afrisoftech.hospital.GeneralBillingIntfr.unitNumberTxt.setText(claimFile.medicalAidCode);
        com.afrisoftech.hospital.GeneralBillingIntfr.schemeMemberNumberTxt.setText(claimFile.medicalAidNumber);
        com.afrisoftech.hospital.GeneralBillingIntfr.schemeMemberNameTxt.setText(claimFile.patientSurName + " " + claimFile.patientForenames);
        com.afrisoftech.hospital.GeneralBillingIntfr.cardBalanceTxt.setText(claimFile.cardBalance);
        if (schemeMemberNumberTxt.getText().equalsIgnoreCase("")) {
            schemeMemberNameTxt.setText("");
        } else {
            try {

                java.sql.Statement st1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = st1.executeQuery("select account_no,scheme_name,payer_name FROM ac_schemes WHERE sch_abbrev ILIKE '" + claimFile.medicalAidCode + "'");
                while (rsetTable1.next()) {

                    schemeNameTxt.setText(rsetTable1.getString(2));
                    schemeAccountNumberTxt.setText(rsetTable1.getString(1));
                    payerNameTxt.setText(rsetTable1.getString(3));
                }
                savebillBtn.setEnabled(true);
                //  saveAndPrintBillBtn.setEnabled(true);
                rePrintBillBtn.setEnabled(false);
                readSmartCardBtn.setEnabled(false);
                //javax.swing.JOptionPane.showMessageDialog(this,"You must retrieve from smart link","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_readSmartCardBtnActionPerformed

    private void applyPackagesBillingChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyPackagesBillingChkbxActionPerformed

        this.invalidate();
        discreetServicesTbl.grabFocus();
        this.discreetServicesTbl.setVisible(true);
        this.jLabel54.setVisible(false);
        this.packageAmountTxt.setVisible(false);
        this.removePackageBtn.setVisible(false);
        //  jPanel2.setVisible(true);

        this.billingTablesJscrl.setViewportView(discreetServicesTbl);
        this.validate();
    }//GEN-LAST:event_applyPackagesBillingChkbxActionPerformed

    private void back2ServicesTableChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back2ServicesTableChkbxActionPerformed
        this.invalidate();
        discreetServicesTbl.grabFocus();
        this.discreetServicesTbl.setVisible(true);
        this.jLabel54.setVisible(false);
        this.packageAmountTxt.setVisible(false);
        this.removePackageBtn.setVisible(false);
        //  jPanel2.setVisible(true);

        this.billingTablesJscrl.setViewportView(discreetServicesTbl);
        this.validate();// TODO add your handling code here:
    }//GEN-LAST:event_back2ServicesTableChkbxActionPerformed

    private void packageBillingChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packageBillingChkbxActionPerformed

        this.invalidate();
        packagesTbl.grabFocus();
        this.packagesTbl.setVisible(true);
        this.jLabel54.setVisible(false);
        this.packageAmountTxt.setVisible(false);
        // this.removePackageBtn.setVisible(false);
        //  jPanel2.setVisible(true);

        this.billingTablesJscrl.setViewportView(packagesTbl);
        this.validate();

// TODO add your handling code here:
    }//GEN-LAST:event_packageBillingChkbxActionPerformed

    // }
// TODO add your handling code here:
    private void packagesCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packagesCancelBtnActionPerformed
        packagesSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_packagesCancelBtnActionPerformed

    private void packagesSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_packagesSearchTableMouseClicked

        this.packagesTbl.setValueAt(packagesSearchTable.getValueAt(packagesSearchTable.getSelectedRow(), 1), packagesTbl.getSelectedRow(), 0);
        this.packagesTbl.setValueAt(1, packagesTbl.getSelectedRow(), 1);
        this.packagesTbl.setValueAt(packagesSearchTable.getValueAt(packagesSearchTable.getSelectedRow(), 2), packagesTbl.getSelectedRow(), 2);
        this.packagesTbl.setValueAt(1 * Double.parseDouble(packagesSearchTable.getValueAt(packagesSearchTable.getSelectedRow(), 2).toString()), packagesTbl.getSelectedRow(), 3);
        this.packagesTbl.setValueAt(packagesSearchTable.getValueAt(packagesSearchTable.getSelectedRow(), 4), packagesTbl.getSelectedRow(), 4);

        packagesSearchDialog.dispose();

        populateDiscreetServicesTable();

    }//GEN-LAST:event_packagesSearchTableMouseClicked

    private void packagesSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_packagesSearchTxtCaretUpdate
        String codes = this.glcodeTxt.getText();
        //  if (codes.equalsIgnoreCase("") || codes.equals(null)) {
        //      javax.swing.JOptionPane.showMessageDialog(this, "You must Select revenue dept first before you proceed".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        //  } else {
        String codeType = null;

        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("SELECT DISTINCT code_type FROM pb_patient_names");
            while (rs.next()) {
                codeType = rs.getString(1);
            }

        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
        if (codeType.equalsIgnoreCase("subcode")) {
            if (packagesSearchTxt.getCaretPosition() < 3) {

                System.out.println("You need to type more than one character to search");
            } else {
                packagesSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT package_code, package, package_amt as price, department, glcode FROM pb_packages_setup WHERE package_code ILIKE '%" + packagesSearchTxt.getText().toString() + "%'"));

                //  System.out.println("");
            }
        } else {

            if (packagesSearchTxt.getCaretPosition() < 3) {

                System.out.println("You need to type more than three characters to search");
            } else {

                packagesSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT package_code, package, package_amt as price, department, glcode FROM pb_packages_setup WHERE package ILIKE '%" + packagesSearchTxt.getText().toString() + "%'"));

            }

        }

// Add your handling code here:
    }//GEN-LAST:event_packagesSearchTxtCaretUpdate
    private void cmboxMouseClicked2() {

        System.out.println("Showing dialog");
        java.awt.Point point = billingTablesJscrl.getLocationOnScreen();
        packagesSearchDialog.setSize(700, 200);
        packagesSearchDialog.setLocation(point);
        packagesSearchDialog.setVisible(true);
    }
    private void patientSearchTblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTblMouseEntered
// TODO add your handling code here:
    }//GEN-LAST:event_patientSearchTblMouseEntered

    private void removePackageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePackageBtnActionPerformed

        int rows2Delete = discreetServicesTbl.getSelectedRowCount();

        int[] selectedRows = discreetServicesTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) discreetServicesTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) discreetServicesTbl.getModel();

                defTableModel.removeRow(discreetServicesTbl.getSelectedRow());
            }
        }
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(discreetServicesTbl, 3);
        packageAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));        //System.out.println("This date is todays date");
        //     System.out.print("This date is todays date");

        // TODO add your handling code here:
    }//GEN-LAST:event_removePackageBtnActionPerformed

    private void payerNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payerNameTxtActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_payerNameTxtActionPerformed

    private void schemeAccountNumberTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemeAccountNumberTxtActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_schemeAccountNumberTxtActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        schemesSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        boolean smartcard = false;
        schemeNameTxt.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1).toString());
        payerNameTxt.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 2).toString());
        schemeAccountNumberTxt.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0).toString());
        try {
            java.sql.Statement stmt1cz3 = connectDB.createStatement();
            java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + schemeNameTxt.getText() + "'");
            while (rset1cz3.next()) {
                schemeAccountNumberTxt.setText(rset1cz3.getObject(1).toString());
                payerNameTxt.setText(rset1cz3.getObject(2).toString());
                smartcard = rset1cz3.getBoolean(3);
            }
            smartcard = false;
            if (opdChkbx.isSelected()) {
                if (smartcard) {
                    savebillBtn.setEnabled(false);
                    saveAndPrintBillBtn.setEnabled(false);
                    rePrintBillBtn.setEnabled(false);
                    readSmartCardBtn.setEnabled(true);
                    javax.swing.JOptionPane.showMessageDialog(this, "You must Forward from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        schemesSearchDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' order by scheme_name"));

            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        schemesSearchDialog.dispose();
        java.awt.Point point = this.schemeNameTxt.getLocationOnScreen();

        schemesSearchDialog.setSize(400, 200);

        schemesSearchDialog.setLocation(point);
        schemesSearchDialog.setVisible(true);
    }
    private void ipdChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipdChkbxActionPerformed
        this.patientNameTxt.setEditable(false);// TODO add your handling code here:
    }//GEN-LAST:event_ipdChkbxActionPerformed

    private void opdChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opdChkbxActionPerformed
        this.patientNameTxt.setEditable(false);// TODO add your handling code here:
    }//GEN-LAST:event_opdChkbxActionPerformed

    private void discreetServicesTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discreetServicesTblKeyReleased
        float billNo = 0;
        double smartTotal = 0;
        double bedAmt = 0.00; //java.lang.Double.valueOf(bedAmountTxt.getText());
        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select discount from pb_smartcards WHERE card_name = '" + schemeNameTxt.getText() + "'");
            while (rst11.next()) {

                billNo = rst11.getFloat(1);

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        if (discreetServicesTbl.getModel().getValueAt(discreetServicesTbl.getSelectedRow(), 1) != null) {
            if (discreetServicesTbl.getSelectedColumn() == discreetServicesTbl.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(discreetServicesTbl.getValueAt(discreetServicesTbl.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(discreetServicesTbl.getValueAt(discreetServicesTbl.getSelectedRow(), 2).toString());

                if (billNo > 0) {
                    float total = (qty * price) - (qty * price * (billNo / 100));
                    discreetServicesTbl.setValueAt(total, discreetServicesTbl.getSelectedRow(), 3);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(discreetServicesTbl, 3);// + bedAmt;
                    //  jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    billTotalTxt.setText(java.lang.String.valueOf(totalSum));
                    smartTotal = totalSum;

                } else {
                    float total = qty * price;
                    discreetServicesTbl.setValueAt(total, discreetServicesTbl.getSelectedRow(), 3);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(discreetServicesTbl, 3); // + bedAmt;
                    //  jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    billTotalTxt.setText(java.lang.String.valueOf(totalSum));
                    smartTotal = totalSum;

                }

                cardBalanceTxt.setText("0.00");
                double balance = java.lang.Double.valueOf(cardBalanceTxt.getText());
                //    double bill = java.lang.Double.valueOf(jTextField3.getText());
                System.out.println("This is the balance " + balance);
                if (balance > 0) {
                    if (smartTotal > balance) {
                        javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE CARD BALANCE", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        savebillBtn.setEnabled(false);
                        saveAndPrintBillBtn.setEnabled(false);
                        rePrintBillBtn.setEnabled(false);
                        // jButton7.setEnabled(false);
                    } else {
                        savebillBtn.setEnabled(true);
                        //  saveAndPrintBillBtn.setEnabled(true);
                        rePrintBillBtn.setEnabled(true);
                    }
                }

                // Check condition on balance for prepaid debtors
                if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
                    double totalSum = Double.parseDouble(billTotalTxt.getText());
                    if (totalSum > 0) {
                        if (totalSum > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
                            javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST TOP UP THE BALANCE.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            savebillBtn.setEnabled(false);
                            saveAndPrintBillBtn.setEnabled(false);
                            rePrintBillBtn.setEnabled(false);
                            // jButton7.setEnabled(false);
                        } else {
                            savebillBtn.setEnabled(true);
                            // saveAndPrintBillBtn.setEnabled(true);
                            rePrintBillBtn.setEnabled(true);
                        }
                    }

                }

            }

        }

    }//GEN-LAST:event_discreetServicesTblKeyReleased

    private void discreetServicesTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discreetServicesTblMouseClicked
        if (back2ServicesTableChkbx.isSelected()) {
            if (discreetServicesTbl.getSelectedColumn() == 0) {
                this.cmboxMouseClicked();
            }
        } else {
            if (discreetServicesTbl.getSelectedColumn() == 0) {
                this.packagesBilling();
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_discreetServicesTblMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        javax.swing.JOptionPane.showMessageDialog(this, "Key Pressed");
// TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButtonClickedw();

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButtonClickedw() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.doctorAcctNumberTxt.getLocationOnScreen();

        generalBillingDoctorSearchDialog.setSize(400, 200);

        generalBillingDoctorSearchDialog.setLocation(point);

        generalBillingDoctorSearchDialog.setVisible(true);

    }
    private void jSearchTable31MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable31MouseClicked
        doctorAcctNumberTxt.setText(jSearchTable31.getValueAt(jSearchTable31.getSelectedRow(), 0).toString());
        doctorNameTxt.setText(jSearchTable31.getValueAt(jSearchTable31.getSelectedRow(), 1).toString());
        this.generalBillingDoctorSearchDialog.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable31MouseClicked

    private void jButton921ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton921ActionPerformed
        this.generalBillingDoctorSearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton921ActionPerformed

    private void jTextField1121CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1121CaretUpdate
        if (jTextField1121.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable31.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT staff_no, (upper(first_name||' '||middle_name)) as name,staff_category from pb_doctors_list where (upper(first_name||' '||middle_name)) ILIKE '%" + jTextField1121.getText() + "%' order by first_name"));

            /*
             * try {
             *
             * searchRowSet31.execute("SELECT staff_no, (upper(first_name||'
             * '||middle_name)) as name,staff_category from pb_doctors_list
             * where (upper(first_name||' '||middle_name)) ILIKE
             * '"+jTextField1121.getText()+"%' order by first_name");
             * jSearchTable31.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet31, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("staff_no", "Staff
             * no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
             * false), new
             * org.netbeans.lib.sql.models.TableModel.Column("staff_category",
             * "Category", false)
             *
             * }));
             */
            //                jSearchTable31.setShowHorizontalLines(false);
            jSearchScrollPane31.setViewportView(jSearchTable31);

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1121CaretUpdate

    private void rePrintBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rePrintBillBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());
        String receiptNo = null;
        int k = 1;
        try {
            connectDB.setAutoCommit(false);

            //wait(10000);
            while (k != 0) {

                if (transNo != null) {
                    k = 0;
                }

            }
            //  if(dispatchThread)
            java.sql.Statement ps1 = connectDB.createStatement();

            java.sql.ResultSet rst1 = ps1.executeQuery("select currval('transaction_no_seq')");

            while (rst1.next()) {
                receiptNo = rst1.getObject(1).toString();
                //    if(receiptNo != null)
                // {
                //  k=0;
                //  }
                //}
            }
            if (ipdChkbx.isSelected()) {
                IpRequestPdf policy = new IpRequestPdf();
                policy.IpRequestPdf(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), billTotalTxt.getText(), receiptNo, this.schemeNameTxt.getText());
            } else {

                RequestPdf policy = new RequestPdf();
                policy.RequestPdf(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), billTotalTxt.getText(), receiptNo, this.schemeNameTxt.getText());

            }

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }          // Add your handling code here:
    }//GEN-LAST:event_rePrintBillBtnActionPerformed

    private void saveAndPrintBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndPrintBillBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        String billNo = null;

        savebillBtnActionPerformed(evt);

        saveAndPrintBillBtnActionPerformed(evt);

    }//GEN-LAST:event_saveAndPrintBillBtnActionPerformed

    private void jCheckBox61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox61ActionPerformed
        this.consultantBillingPatientNameTxt.setEditable(true);
        this.consultantBillingPayModeTxt.setEditable(true);
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox61ActionPerformed

    private void walkinChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkinChkbxActionPerformed
        this.patientNameTxt.setEditable(true);
        this.patientCategoryTxt.setText("Walk In");
        // Add your handling code here:
    }//GEN-LAST:event_walkinChkbxActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        javax.swing.JInternalFrame other = new ServiceAccSlipIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        jSearchDialog3.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked

        patientNameTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0).toString());

        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_patient_register where patient_no  ='" + consultantBillingPatientNoTxt.getText() + "'");
            while (rset1.next()) {
                patientCategoryTxt.setText(rset1.getObject(1).toString());
                paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        jTextField112.setText("");
        //        this.populateTable1(this.jTextField9.getText());
        jSearchDialog3.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        if (jTextField112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where patient_no ILIKE '" + jTextField112.getText() + "%' and last_visit > current_date - 5 order by second_name"));

            jSearchTable3.setShowHorizontalLines(false);
            jSearchScrollPane3.setViewportView(jSearchTable3);

        }   // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        jSearchDialog3.setSize(400, 200);

        jSearchDialog3.setLocation(point);

        jSearchDialog3.setVisible(true);

    }
    private void jTable111KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable111KeyReleased
        if (jTable111.getValueAt(jTable111.getSelectedRow(), 1) != null) {
            float floatCol2 = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 1).toString());

            float floatCol3 = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 2).toString());

            float resVal = floatCol2 * floatCol3;

            jTable111.setValueAt(resVal, jTable111.getSelectedRow(), 3);
            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3);
            //  jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
            jTextField311.setText(java.lang.String.valueOf(totalSum));
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTable111KeyReleased

    private void jTextField11111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11111CaretUpdate
        if (jTextField11111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable111.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT staff_no, (upper(first_name||' '||middle_name)) as name,staff_category from pb_doctors_list where (upper(first_name||' '||middle_name)) ILIKE '" + jTextField11111.getText() + "%' order by first_name"));


            /*
             * try {
             *
             * searchRowSet111.execute("SELECT staff_no, (upper(first_name||'
             * '||middle_name)) as name,staff_category from pb_doctors_list
             * where (upper(first_name||' '||middle_name)) ILIKE
             * '"+jTextField11111.getText()+"%' order by first_name"); //
             * searchRowSet.execute("SELECT patient_no, (upper(first_name||'
             * '||second_name)) as name, year_of_birth, residence from
             * hp_patient_register where (upper(first_name||' '||second_name))
             * ILIKE '"+jTextField11.getText()+"%' order by first_name");
             *
             * jSearchTable111.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet111, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("staff_no", "Staff
             * no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
             * false), new
             * org.netbeans.lib.sql.models.TableModel.Column("staff_category",
             * "Category", false)
             *
             * }));
             */
            jSearchTable111.setShowHorizontalLines(false);
            jSearchScrollPane111.setViewportView(jSearchTable111);

        }          // Add your handling code here:
    }//GEN-LAST:event_jTextField11111CaretUpdate

    private void jButton5211ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5211ActionPerformed
        this.inpatientRegisterSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5211ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.jPanel111.setVisible(false);
        this.consultantBillingMainPanel.setVisible(true);    // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void searchButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton11ActionPerformed
        searchButton11Clicked();      // Add your handling code here:
    }//GEN-LAST:event_searchButton11ActionPerformed

    private void jButton411ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton411ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton411ActionPerformed
    private void searchButton11Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField911.getLocationOnScreen();

        inpatientRegisterSearchDialog.setSize(400, 200);

        inpatientRegisterSearchDialog.setLocation(point);

        inpatientRegisterSearchDialog.setVisible(true);
    }
    private void jButton311ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton311ActionPerformed
        jTextField111.setText("");
        jTextField211.setText("");
        jTextField311.setText("");
        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.getModel().setValueAt(null, k, r);
            }
        }

        //  this.jComboBox131.setSelectedItem(null);
        jTextField311.setText("0.00");   // Add your handling code here:
    }//GEN-LAST:event_jButton311ActionPerformed

    private void jButton611ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton611ActionPerformed

        int rows2Delete = jTable111.getSelectedRowCount();

        int[] selectedRows = jTable111.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                defTableModel.removeRow(jTable111.getSelectedRow());
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_jButton611ActionPerformed

    private void jButton9111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9111ActionPerformed
        doctorSearchDialog.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jButton9111ActionPerformed

    private void jSearchTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable111MouseClicked
        jTable111.setValueAt(jSearchTable111.getValueAt(jSearchTable111.getSelectedRow(), 1), jTable111.getSelectedRow(), 5);
        //   jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(),1),jTable11.getSelectedRow(), 2);
        //   jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(),2),jTable11.getSelectedRow(), 4);
        jTextField11111.setText("");
        doctorSearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable111MouseClicked

    private void jTextField11111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11111ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField11111ActionPerformed
    private void cmbox211MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jTable111.getLocationOnScreen();
        doctorSearchDialog.setSize(400, 200);
        doctorSearchDialog.setLocation(point);
        doctorSearchDialog.setVisible(true);
    }
    private void jButton912ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton912ActionPerformed
        servicesSearchDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton912ActionPerformed

    private void jSearchTable12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable12MouseClicked
        jTable111.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), jTable111.getSelectedRow(), 0);
        jTable111.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), jTable111.getSelectedRow(), 2);
        jTable111.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 2), jTable111.getSelectedRow(), 4);
        jTextField1112.setText("");
        servicesSearchDialog.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jSearchTable12MouseClicked

    private void jTextField1112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1112CaretUpdate
        if (jTextField1112.getCaretPosition() > 4) {
            jSearchTable12.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT service_type,"
                    + " CASE WHEN ('" + jTextField711.getText() + "' ILIKE 'Scheme') THEN anaesthetist_rate ELSE rate END AS price,gl_account as gl_code"
                    + " FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField1112.getText() + "%' "
                    + " AND main_service ILIKE '" + jTextField51.getText() + "' order by service_type"));

            jSearchScrollPane12.setViewportView(jSearchTable12);
            System.out.println("Cannot sort out");
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1112CaretUpdate
    private void cmbox111MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jTable111.getLocationOnScreen();
        servicesSearchDialog.setSize(400, 200);
        servicesSearchDialog.setLocation(point);
        servicesSearchDialog.setVisible(true);
    }
    private void jTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable111MouseClicked
        if (jTable111.getSelectedColumn() == 0) {

            this.cmbox111MouseClicked();
        }          // Add your handling code here:
        if (jTable111.getSelectedColumn() == 5) {

            this.cmbox211MouseClicked();
        }       // Add your handling code here:
    }//GEN-LAST:event_jTable111MouseClicked

    private void jButton111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton111ActionPerformed
        if (jTextField121.getText().equalsIgnoreCase("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {

            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

            System.out.println(datenowSql.toString());
            // try{
            String billNo = null;

            transNo = null;
            String payMode = null;
            String patientAcc = null;
            String cardNo = null;
            String AccDesc = null;
            String scheme = null;
            String cardName = null;
            String isurer = null;
            String expDate = null;
            String staffNo = null;
            String glAcc = null;
            String user = null;
            String accDesc1 = null;
            String insAcc = null;
            String visitid = "-";
            try {
                connectDB.setAutoCommit(false);
                if (!(jTextField711.getText().equals("Cash") || jTextField711.getText().equals(""))) {

                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='" + jTextField911.getText() + "'");
                    while (rse1.next()) {

                        // patientAcc = rse1.getObject(1).toString();
                        payMode = rse1.getObject(1).toString();

                        cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                        scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                        cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                        isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                        // expDate = (dbObject.getDBObject(rset1.getObject(6), "null");
                        staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                    }
                }
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                while (rst.next()) {
                    rst.getObject(1).toString();

                    transNo = rst.getObject(1).toString();
                }
                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                while (rst11.next()) {
                    rst11.getObject(1).toString();

                    billNo = rst11.getObject(1).toString();
                    user = rst11.getObject(2).toString();
                }
                /*
                 * java.sql.Statement ps11w1 = connectDB.createStatement();
                 * java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select
                 * visit_id from hp_admission where patient_no =
                 * '"+jTextField9.getText()+"' and discharge = false"); while
                 * (rst11w1.next()){
                 *
                 *
                 * visitid = rst11w1.getObject(1).toString(); }
                 */
                for (int i = 0; i < jTable111.getRowCount(); i++) {
                    if (jTable111.getValueAt(i, 0) != null) {
                        java.sql.Statement stm121 = connectDB.createStatement();
                        java.sql.ResultSet rse121 = stm121.executeQuery("select main_service,current_user from pb_operating_parameters where gl_account ='" + jTable111.getValueAt(i, 4).toString() + "'");
                        while (rse121.next()) {

                            glAcc = rse121.getObject(1).toString();
                            user = rse121.getObject(2).toString();

                        }

                        java.sql.Statement stm2 = connectDB.createStatement();
                        java.sql.ResultSet rse2 = stm2.executeQuery("SELECT staff_no from pb_doctors_list where (upper(first_name||' '||middle_name)) = '" + jTable111.getValueAt(i, 5).toString() + "'");
                        while (rse2.next()) {

                            insAcc = rse2.getObject(1).toString();
                        }
                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                        pstmt21.setString(1, insAcc);
                        pstmt21.setString(2, jTable111.getValueAt(i, 0).toString());
                        pstmt21.setString(3, jTable111.getValueAt(i, 5).toString());
                        pstmt21.setString(4, transNo);
                        pstmt21.setString(5, jTable111.getValueAt(i, 4).toString());
                        pstmt21.setString(6, "Doctors Fee");
                        pstmt21.setDouble(7, 0.00);
                        pstmt21.setDouble(8, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                        pstmt21.setString(9, "");
                        pstmt21.setString(10, jTextField911.getText());

                        pstmt21.setString(11, jTable111.getValueAt(i, 0).toString());
                        pstmt21.setBoolean(12, false);
                        pstmt21.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                        pstmt21.setString(13, user);
                        pstmt21.setDouble(15, 0.00);
                        pstmt21.setString(19, jTextField711.getText());
                        pstmt21.setDouble(17, 0.0);
                        pstmt21.setString(16, jTextField121.getText());

                        pstmt21.setDouble(18, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                        pstmt21.executeUpdate();

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");

                        pstmt.setString(1, jTextField911.getText());
                        pstmt.setObject(2, jTable111.getValueAt(i, 0).toString() + "-" + jTable111.getValueAt(i, 5).toString());
                        pstmt.setString(3, jTextField211.getText());
                        pstmt.setString(4, jTextField711.getText());
                        pstmt.setString(5, transNo);
                        pstmt.setString(7, scheme);
                        pstmt.setString(6, cardNo);
                        pstmt.setString(8, cardName);
                        pstmt.setString(9, isurer);
                        pstmt.setDate(10, null);
                        pstmt.setString(11, jTable111.getValueAt(i, 5).toString());
                        pstmt.setDouble(12, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                        pstmt.setDouble(13, 0.00);
                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                        pstmt.setObject(15, patientAcc);
                        pstmt.setString(16, glAcc);
                        pstmt.setDouble(17, 1);
                        pstmt.setObject(18, staffNo);
                        pstmt.setBoolean(19, false);
                        pstmt.setString(20, "Billing");
                        pstmt.setBoolean(21, false);
                        pstmt.setString(22, AccDesc);
                        pstmt.setString(23, visitid);
                        pstmt.setString(24, user);
                        pstmt.setString(25, billNo);
                        pstmt.setString(26, "IP");
                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                        pstmt.setString(28, visitid);
                        pstmt.executeUpdate();
                        /*
                         * java.sql.PreparedStatement pstmt2 =
                         * connectDB.prepareStatement("insert into ac_ledger
                         * values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                         * ?, ?, ?,?,?,?)");
                         * pstmt2.setObject(1,jTable1.getValueAt(i,4).toString());
                         * pstmt2.setString(2,glAcc);
                         * pstmt2.setString(3,jTextField9.getText());
                         * pstmt2.setString(4,jTextField1.getText());
                         * pstmt2.setString(5,""); pstmt2.setString(6,cardNo);
                         * pstmt2.setString(7,cardName); pstmt2.setString(8,"");
                         * pstmt2.setString(9,isurer); pstmt2.setString(10,"");
                         * pstmt2.setString(11,""); pstmt2.setString(12,"");
                         * pstmt2.setString(13,"");
                         * pstmt2.setString(14,jTable1.getValueAt(i,0).toString());
                         * pstmt2.setString(15,"Revenue");
                         * pstmt2.setString(16,"0.00");
                         * pstmt2.setObject(17,jTable1.getValueAt(i,3).toString());
                         * pstmt2.setString(18,"'now'");
                         * pstmt2.setString(19,transNo);
                         * pstmt2.setString(20,"false");
                         * pstmt2.setString(21,"false");
                         * pstmt2.setString(22,"false");
                         * pstmt2.setString(23,user); pstmt2.executeUpdate();
                         */
                    }
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                jTextField111.setText("");
                jTextField211.setText("");
                jTextField711.setText("");
                for (int k = 0; k < jTable111.getRowCount(); k++) {
                    for (int r = 0; r < jTable111.getColumnCount(); r++) {
                        jTable111.setValueAt(null, k, r);
                    }
                }

                //  this.jComboBox131.setSelectedItem(null);
                jTextField311.setText("0.00");
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }

        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jButton111ActionPerformed

    private void jSearchTable211MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable211MouseClicked
        jTextField121.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 1).toString());
        jTextField911.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 0).toString());
        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        try {

            java.sql.Statement stmt11 = connectDB.createStatement();
            java.sql.ResultSet rset11 = stmt11.executeQuery("select iplimit from hp_inpatient_register where patient_no  ='" + jTextField911.getText() + "'");
            while (rset11.next()) {
                limit = rset11.getDouble(1);

                //  jTextField71.setText(rset1.getObject(2).toString());
            }
            java.sql.Statement stmt111 = connectDB.createStatement();
            java.sql.ResultSet rset111 = stmt111.executeQuery("select sum(debit) from hp_patient_card where patient_no  ='" + jTextField911.getText() + "' and (invoice_no not like 'O%' OR invoice_no not like 'I%' or invoice_no is null)");
            while (rset111.next()) {
                bal = rset111.getDouble(1);

                //  jTextField71.setText(rset1.getObject(2).toString());
            }
            java.sql.Statement stmt1111 = connectDB.createStatement();
            java.sql.ResultSet rset1111 = stmt1111.executeQuery("select sum(credit) from hp_patient_card where patient_no  ='" + jTextField911.getText() + "' and (invoice_no not like 'O%' OR invoice_no not like 'I%' or invoice_no is null)");
            while (rset1111.next()) {
                rect = rset1111.getDouble(1);

                //  jTextField71.setText(rset1.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        if (bal > (limit + rect)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Limit Exceeded", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            this.jButton111.setEnabled(false);
        } else {
            this.jButton111.setEnabled(true);

            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_inpatient_register where patient_no  ='" + jTextField911.getText() + "'");
                while (rset1.next()) {
                    jTextField211.setText(rset1.getObject(1).toString());
                    jTextField711.setText(rset1.getObject(2).toString());
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }
        jTextField11311.setText("");
        //        this.populateTable1(this.jTextField9.getText());
        inpatientRegisterSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jSearchTable211MouseClicked

    private void jTextField11311CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11311CaretUpdate
        if (this.jCheckBox2.isSelected() && jCheckBox31.isSelected()) {
            if (jTextField11311.getCaretPosition() < 1) {

                System.out.println("Nothing");
            } else {

                jSearchTable211.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_inpatient_register where patient_no ILIKE '" + jTextField11311.getText() + "%' order by second_name"));
                /*
                 * try {
                 *
                 * searchRowSet211.execute("SELECT patient_no,
                 * (upper(second_name||' '||first_name||' '||last_name)) as
                 * name, year_of_birth, residence from hp_inpatient_register
                 * where patient_no ILIKE '"+jTextField11311.getText()+"%' order
                 * by second_name");
                 *
                 * jSearchTable211.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet211, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                 * "Patient no", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false) // new
                 * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
                 * "Year of birth", false), // new
                 * org.netbeans.lib.sql.models.TableModel.Column("residence",
                 * "Residence", false) }));
                 */
                jSearchTable211.setShowHorizontalLines(false);
                jSearchScrollPane211.setViewportView(jSearchTable211);

            }
        } else {
            if (this.jCheckBox2.isSelected() && jCheckBox41.isSelected()) {
                if (jTextField11311.getCaretPosition() < 4) {

                    System.out.println("Nothing");
                } else {
                    jSearchTable211.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_inpatient_register where second_name||' '||first_name||' '||last_name ILIKE '" + jTextField11311.getText() + "%' order by second_name"));

                    jSearchTable211.setShowHorizontalLines(false);
                    jSearchScrollPane211.setViewportView(jSearchTable211);

                }
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField11311CaretUpdate
    private void searchButton211Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.consultantBillingPatientNoTxt.getLocationOnScreen();

        inpatientRegisterSearchDialog.setSize(400, 200);

        inpatientRegisterSearchDialog.setLocation(point);

        inpatientRegisterSearchDialog.setVisible(true);

    }
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.consultantBillingMainPanel.setVisible(false);
        this.jPanel111.setVisible(true);        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        serviceorcodeSearchTxt.setText("");
        consultantPatientCategoryTxt.setText("");
        consultantBillingPayModeTxt.setText("");
        for (int k = 0; k < consultantBillingTable.getRowCount(); k++) {
            for (int r = 0; r < consultantBillingTable.getColumnCount(); r++) {
                consultantBillingTable.setValueAt(null, k, r);
            }
        }

        //  this.jComboBox131.setSelectedItem(null);
        jTextField31.setText("0.00");     // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed

        int rows2Delete = consultantBillingTable.getSelectedRowCount();

        int[] selectedRows = consultantBillingTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) consultantBillingTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) consultantBillingTable.getModel();

                defTableModel.removeRow(consultantBillingTable.getSelectedRow());
            }
        }

        this.tableModelTableChanged1();
        // Add your handling code here:
    }//GEN-LAST:event_jButton61ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (consultantBillingTable.isEditing()) {
                consultantBillingTable.getCellEditor().stopCellEditing();
            }

            if (consultantBillingPatientNameTxt.getText().equalsIgnoreCase("")) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                //   this.tableModelTableChanged1();

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());
                //  try{
                String billNo = null;

                String transNo = null;
                String payMode = null;
                String patientAcc = null;
                String cardNo = null;
                String AccDesc = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String glAcc = null;
                String user = null;
                String accDesc1 = null;
                String insAcc = null;
                String patientAcc1 = null;
                String AccDesc1 = null;
                try {
                    connectDB.setAutoCommit(false);

                    java.sql.Statement stm12 = connectDB.createStatement();
                    java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rse12.next()) {

                        patientAcc = rse12.getObject(1).toString();
                        AccDesc = rse12.getObject(2).toString();
                    }
                    java.sql.Statement ps = connectDB.createStatement();
                    java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                    while (rst.next()) {
                        rst.getObject(1).toString();

                        transNo = rst.getObject(1).toString();
                    }
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq')");
                    while (rst11.next()) {

                        billNo = rst11.getObject(1).toString();
                        //user = rst11.getObject(2).toString();
                    }

                    java.sql.Statement ps11x = connectDB.createStatement();
                    java.sql.ResultSet rst11x = ps11x.executeQuery("select current_user");
                    while (rst11x.next()) {
                        user = rst11x.getObject(1).toString();
                    }

                    for (int i = 0; i < consultantBillingTable.getRowCount(); i++) {
                        if (consultantBillingTable.getValueAt(i, 0) != null) {
                            java.sql.Statement stm121 = connectDB.createStatement();
                            java.sql.ResultSet rse121 = stm121.executeQuery("select main_service from pb_operating_parameters where gl_account ='" + consultantBillingTable.getValueAt(i, 4).toString() + "'");
                            while (rse121.next()) {

                                glAcc = rse121.getObject(1).toString();
                            }
                            //user = rse121.getObject(2).toString();

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?)");

                            pstmt2.setString(1, consultantBillingPatientNoTxt.getText());
                            pstmt2.setString(10, "");

                            pstmt2.setString(2, serviceorcodeSearchTxt.getText());
                            pstmt2.setString(3, consultantBillingPayModeTxt.getText());
                            pstmt2.setString(4, consultantPatientCategoryTxt.getText());
                            pstmt2.setString(5, consultantBillingTable.getValueAt(i, 0).toString());
                            pstmt2.setDouble(6, java.lang.Double.parseDouble(consultantBillingTable.getValueAt(i, 1).toString()));
                            pstmt2.setDouble(7, java.lang.Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString()));
                            pstmt2.setObject(8, consultantBillingTable.getValueAt(i, 4).toString());
                            pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt2.setBoolean(12, false);
                            pstmt2.setString(11, user);
                            pstmt2.setString(13, glAcc);
                            pstmt2.executeUpdate();

                            java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into hp_patient_visit values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");

                            pstmt21.setString(1, consultantBillingPatientNoTxt.getText());
                            pstmt21.setString(10, "");

                            pstmt21.setString(2, consultantBillingPatientNameTxt.getText());
                            pstmt21.setString(3, "OP");
                            pstmt21.setString(4, consultantBillingPayModeTxt.getText());
                            pstmt21.setInt(5, Integer.parseInt("0"));
                            pstmt21.setString(8, glAcc);
                            pstmt21.setString(6, consultantBillingTable.getValueAt(i, 0).toString());
                            pstmt21.setDouble(7, Double.parseDouble(consultantBillingTable.getValueAt(i, 1).toString()));
                            pstmt21.setDouble(9, Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString()));
                            pstmt21.setDouble(12, Double.parseDouble("0"));
                            pstmt21.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt21.setString(13, consultantBillingTable.getValueAt(i, 5).toString());
                            pstmt21.setString(14, user);
                            pstmt21.setTimestamp(15, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//.com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt21.setString(16, "Billing");
                            pstmt21.executeUpdate();
                            //}

                            java.sql.Statement stm2 = connectDB.createStatement();
                            java.sql.ResultSet rse2 = stm2.executeQuery("SELECT staff_no from pb_doctors_list where (upper(first_name||' '||middle_name)) = '" + consultantBillingTable.getValueAt(i, 5).toString() + "'");
                            while (rse2.next()) {

                                insAcc = rse2.getObject(1).toString();
                            }
                            java.sql.PreparedStatement pstmt211 = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)");
                            pstmt211.setString(1, insAcc);
                            pstmt211.setString(2, consultantBillingTable.getValueAt(i, 0).toString());
                            pstmt211.setString(3, consultantBillingTable.getValueAt(i, 5).toString());
                            pstmt211.setString(4, transNo);
                            pstmt211.setString(5, consultantBillingTable.getValueAt(i, 4).toString());
                            pstmt211.setString(6, "Doctors Fee");
                            pstmt211.setDouble(7, Double.parseDouble("0.00"));
                            pstmt211.setDouble(8, Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString()));
                            pstmt211.setString(9, "");
                            pstmt211.setString(10, consultantBillingPatientNoTxt.getText());
                            pstmt211.setString(11, consultantBillingTable.getValueAt(i, 0).toString());
                            pstmt211.setBoolean(12, Boolean.parseBoolean("false"));
                            pstmt211.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt211.setString(13, user);
                            pstmt211.setDouble(15, Double.parseDouble("0.00"));
                            pstmt211.setString(19, consultantBillingPayModeTxt.getText());
                            pstmt211.setDouble(17, Double.parseDouble("0.00"));
                            pstmt211.setString(16, consultantBillingPatientNameTxt.getText());
                            pstmt211.setDouble(18, Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString()));
                            pstmt211.executeUpdate();

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)");

                            pstmt.setString(1, consultantBillingPatientNoTxt.getText());
                            pstmt.setObject(2, consultantBillingTable.getValueAt(i, 0).toString() + "-" + consultantBillingTable.getValueAt(i, 5).toString());
                            pstmt.setString(3, consultantPatientCategoryTxt.getText());
                            pstmt.setString(4, consultantBillingPayModeTxt.getText());
                            pstmt.setString(5, transNo);
                            pstmt.setString(7, scheme);
                            pstmt.setString(6, cardNo);
                            pstmt.setString(8, cardName);
                            pstmt.setString(9, isurer);
                            pstmt.setDate(10, null);
                            pstmt.setString(11, consultantBillingTable.getValueAt(i, 5).toString());
                            pstmt.setDouble(12, Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString()));
                            pstmt.setDouble(13, 0.00);
                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt.setObject(15, patientAcc);
                            pstmt.setString(16, glAcc);
                            pstmt.setDouble(17, Double.parseDouble(consultantBillingTable.getValueAt(i, 1).toString()));
                            pstmt.setObject(18, staffNo);
                            pstmt.setBoolean(19, false);
                            pstmt.setString(20, "Billing");
                            pstmt.setBoolean(21, false);
                            pstmt.setString(22, AccDesc);
                            pstmt.setString(23, billNo);
                            pstmt.setString(24, user);
                            pstmt.setString(25, billNo);
                            pstmt.setString(26, "IP");
                            pstmt.setDate(27, new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()));//"'now'");
                            pstmt.setString(28, billNo);
                            pstmt.executeUpdate();
                        }
                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    serviceorcodeSearchTxt.setText("");
                    consultantPatientCategoryTxt.setText("");
                    consultantBillingPayModeTxt.setText("");
                    for (int k = 0; k < consultantBillingTable.getRowCount(); k++) {
                        for (int r = 0; r < consultantBillingTable.getColumnCount(); r++) {
                            consultantBillingTable.setValueAt(null, k, r);
                        }
                    }

                    //  this.jComboBox131.setSelectedItem(null);
                    jTextField31.setText("0.00");
                    //  jComboBox2.setSelectedItem(null);
                } catch (java.sql.SQLException sq) {
                    sq.printStackTrace();
                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {

                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }

                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton911ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton911ActionPerformed
        doctorsSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton911ActionPerformed
    private void cmbox2MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = consultantBillingTable.getLocationOnScreen();
        doctorsSearchDialog.setSize(400, 200);
        doctorsSearchDialog.setLocation(point);
        doctorsSearchDialog.setVisible(true);
    }
    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        String status = null;
        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select status from pb_doctors_list where staff_no  ='" + this.jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0) + "'");
            while (rset1.next()) {
                status = rset1.getObject(1).toString();
                //jTextField71.setText(rset1.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        if (status.equalsIgnoreCase("Suspended") || status.equalsIgnoreCase("Closed")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Account Closed", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            consultantBillingTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1), consultantBillingTable.getSelectedRow(), 5);
        }

        jTextField1111.setText("");

        doctorsSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() < 4) {

            System.out.println("Nothing");
        } else {

            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT staff_no, (upper(first_name||' '||middle_name)) as name,staff_category from pb_doctors_list where (upper(first_name||' '||middle_name)) ILIKE '%" + jTextField1111.getText() + "%' order by first_name"));

            jSearchTable11.setShowHorizontalLines(false);

            jSearchScrollPane11.setViewportView(jSearchTable11);

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void consultantBillingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consultantBillingTableKeyReleased

        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(jTextField31.getText());

        if (consultantBillingTable.getValueAt(consultantBillingTable.getSelectedRow(), 1) != null) {
            double floatCol2 = java.lang.Double.parseDouble(consultantBillingTable.getValueAt(consultantBillingTable.getSelectedRow(), 1).toString());

            double floatCol3 = java.lang.Double.parseDouble(consultantBillingTable.getValueAt(consultantBillingTable.getSelectedRow(), 2).toString());

            double resVal = floatCol2 * floatCol3;

            //float total = qty * price;
            consultantBillingTable.setValueAt(resVal, consultantBillingTable.getSelectedRow(), 3);
            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(consultantBillingTable, 3);

            jTextField31.setText(java.lang.String.valueOf(totalSum));

        }


    }//GEN-LAST:event_consultantBillingTableKeyReleased
    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < consultantBillingTable.getRowCount(); i++) {

            if (consultantBillingTable.getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString());

                jTextField31.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString());

                jTextField31.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < consultantBillingTable.getRowCount(); i++) {

            if (consultantBillingTable.getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString());

                jTextField31.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(consultantBillingTable.getValueAt(i, 3).toString());

                jTextField31.setText(java.lang.String.valueOf(resFloat));
            }

        }

    }
    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        consultantBillingServiceSearchDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        consultantBillingTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), consultantBillingTable.getSelectedRow(), 0);
        consultantBillingTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), consultantBillingTable.getSelectedRow(), 2);
        consultantBillingTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2), consultantBillingTable.getSelectedRow(), 4);
        jTextField111.setText("");
        consultantBillingServiceSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select service_type,"
                + "CASE WHEN ('" + consultantBillingPayModeTxt.getText() + "' ILIKE 'Scheme') THEN anaesthetist_rate ELSE rate END AS price,"
                + "gl_account as gl_code FROM pb_operating_parameters WHERE "
                + "service_type ILIKE '" + jTextField111.getText() + "%' AND main_service = '" + consultantBillingRevenueDeptCmbx.getSelectedItem().toString() + "' order by service_type"));

        jSearchScrollPane1.setViewportView(jSearchTable1);
        System.out.println("Cannot sort out");
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void consultantBillingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultantBillingTableMouseClicked
        if (consultantBillingTable.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked();
        }          // Add your handling code here:
        if (consultantBillingTable.getSelectedColumn() == 5) {

            this.cmbox2MouseClicked();
        }
    }//GEN-LAST:event_consultantBillingTableMouseClicked
    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = consultantBillingTable.getLocationOnScreen();
        consultantBillingServiceSearchDialog.setSize(400, 200);
        consultantBillingServiceSearchDialog.setLocation(point);
        consultantBillingServiceSearchDialog.setVisible(true);
    }
    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        patientSearchDialog.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        consultantBillingPatientNameTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        consultantBillingPatientNoTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());

        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_patient_register where patient_no  ='" + consultantBillingPatientNoTxt.getText() + "'");
            while (rset1.next()) {
                consultantPatientCategoryTxt.setText(rset1.getObject(1).toString());
                consultantBillingPayModeTxt.setText(rset1.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        jTextField1131.setText("");
        //        this.populateTable1(this.jTextField9.getText());
        patientSearchDialog.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        if (this.jCheckBox1.isSelected() && this.jCheckBox31.isSelected()) {

            if (jTextField1131.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where patient_no ILIKE '" + jTextField1131.getText() + "%' and last_visit > current_date - 15 order by second_name"));

                jSearchTable21.setShowHorizontalLines(false);
                jSearchScrollPane21.setViewportView(jSearchTable21);

            }
        } else {
            if (this.jCheckBox1.isSelected() && this.jCheckBox41.isSelected()) {

                if (jTextField1131.getCaretPosition() < 3) {

                    System.out.println("Nothing");
                } else {
                    jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '" + jTextField1131.getText() + "%' and last_visit > current_date - 15 order by second_name"));

                    jSearchTable21.setShowHorizontalLines(false);
                    jSearchScrollPane21.setViewportView(jSearchTable21);

                }

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton1Clicked();
        try {
            String code = null;

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select code from pb_activity where activity_category  ILIKE 'CA'");
            while (rset1.next()) {
                code = rset1.getObject(1).toString();

            }

            java.sql.Statement stmt2 = connectDB.createStatement();
            java.sql.ResultSet rset2 = stmt2.executeQuery("select DISTINCT main_service from pb_operating_parameters where gl_account  ILIKE '" + code + "'");
            while (rset2.next()) {
                consultantBillingRevenueDeptCmbx.setSelectedItem(rset2.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
// Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.consultantBillingPatientNoTxt.getLocationOnScreen();

        patientSearchDialog.setSize(400, 200);

        patientSearchDialog.setLocation(point);

        patientSearchDialog.setVisible(true);

    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        serviceorcodeSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void serviceorcodeSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serviceorcodeSearchTableMouseClicked
        double bedAmt = 0.00; // java.lang.Double.valueOf(bedAmountTxt.getText());
        float billNo = 0;
        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select discount from pb_smartcards WHERE card_name = '" + schemeNameTxt.getText() + "'");
            while (rst11.next()) {

                billNo = rst11.getFloat(1);

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }

        discreetServicesTbl.setValueAt(serviceorcodeSearchTable.getValueAt(serviceorcodeSearchTable.getSelectedRow(), 0), discreetServicesTbl.getSelectedRow(), 0);
        discreetServicesTbl.setValueAt(1, discreetServicesTbl.getSelectedRow(), 1);
        discreetServicesTbl.setValueAt(serviceorcodeSearchTable.getValueAt(serviceorcodeSearchTable.getSelectedRow(), 1), discreetServicesTbl.getSelectedRow(), 2);
        discreetServicesTbl.setValueAt(serviceorcodeSearchTable.getValueAt(serviceorcodeSearchTable.getSelectedRow(), 2), discreetServicesTbl.getSelectedRow(), 4);

        serviceorcodeSearchTxt.setText("");

        double floatCol2 = java.lang.Double.parseDouble(discreetServicesTbl.getValueAt(discreetServicesTbl.getSelectedRow(), 1).toString());

        double floatCol3 = java.lang.Double.parseDouble(discreetServicesTbl.getValueAt(discreetServicesTbl.getSelectedRow(), 2).toString());

        if (billNo > 0) {
            double resVal = (floatCol2 * floatCol3) - ((floatCol2 * floatCol3) * billNo / 100);
            discreetServicesTbl.setValueAt(new java.lang.Float(resVal), discreetServicesTbl.getSelectedRow(), 3);
        } else {
            double resVal = floatCol2 * floatCol3;
            discreetServicesTbl.setValueAt(new java.lang.Float(resVal), discreetServicesTbl.getSelectedRow(), 3);
        }

        serviceorcodeSearchDialog.dispose();
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(discreetServicesTbl, 3);// + bedAmt;
        billTotalTxt.setText(java.lang.String.valueOf(totalSum));
        cardBalanceTxt.setText("0.00");
        double balance = java.lang.Double.valueOf(cardBalanceTxt.getText());
        //    double bill = java.lang.Double.valueOf(jTextField3.getText());
        if (balance > 0) {
            if (totalSum > balance) {
                javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE CARD BALANCE", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                savebillBtn.setEnabled(false);
                saveAndPrintBillBtn.setEnabled(false);
                rePrintBillBtn.setEnabled(false);
                // jButton7.setEnabled(false);
            } else {
                savebillBtn.setEnabled(true);
                // saveAndPrintBillBtn.setEnabled(true);
                rePrintBillBtn.setEnabled(true);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_serviceorcodeSearchTableMouseClicked

    private void serviceorcodeSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_serviceorcodeSearchTxtCaretUpdate

        String patNationality = "";
        String patCateg = "";
        String codes = this.glcodeTxt.getText();

        String codeType = null;

        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("SELECT DISTINCT code_type FROM pb_patient_names");
            while (rs.next()) {
                codeType = rs.getString(1);
            }

        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
        if (codeType.equalsIgnoreCase("subcode")) {

            if (this.searchbyCodeChkbx.isSelected()) {

                if (serviceorcodeSearchTxt.getCaretPosition() < 1) {

                    System.out.println("You MUST type more than one character for the search to work properly.");
                } else {
                    if (normalRateRbtn.isSelected()) {

                        serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,rate as price,'" + glcodeTxt.getText() + "' as glcode, code, main_service FROM pb_operating_parameters WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' AND  service_type NOT ILIKE '%bed%' order by 1"));// UNION ALL select DISTINCT product,selling_price,'" + glcodeTxt.getText() + "' as service_type,product_id, department as main_service FROM stockprices WHERE product ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'"));

                    } else {
                        serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,anaesthetist_rate as price,'" + glcodeTxt.getText() + "' as glcode, code, main_service FROM pb_operating_parameters WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' AND  service_type NOT ILIKE '%bed%' order by 1")); // UNION ALL select DISTINCT product,selling_price,'" + glcodeTxt.getText() + "' as service_type,product_id, department as main_service FROM stockprices WHERE product ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'"));

                    }

                    jSearchScrollPane.setViewportView(serviceorcodeSearchTable);
                }
            } else {
                if (serviceorcodeSearchTxt.getCaretPosition() < 1) {

                    System.out.println("You MUST type more than one character for the search to work properly.");
                } else {
                    if (normalRateRbtn.isSelected()) {
                        serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,rate as price,'" + glcodeTxt.getText() + "' as glcode, code, main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' AND service_type NOT ILIKE '%bed%' order by 1"));// UNION ALL select product DISTINCT as service_type,selling_price,gl_code, department as main_service FROM stockprices WHERE product ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'"));

                    } else {
                        serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,anaesthetist_rate as price,'" + glcodeTxt.getText() + "' as glcode, code, main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%'  AND service_type NOT ILIKE '%bed%' order by 1"));// UNION ALL select DISTINCT product as service_type,selling_price,gl_code, department as main_service FROM stockprices WHERE product ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'"));

                    }

                    System.out.println("Please revise your spelling for the typed item and search again.");

                }
            }
        } else {

            try {

                java.sql.Statement stmtTable11 = connectDB.createStatement();

                java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT pat_nationality AS nationility,category FROM hp_patient_register WHERE patient_no = '" + patientNumberTxt.getText() + "' UNION ALL SELECT nationality,wing FROM hp_admission WHERE visit_id = '" + schemeMemberNumberTxt.getText() + "'");

                while (rsetTable11.next()) {
                    patNationality = rsetTable11.getString(1);
                    patCateg = rsetTable11.getString(2);
                }
                if (this.searchbyCodeChkbx.isSelected()) {

                    if (serviceorcodeSearchTxt.getCaretPosition() < 1) {

                        System.out.println("You MUST type more than one character for the search to work properly.");
                    } else {
                        if (normalRateRbtn.isSelected()) {
                            if (patNationality.startsWith("NON")) {
                                serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT "
                                        + "service_type,other_prices as price,gl_account as glcode,code,main_service FROM pb_operating_parameters "
                                        + "WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                        + "AND service_type NOT ILIKE '%bed%'"
                                        + "UNION ALL SELECT DISTINCT service_type,other_prices as price,gl_account "
                                        + "AS glcode,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                        + " AND service_type ILIKE '%bed%' "
                                        + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%')  order by 1"));// 
                                //+" UNION ALL select DISTINCT product,selling_price,gl_code as service_type,"
                                // + "product_id, department FROM stockprices WHERE product_id ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'  ORDER BY 1"));

                            } else {
                                if (patCateg.startsWith("PRI")) {
                                    serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT "
                                            + "service_type,anaesthetist_rate as price,gl_account as glcode,code,main_service FROM pb_operating_parameters "
                                            + "WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + "AND service_type NOT ILIKE '%bed%'"
                                            + "UNION ALL SELECT DISTINCT service_type,anaesthetist_rate as price,gl_account "
                                            + "AS glcode,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + " AND service_type ILIKE '%bed%' "
                                            + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));//
                                    // + " UNION ALL select DISTINCT product,selling_price,gl_code as service_type,"
                                    // + "product_id,department FROM stockprices WHERE product_id ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'  ORDER BY 1"));

                                } else {

                                    serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT "
                                            + "service_type,rate as price,gl_account as glcode,code,main_service FROM pb_operating_parameters "
                                            + "WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + "AND service_type NOT ILIKE '%bed%'"
                                            + "UNION ALL SELECT DISTINCT service_type,rate as price,gl_account "
                                            + "AS glcode,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + " AND service_type ILIKE '%bed%' "
                                            + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));
                                    // + " UNION ALL select DISTINCT product,selling_price,gl_code as service_type,"
                                    // + "product_id,department FROM stockprices WHERE product_id ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'  ORDER BY 1"));
                                }
                            }
                        } else {
                            serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,anaesthetist_rate "
                                    + "AS price,gl_account as glcode,code,main_service FROM pb_operating_parameters WHERE code "
                                    + "ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%'  "
                                    + "AND service_type NOT ILIKE '%bed%'"
                                    + "UNION ALL  SELECT DISTINCT service_type,rate as price,gl_account "
                                    + "AS glcode,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                    + " AND service_type ILIKE '%bed%' "
                                    + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));
                            //+ "UNION ALL select DISTINCT product,selling_price,gl_code as service_type,product_id,department FROM "
                            //+ "stockprices WHERE product_id ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'  ORDER BY 1"));

                        }

                        jSearchScrollPane.setViewportView(serviceorcodeSearchTable);

                    }
                } else {
                    if (serviceorcodeSearchTxt.getCaretPosition() < 1) {

                        System.out.println("You MUST type more than one character for the search to work properly.");
                    } else {
                        if (normalRateRbtn.isSelected()) {

                            if (patNationality.startsWith("NON")) {
                                serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT "
                                        + "service_type,other_prices as price,gl_account as glcode,code,main_service FROM pb_operating_parameters "
                                        + "WHERE service_type ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                        + "AND service_type NOT ILIKE '%bed%'"
                                        + "UNION ALL SELECT DISTINCT service_type,other_prices as price,gl_account "
                                        + "AS glcode,code,main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                        + " AND service_type ILIKE '%bed%' "
                                        + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));
                                //+ " UNION ALL select DISTINCT product as service_type,selling_price,gl_code as service_type,"
                                //+ "product_id, department FROM stockprices WHERE product ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'  ORDER BY 1"));

                            } else {
                                if (patCateg.startsWith("PRI")) {
                                    serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT "
                                            + "service_type,anaesthetist_rate as price,gl_account as glcode,code, main_service FROM pb_operating_parameters "
                                            + "WHERE service_type ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + "AND service_type NOT ILIKE '%bed%'"
                                            + "UNION ALL SELECT DISTINCT service_type,anaesthetist_rate as price, gl_account "
                                            + "AS glcode,code, main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + " AND service_type ILIKE '%bed%' "
                                            + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));
                                    //+ " UNION ALL select DISTINCT product AS service_type,selling_price, gl_code as service_type,"
                                    // + "product_id,department FROM stockprices WHERE product ILIKE '%" + serviceorcodeSearchTxt.getText() + "%' "
                                    // + " ORDER BY 1"));

                                } else {

                                    serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,rate AS price,"
                                            + "gl_account as glcode, main_service FROM pb_operating_parameters WHERE service_type "
                                            + "ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%'"
                                            + "AND service_type NOT ILIKE '%bed%'"
                                            + "UNION ALL SELECT DISTINCT service_type,rate AS price,"
                                            + "gl_account as glcode, main_service FROM pb_operating_parameters WHERE service_type "
                                            + "ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                            + "AND service_type ILIKE '%bed%' "
                                            + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));
                                    //+ "UNION ALL select DISTINCT product as service_type,selling_price,gl_code,department FROM stockprices WHERE product "
                                    //+ "ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'  ORDER BY 1"));
                                }
                            }

                        } else {
                            serviceorcodeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,anaesthetist_rate"
                                    + " AS price, gl_account as glcode, main_service FROM pb_operating_parameters WHERE service_type "
                                    + "ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                    + "AND service_type NOT ILIKE '%bed%'"
                                    + "UNION ALL SELECT DISTINCT service_type,anaesthetist_rate"
                                    + " AS price, gl_account as glcode,main_service FROM pb_operating_parameters WHERE service_type "
                                    + "ILIKE '%" + serviceorcodeSearchTxt.getText().toString() + "%' "
                                    + "AND service_type ILIKE '%bed%' "
                                    //+ "AND main_service ILIKE '" + jComboBox1.getSelectedItem() + "' "
                                    + "AND (main_service ILIKE '%ICU%' OR main_service ILIKE '%I.C.U.%') order by 1"));
                            //+ "UNION ALL select DISTINCT product as service_type,selling_price,gl_code,department FROM stockprices WHERE product"
                            //+ " ILIKE '%" + serviceorcodeSearchTxt.getText() + "%'"));

                        }

                        System.out.println("Problem searching for the required item. Check spelling and search again");

                    }
                }
            } catch (java.sql.SQLException sqlExec) {

                sqlExec.printStackTrace();

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }
        // }

        // Add your handling code here:
    }//GEN-LAST:event_serviceorcodeSearchTxtCaretUpdate
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = billingTablesJscrl.getLocationOnScreen();
        serviceorcodeSearchDialog.setSize(700, 200);
        serviceorcodeSearchDialog.setLocation(point);
        serviceorcodeSearchDialog.setVisible(true);
    }
    private void disposeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeBtnActionPerformed
        this.generalBillingPatientSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_disposeBtnActionPerformed

    private void patientSearchTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTblMouseClicked
        int interval = 0;
        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        double outstanding = 0.00;
        boolean appLimit = false;
        boolean smartcard = false;
        String memberno = null;
        cardBalanceTxt.setText("0.00");
        //  saveAndPrintBillBtn.setEnabled(true);
        savebillBtn.setEnabled(true);
        rePrintBillBtn.setEnabled(false);
        bedAmountTxt.setText("0.00");
        patientNameTxt.setText(patientSearchTbl.getValueAt(patientSearchTbl.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(patientSearchTbl.getValueAt(patientSearchTbl.getSelectedRow(), 0).toString());
        if (mchfpChkbx.isSelected()) {
            age = patientSearchTbl.getValueAt(patientSearchTbl.getSelectedRow(), 4).toString();
        }
        // generalBillingPatientSearchDialog.dispose();
        String adm = null;

        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select discharge from hp_admission where patient_no  ='" + patientNumberTxt.getText() + "' and discharge = false order by date_admitted desc limit 1");
            while (rset1.next()) {
                adm = rset1.getString(1);
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        if (this.opdChkbx.isSelected()) {

            unitNumberTxt.setText(patientSearchTbl.getValueAt(patientSearchTbl.getSelectedRow(), 4).toString());
            wardNameTxt.setText("");
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,card_no from hp_patient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                while (rset1.next()) {
                    patientCategoryTxt.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    schemeNameTxt.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }
                if (mchfpChkbx.isSelected()) {
                    patientCategoryTxt.setText("MCH");
                    paymentModeCmbx.setSelectedItem("CASH");
                }
                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + schemeNameTxt.getText() + "'");
                    while (rset1cz3.next()) {
                        schemeAccountNumberTxt.setText(rset1cz3.getObject(1).toString());
                        payerNameTxt.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }

                    if (opdChkbx.isSelected()) {
                        if (smartcard) {
                            savebillBtn.setEnabled(false);
                            saveAndPrintBillBtn.setEnabled(false);
                            rePrintBillBtn.setEnabled(false);
                            readSmartCardBtn.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must Forward from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select limit_amount from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + schemeNameTxt.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;

                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();

            }
        } else {
            if (this.ipdChkbx.isSelected() || this.mchfpChkbx.isSelected()) {
                unitNumberTxt.setText(patientSearchTbl.getValueAt(patientSearchTbl.getSelectedRow(), 2).toString());
                wardNameTxt.setText(patientSearchTbl.getValueAt(patientSearchTbl.getSelectedRow(), 3).toString());
                try {

                    java.sql.Statement stmt11 = connectDB.createStatement();
                    java.sql.ResultSet rset11 = stmt11.executeQuery("select iplimit from hp_inpatient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                    while (rset11.next()) {
                        limit = rset11.getDouble(1);
                    }
                    java.sql.Statement stmt111 = connectDB.createStatement();
                    java.sql.ResultSet rset111 = stmt111.executeQuery("select sum(debit) from hp_patient_card where patient_no  ='" + patientNumberTxt.getText() + "' and (invoice_no not like 'O%' OR invoice_no not like 'I%' or invoice_no is null)");
                    while (rset111.next()) {
                        bal = rset111.getDouble(1);

                    }

                    java.sql.Statement stmt1111 = connectDB.createStatement();
                    java.sql.ResultSet rset1111 = stmt1111.executeQuery("select sum(credit) from hp_patient_card where patient_no  ='" + patientNumberTxt.getText() + "' and (invoice_no not like 'O%' OR invoice_no not like 'I%' or invoice_no is null)");
                    while (rset1111.next()) {
                        rect = rset1111.getDouble(1);

                    }

                } catch (java.sql.SQLException sqe) {
                    sqe.printStackTrace();
                    //  System.out.println("Insert not successful");
                }
                if (bal > (limit + rect)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Limit Exceeded", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    this.savebillBtn.setEnabled(false);
                } else {
                    this.savebillBtn.setEnabled(true);
                    try {

                        java.sql.Statement stmt1 = connectDB.createStatement();
                        java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,member_no from hp_inpatient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                        while (rset1.next()) {
                            patientCategoryTxt.setText(rset1.getObject(1).toString());
                            paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                            schemeNameTxt.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                            memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                            System.out.println(memberno);
                        }

                        if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                            java.sql.Statement stmt1cz3 = connectDB.createStatement();
                            java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + schemeNameTxt.getText() + "'");
                            while (rset1cz3.next()) {
                                schemeAccountNumberTxt.setText(rset1cz3.getObject(1).toString());
                                payerNameTxt.setText(rset1cz3.getObject(2).toString());
                                smartcard = rset1cz3.getBoolean(3);
                            }
                            if (opdChkbx.isSelected()) {
                                if (smartcard) {
                                    savebillBtn.setEnabled(false);
                                    saveAndPrintBillBtn.setEnabled(false);
                                    rePrintBillBtn.setEnabled(false);
                                    readSmartCardBtn.setEnabled(true);
                                    javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                }
                            }
                            java.sql.Statement stmt1cz = connectDB.createStatement();
                            java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                            while (rset1cz.next()) {
                                appLimit = rset1cz.getBoolean(1);
                            }
                            System.out.println(appLimit);
                            if (appLimit) {
                                ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                                java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                                for (int x = 0; x < rangeDates.length; x++) {
                                    System.out.println(rangeDates[x]);
                                    try {

                                        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                        com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                        java.lang.String monthString = dateFormatter.getDateString();

                                        interval = x;

                                    } catch (java.text.ParseException prs) {
                                        prs.printStackTrace();
                                    }
                                }
                                java.sql.Statement stmt1c = connectDB.createStatement();
                                java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                                while (rset1c.next()) {
                                    limit = rset1c.getDouble(1);
                                }
                                for (int t = 0; t < rangeDates.length; t++) {
                                    java.sql.Statement stmt1cx = connectDB.createStatement();
                                    System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                                    java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + schemeNameTxt.getText() + "'");
                                    while (rset1cx.next()) {
                                        bal = rset1cx.getDouble(1);
                                        System.out.println(bal);
                                    }
                                }
                                outstanding = limit - bal;
                                // jTextField8.setText(java.lang.String.valueOf(outstanding));
                                if (outstanding >= limit) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {
                                }
                            }
                        }
                    } catch (java.sql.SQLException sqe) {
                        sqe.printStackTrace();
                        //  System.out.println("Insert not successful");
                    }
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Patient not in ward", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            }
        }
        try {
            float noofDays = 0;
            float amount = 0;
            float totalAmt = 0;
            float bedCharged = 0;
            String visitId = null;
            java.sql.Statement pss111 = connectDB.createStatement();
            java.sql.ResultSet rss111 = pss111.executeQuery("select (CURRENT_DATE::date - date_admitted::date),deposit,visit_id FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' ORDER BY visit_id DESC LIMIT 1");
            while (rss111.next()) {
                noofDays = rss111.getFloat(1);
                amount = rss111.getFloat(2);
                visitId = rss111.getString(3);
                schemeMemberNumberTxt.setText(visitId);
                totalAmt = noofDays * amount;

            }

            java.sql.Statement pss1111 = connectDB.createStatement();
            java.sql.ResultSet rss1111 = pss1111.executeQuery("SELECT SUM(dosage) FROM hp_patient_card WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitId + "' AND service ILIKE '%bed%' AND debit > 0");
            while (rss1111.next()) {
                bedCharged = rss1111.getFloat(1);

            }
            totalAmt = (noofDays - bedCharged) * amount;
            //  bedAmountTxt.setText(java.lang.String.valueOf(totalAmt));
        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            System.out.println(sqlex.getMessage());
        }
        patientSearchFieldTxt.setText("");
        generalBillingPatientSearchDialog.dispose();

        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
            javax.swing.JOptionPane.showMessageDialog(this, "You must enter a valid client Mpesa telephone number in the format : 254-7xxxxxxx on the Bill Payer Telephone No field");
        }
        // Add your handling code here:
    }//GEN-LAST:event_patientSearchTblMouseClicked

    private void patientSearchFieldTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientSearchFieldTxtCaretUpdate
        if (this.opdChkbx.isSelected() && this.byNumberChkbx.isSelected()) {

            if (patientSearchFieldTxt.getCaretPosition() < 5) {
                System.out.println("Nothing");
            } else {

                patientSearchTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT patient_no, name, year_of_birth, residence, unit_number from patient_select where patient_no ILIKE '%" + patientSearchFieldTxt.getText() + "%' or unit_number ILIKE '%" + patientSearchFieldTxt.getText() + "%' order by patient_no"));

                patientSearchTbl.setShowHorizontalLines(false);
                patientSearchJscrl.setViewportView(patientSearchTbl);

            }
        } else {
            if (this.opdChkbx.isSelected() && this.byNameChkbx.isSelected()) {
                if (patientSearchFieldTxt.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {

                    patientSearchTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT patient_no, name, year_of_birth, residence, unit_number from patient_select where name ILIKE '%" + patientSearchFieldTxt.getText() + "%' order by name"));

                    patientSearchTbl.setShowHorizontalLines(false);
                    patientSearchJscrl.setViewportView(patientSearchTbl);

                }
            }
        }
//
//        if (mchfpChkbx.isSelected()) {
//            patientSearchTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT anc as anc_no, first_name||' '||middle_name||' '||last_name, telephone, next_of_kin, age from rh.mother_details where anc ILIKE '%" + patientSearchFieldTxt.getText() + "%' or first_name||' '||middle_name||' '||last_name  ILIKE '%" + patientSearchFieldTxt.getText() + "%' order by 2"));
//
//            patientSearchTbl.setShowHorizontalLines(false);
//            patientSearchJscrl.setViewportView(patientSearchTbl);
//        }
        if (this.mchfpChkbx.isSelected()) {
            if (patientSearchFieldTxt.getCaretPosition() > 3) {
                patientSearchTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT anc as anc_no, first_name||' '||middle_name||' '||last_name, telephone, next_of_kin, age::int as age from rh.mother_details where anc ILIKE '%" + patientSearchFieldTxt.getText() + "%' or first_name||' '||middle_name||' '||last_name  ILIKE '%" + patientSearchFieldTxt.getText() + "%' "
                        + " UNION SELECT DISTINCT fp_clinic_no as anc_no, full_name, telephone_no as telephone, '' as next_of_kin, age::int as age from rh.fp_services_register where fp_clinic_no ILIKE '%" + patientSearchFieldTxt.getText() + "%' or full_name  ILIKE '%" + patientSearchFieldTxt.getText() + "%'"
                        + " UNION SELECT DISTINCT pnc_no as anc_no, full_name, telephone, '' as next_of_kin, age::int as age from rh.post_natal_follow_up_register where pnc_no ILIKE '%" + patientSearchFieldTxt.getText() + "%' or full_name  ILIKE '%" + patientSearchFieldTxt.getText() + "%' ORDER BY 2"));

                patientSearchTbl.setShowHorizontalLines(false);
                patientSearchJscrl.setViewportView(patientSearchTbl);
            }
        }
        if (this.ipdChkbx.isSelected() && this.byNumberChkbx.isSelected()) {

            if (patientSearchFieldTxt.getCaretPosition() < 5) {
                System.out.println("Nothing");
            } else {
                patientSearchTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT patient_no, name, unit_number, ward from inpatient_list where patient_no ILIKE '%" + patientSearchFieldTxt.getText() + "%' or unit_number ILIKE '%" + patientSearchFieldTxt.getText() + "%' order by patient_no"));

                patientSearchTbl.setShowHorizontalLines(false);
                patientSearchJscrl.setViewportView(patientSearchTbl);

            }
        } else {
            if (this.ipdChkbx.isSelected() && this.byNameChkbx.isSelected()) {
                patientSearchTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT patient_no, name, unit_number, ward from inpatient_list where name ILIKE '%" + patientSearchFieldTxt.getText() + "%' order by name"));
                patientSearchTbl.setShowHorizontalLines(false);
                patientSearchJscrl.setViewportView(patientSearchTbl);

            }
        }

    }//GEN-LAST:event_patientSearchFieldTxtCaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked2();
        //saveAndPrintBillBtn.setEnabled(true);
        savebillBtn.setEnabled(true);
        rePrintBillBtn.setEnabled(false);
        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        generalBillingPatientSearchDialog.setSize(700, 200);

        generalBillingPatientSearchDialog.setLocation(point);

        generalBillingPatientSearchDialog.setVisible(true);

    }

    /*
     */
    private void revenueDepartmentCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revenueDepartmentCmbxActionPerformed
        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select code,sub_code from pb_activity WHERE activity ilike '" + revenueDepartmentCmbx.getSelectedItem() + "'");
            while (rst11.next()) {

                glcodeTxt.setText(rst11.getString(1));
                subActivityTxt.setText(rst11.getString(2));

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        // Add your handling code here:
    }//GEN-LAST:event_revenueDepartmentCmbxActionPerformed

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed
        double bedAmt = 0.00;//java.lang.Double.valueOf(bedAmountTxt.getText());
        if (back2ServicesTableChkbx.isSelected() || applyPackagesBillingChkbx.isSelected()) {

            int rows2Delete = discreetServicesTbl.getSelectedRowCount();

            int[] selectedRows = discreetServicesTbl.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {

                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) discreetServicesTbl.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }

                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) discreetServicesTbl.getModel();

                    defTableModel.removeRow(discreetServicesTbl.getSelectedRow());
                }
            }
        } else if (packageBillingChkbx.isSelected()) {
            int rows2Delete = packagesTbl.getSelectedRowCount();

            int[] selectedRows = packagesTbl.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {

                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) packagesTbl.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }

                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) packagesTbl.getModel();

                    defTableModel.removeRow(packagesTbl.getSelectedRow());
                }
            }
        }

        this.populateDiscreetServicesTable();

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(discreetServicesTbl, 3); // + bedAmt;

        billTotalTxt.setText(java.lang.String.valueOf(totalSum));

        // Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < discreetServicesTbl.getRowCount(); i++) {

            if (discreetServicesTbl.getValueAt(i, 3) != null) {

                resFloat = resFloat + Double.parseDouble(discreetServicesTbl.getValueAt(i, 3).toString());

                billTotalTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(discreetServicesTbl.getValueAt(i, 3).toString());

                billTotalTxt.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < discreetServicesTbl.getRowCount(); i++) {

            if (discreetServicesTbl.getValueAt(i, 3) != null) {

                //   if (jTable11.getSelectedColumn() == 1) {
                resFloat = resFloat + Double.parseDouble(discreetServicesTbl.getValueAt(i, 3).toString());

                //   }
                billTotalTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(discreetServicesTbl.getValueAt(i, 3).toString());

                //   }
                billTotalTxt.setText(java.lang.String.valueOf(resFloat));
            }

        }

    }

    private void cmbox4ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void cmbox3ActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox3.getSelectedItem();

    }
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = discreetServicesTbl.getSelectedRow();

        if (selectedGuaran != null) {

            try {

                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '" + selectedGuaran + "'");

                //java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,ac.code from st_stock_prices sp,pb_activity ac where ac.activity ='Stock' AND product = '"+selectedGuaran+"'");
                while (rs.next()) {
                    //jTextField4.setText(rs.getObject(1).toString());
                    discreetServicesTbl.setValueAt(rs.getObject(1), i, 2);
                    discreetServicesTbl.setValueAt(rs.getObject(2), i, 4);
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        }

    }

    private void clearformDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearformDataBtnActionPerformed
        patientNameTxt.setText("");
        patientCategoryTxt.setText("");
        billTotalTxt.setText("");
        patientNumberTxt.setText("");
        schemeAccountNumberTxt.setText("");
        payerNameTxt.setText("");

        doctorAcctNumberTxt.setText("");
        doctorNameTxt.setText("");
        unitNumberTxt.setText("");
        schemeMemberNumberTxt.setText("");
        schemeMemberNameTxt.setText("");
        cardBalanceTxt.setText("0");
        for (int k = 0; k < discreetServicesTbl.getRowCount(); k++) {
            for (int r = 0; r < discreetServicesTbl.getColumnCount(); r++) {
                discreetServicesTbl.setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < packagesTbl.getRowCount(); k++) {
            for (int r = 0; r < packagesTbl.getColumnCount(); r++) {
                packagesTbl.setValueAt(null, k, r);
            }
        }

        //  this.jComboBox131.setSelectedItem(null);
        billTotalTxt.setText("0.00");
        // Add your handling code here:
    }//GEN-LAST:event_clearformDataBtnActionPerformed

    private void savebillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebillBtnActionPerformed

        System.out.println("Payer Mobile Telephone Number : [" + payerMobileTelephoneNumberTxt.getText().replace(" ", "").replace("-", "").length() + "]");

        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
            if (payerMobileTelephoneNumberTxt.getText().replace(" ", "").replace("-", "").length() == 12) {
                payerTelephoneNumber = payerMobileTelephoneNumberTxt.getText().replace(" ", "").replace("-", "");

                // Check condition on balance for prepaid debtors
                if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
                    double totalSum = Double.parseDouble(billTotalTxt.getText());
                    if (totalSum > 0) {
                        if (totalSum > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
                            javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST MAKE ADDITIONAL DEPOSIT.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            savebillBtn.setEnabled(false);
                            saveAndPrintBillBtn.setEnabled(false);
                            rePrintBillBtn.setEnabled(false);

                            // jButton7.setEnabled(false);
                        } else {
                            savebillBtn.setEnabled(true);
                            // saveAndPrintBillBtn.setEnabled(true);
                            rePrintBillBtn.setEnabled(true);

                            if (java.lang.Double.valueOf(billTotalTxt.getText()) > 0.00 && patientNumberTxt.getText().toCharArray().length > 0) {
                                double bill = java.lang.Double.valueOf(billTotalTxt.getText());
                                // if(bill > 0){
                                java.util.Date periodFrom = null;
                                java.util.Date periodTo = null;

                                try {

                                    java.sql.Statement stmtf = connectDB.createStatement();
                                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                                    while (rsetf.next()) {
                                        periodFrom = rsetf.getDate(1);
                                        periodTo = rsetf.getDate(2);
                                    }

                                } catch (java.sql.SQLException sq) {
                                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    System.out.println(sq.getMessage());
                                    jLabel3.setForeground(java.awt.Color.red);
                                    jLabel3.setText("Sorry. Insert not Successful");
                                }

                                if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    if (discreetServicesTbl.isEditing()) {
                                        discreetServicesTbl.getCellEditor().stopCellEditing();
                                    }
                                    /*
                                 * if (packagesTbl.isEditing()) {
                                 * packagesTbl.getCellEditor().stopCellEditing(); }
                                 *
                                     */
                                    dispatchThread = new DispatchThread();

                                    dispatchThread.start();

                                    savebillBtn.setEnabled(false);

                                    saveAndPrintBillBtn.setEnabled(false);
                                }

                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: You MUST enter all form details correctly.\nCheck that mandatory fields have valid data.\n There MUST be a valid bill.");
                            }

                        }
                    }

                } else {

                    if (java.lang.Double.valueOf(billTotalTxt.getText()) > 0.00 && patientNumberTxt.getText().toCharArray().length > 0) {
                        double bill = java.lang.Double.valueOf(billTotalTxt.getText());
                        // if(bill > 0){
                        java.util.Date periodFrom = null;
                        java.util.Date periodTo = null;

                        try {

                            java.sql.Statement stmtf = connectDB.createStatement();
                            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                            while (rsetf.next()) {
                                periodFrom = rsetf.getDate(1);
                                periodTo = rsetf.getDate(2);
                            }

                        } catch (java.sql.SQLException sq) {
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            System.out.println(sq.getMessage());
                            jLabel3.setForeground(java.awt.Color.red);
                            jLabel3.setText("Sorry. Insert not Successful");
                        }

                        if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        } else {
                            if (discreetServicesTbl.isEditing()) {
                                discreetServicesTbl.getCellEditor().stopCellEditing();
                            }
                            /*
                         * if (packagesTbl.isEditing()) {
                         * packagesTbl.getCellEditor().stopCellEditing(); }
                         *
                             */
                            dispatchThread = new DispatchThread();

                            dispatchThread.start();

                            savebillBtn.setEnabled(false);

                            saveAndPrintBillBtn.setEnabled(false);
                        }

                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "ERROR: You MUST enter all form details correctly.\nCheck that mandatory fields have valid data.\n There MUST be a valid bill.");
                    }
                }

            } else if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").replace(" ", "").length() != 12) {
                javax.swing.JOptionPane.showMessageDialog(this, "Please check telephone number! It should be formatted as follows : 2547xxxxxxxx");
            }

        } else {
            // Check condition on balance for prepaid debtors
            if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
                double totalSum = Double.parseDouble(billTotalTxt.getText());
                if (totalSum > 0) {
                    if (totalSum > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
                        javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST MAKE ADDITIONAL DEPOSIT.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        savebillBtn.setEnabled(false);
                        saveAndPrintBillBtn.setEnabled(false);
                        rePrintBillBtn.setEnabled(false);

                        // jButton7.setEnabled(false);
                    } else {
                        savebillBtn.setEnabled(true);
                        // saveAndPrintBillBtn.setEnabled(true);
                        rePrintBillBtn.setEnabled(true);

                        if (java.lang.Double.valueOf(billTotalTxt.getText()) > 0.00 && patientNumberTxt.getText().toCharArray().length > 0) {
                            double bill = java.lang.Double.valueOf(billTotalTxt.getText());
                            // if(bill > 0){
                            java.util.Date periodFrom = null;
                            java.util.Date periodTo = null;

                            try {

                                java.sql.Statement stmtf = connectDB.createStatement();
                                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                                while (rsetf.next()) {
                                    periodFrom = rsetf.getDate(1);
                                    periodTo = rsetf.getDate(2);
                                }

                            } catch (java.sql.SQLException sq) {
                                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                System.out.println(sq.getMessage());
                                jLabel3.setForeground(java.awt.Color.red);
                                jLabel3.setText("Sorry. Insert not Successful");
                            }

                            if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                if (discreetServicesTbl.isEditing()) {
                                    discreetServicesTbl.getCellEditor().stopCellEditing();
                                }
                                /*
                                 * if (packagesTbl.isEditing()) {
                                 * packagesTbl.getCellEditor().stopCellEditing(); }
                                 *
                                 */
                                dispatchThread = new DispatchThread();

                                dispatchThread.start();

                                savebillBtn.setEnabled(false);

                                saveAndPrintBillBtn.setEnabled(false);
                            }

                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: You MUST enter all form details correctly.\nCheck that mandatory fields have valid data.\n There MUST be a valid bill.");
                        }

                    }
                }

            } else {

                if (java.lang.Double.valueOf(billTotalTxt.getText()) > 0.00 && patientNumberTxt.getText().toCharArray().length > 0) {
                    double bill = java.lang.Double.valueOf(billTotalTxt.getText());
                    // if(bill > 0){
                    java.util.Date periodFrom = null;
                    java.util.Date periodTo = null;

                    try {

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                        while (rsetf.next()) {
                            periodFrom = rsetf.getDate(1);
                            periodTo = rsetf.getDate(2);
                        }

                    } catch (java.sql.SQLException sq) {
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        System.out.println(sq.getMessage());
                        jLabel3.setForeground(java.awt.Color.red);
                        jLabel3.setText("Error! Data not saved. Check your entries and try again");
                    }

                    if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        if (discreetServicesTbl.isEditing()) {
                            discreetServicesTbl.getCellEditor().stopCellEditing();
                        }
                        /*
                         * if (packagesTbl.isEditing()) {
                         * packagesTbl.getCellEditor().stopCellEditing(); }
                         *
                         */
                        dispatchThread = new DispatchThread();

                        dispatchThread.start();

                        savebillBtn.setEnabled(false);

                        saveAndPrintBillBtn.setEnabled(false);
                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "ERROR: You MUST enter all form details correctly.\nCheck that mandatory fields have valid data.\n There MUST be a valid bill.");
                }
            }

        }


    }//GEN-LAST:event_savebillBtnActionPerformed

    private void serviceorcodeSearchTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serviceorcodeSearchTableKeyReleased
        if (serviceorcodeSearchTable.editCellAt(serviceorcodeSearchTable.getSelectedRow(), serviceorcodeSearchTable.getSelectedColumn())) {
            javax.swing.JOptionPane.showMessageDialog(this, "Be warned  you cannot change data".toUpperCase(), "Warning Message", javax.swing.JOptionPane.WARNING_MESSAGE);

            for (int k = 0; k < serviceorcodeSearchTable.getRowCount(); k++) {
                for (int r = 0; r < serviceorcodeSearchTable.getColumnCount(); r++) {
                    serviceorcodeSearchTable.setValueAt(null, k, r);
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_serviceorcodeSearchTableKeyReleased

    private void bedAmountTxtPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_bedAmountTxtPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_bedAmountTxtPropertyChange

    private void bedAmountTxtVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_bedAmountTxtVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_bedAmountTxtVetoableChange

    private void consultantBillingRevenueDeptCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultantBillingRevenueDeptCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consultantBillingRevenueDeptCmbxActionPerformed

    private void paymentModeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeCmbxActionPerformed

        if (paymentModeCmbx.getSelectedItem().toString() == "Cash") {
            normalRateRbtn.setSelected(true);
            specialRateRbtn.setEnabled(false);
        } else {
            specialRateRbtn.setSelected(false);
            normalRateRbtn.setEnabled(true);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentModeCmbxActionPerformed

    private void consultantBillingPatientNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultantBillingPatientNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consultantBillingPatientNameTxtActionPerformed

    private void packagesTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_packagesTblKeyReleased
        if (packagesTbl.getValueAt(packagesTbl.getSelectedRow(), 1) != null) {
            float qty = java.lang.Float.parseFloat(packagesTbl.getValueAt(packagesTbl.getSelectedRow(), 1).toString());
            float price = java.lang.Float.parseFloat(packagesTbl.getValueAt(packagesTbl.getSelectedRow(), 2).toString());
            System.out.println("This is the price " + price);
            double total = (qty * price);
            packagesTbl.setValueAt(total, packagesTbl.getSelectedRow(), 3);
            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(packagesTbl, 3);
            //jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
            packageAmountTxt.setText(java.lang.String.valueOf(totalSum));
            //  jTextField3.setText(java.lang.String.valueOf(totalSum));
            double balance = java.lang.Double.valueOf(cardBalanceTxt.getText());
            //    double bill = java.lang.Double.valueOf(jTextField3.getText());
            System.out.println("This is the balance " + balance);
            if (balance > 0) {
                if (totalSum > balance) {
                    javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE CARD BALANCE", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    savebillBtn.setEnabled(false);
                    saveAndPrintBillBtn.setEnabled(false);
                    rePrintBillBtn.setEnabled(false);
                    // jButton7.setEnabled(false);
                } else {
                    savebillBtn.setEnabled(true);
                    // saveAndPrintBillBtn.setEnabled(true);
                    rePrintBillBtn.setEnabled(true);
                }
            }
// Check condition on balance for prepaid debtors
            if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
                if (totalSum > 0) {
                    System.out.println("\n\n\n\n\n\n\n\nThe card balance is " + (com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())));
                    cardBalanceTxt.setText(String.valueOf(com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())));
                    if (totalSum > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
                        javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST TOP UP THE BALANCE.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        savebillBtn.setEnabled(false);
                        saveAndPrintBillBtn.setEnabled(false);
                        rePrintBillBtn.setEnabled(false);
                        discreetServicesTbl.setValueAt(null, discreetServicesTbl.getSelectedRow(), 1);
                        discreetServicesTbl.setValueAt(null, discreetServicesTbl.getSelectedRow(), 3);
                        // jButton7.setEnabled(false);
                    } else {
                        savebillBtn.setEnabled(true);
                        //  saveAndPrintBillBtn.setEnabled(true);
                        rePrintBillBtn.setEnabled(true);
                    }
                }
            }
            this.populateDiscreetServicesTable();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_packagesTblKeyReleased

    private void packagesTblKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_packagesTblKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_packagesTblKeyPressed

    private void packagesTblCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_packagesTblCaretPositionChanged
// TODO add your handling code here:
    }//GEN-LAST:event_packagesTblCaretPositionChanged

    private void packagesTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_packagesTblMouseClicked

        if (packagesTbl.getSelectedColumn() == 0) {

            this.cmboxMouseClicked2();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_packagesTblMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please Select a patient file first");

            searchButton.doClick();

        } else {

            com.afrisoftech.reports.FinalInterimPatientlnvSummPdf policy = new com.afrisoftech.reports.FinalInterimPatientlnvSummPdf();

            policy.FinalInterimPatientlnvSummPdf(connectDB, schemeMemberNumberTxt.getText(), patientNumberTxt.getText());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please Select a patient file first");

            searchButton.doClick();
        } else {
            com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf policy = new com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf();

            policy.FinalDescInPatientIntmlnvPdf(connectDB, schemeMemberNumberTxt.getText(), patientNumberTxt.getText());

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mergeOpBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeOpBillBtnActionPerformed
        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select * from funsoft_outpatient_bills('" + this.oldOPVisitDatePicker.getDate() + "', '" + patientNumberTxt.getText() + "')");
            int i = 0;
            while (rsetTable1.next()) {
                discreetServicesTbl.setValueAt(rsetTable1.getObject(1), i, 0);
                discreetServicesTbl.setValueAt(rsetTable1.getObject(2), i, 1);
                discreetServicesTbl.setValueAt(rsetTable1.getObject(3), i, 2);
                discreetServicesTbl.setValueAt(rsetTable1.getObject(4), i, 3);
                discreetServicesTbl.setValueAt(rsetTable1.getObject(5), i, 4);
                i++;
            }
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_mergeOpBillBtnActionPerformed

    private void doctorAcctNumberTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorAcctNumberTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorAcctNumberTxtActionPerformed

    private void femaleChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleChkbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleChkbxActionPerformed

    private void packagesBilling() {

        System.out.println("Showing dialog");
        java.awt.Point point = billingTablesJscrl.getLocationOnScreen();
        packagesSearchDialog.setSize(700, 200);
        packagesSearchDialog.setLocation(point);
        packagesSearchDialog.setVisible(true);

    }

    private void populateDiscreetServicesTable() {
        if (packageBillingChkbx.isSelected()) {
            for (int m = 0; m < discreetServicesTbl.getRowCount(); m++) {
                for (int n = 0; n < discreetServicesTbl.getColumnCount(); n++) {
                    discreetServicesTbl.setValueAt(null, m, n);
                }
            }
            int rowIndex = 0;
            for (int i = 0; i < packagesTbl.getRowCount(); i++) {
                if (packagesTbl.getValueAt(i, 0) != null) {
                    try {
                        java.sql.PreparedStatement pstmtDiscreetServices = connectDB.prepareStatement("SELECT item_service, qty, price, glcode FROM packages WHERE package = ?"); // AND glcode = ?");
                        pstmtDiscreetServices.setString(1, packagesTbl.getValueAt(i, 0).toString());
                        //  pstmtDiscreetServices.setString(2, packagesTbl.getValueAt(i, 4).toString());
                        java.sql.ResultSet rsetDiscreetServices = pstmtDiscreetServices.executeQuery();
                        while (rsetDiscreetServices.next()) {
                            System.out.println("Billing packages items : [" + rsetDiscreetServices.getString(1) + "]");
                            discreetServicesTbl.setValueAt(rsetDiscreetServices.getString(1), rowIndex, 0);
                            discreetServicesTbl.setValueAt(Float.parseFloat(packagesTbl.getValueAt(i, 1).toString()) * rsetDiscreetServices.getInt(2), rowIndex, 1);
                            discreetServicesTbl.setValueAt(rsetDiscreetServices.getInt(3), rowIndex, 2);
                            discreetServicesTbl.setValueAt(Float.parseFloat(packagesTbl.getValueAt(i, 1).toString()) * rsetDiscreetServices.getInt(2) * rsetDiscreetServices.getInt(3), rowIndex, 3);
                            discreetServicesTbl.setValueAt(rsetDiscreetServices.getString(4), rowIndex, 4);
                            rowIndex++;
                        }
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                        Logger.getLogger(GeneralBillingIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            billTotalTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(discreetServicesTbl, 3)));
            //To change body of generated methods, choose Tools | Templates.
        }

    }

    private class SearchThread extends java.lang.Thread {

        public void SearchThread() {
        }

        public void run() {

            searchNames();

        }
    }

    private class SearchServicesThread extends java.lang.Thread {

        public void SearchServicesThread() {
        }

        public void run() {

            searchServices();

        }
    }

    public void searchNames() {
        int j = 0;
        int i = 0;
    }

    public void searchServices() {
    }

    private class DispatchThread extends java.lang.Thread {

        public void run() {

            saveData();

        }
    }

    private void saveData() {
        if (discreetServicesTbl.isEditing()) {
            discreetServicesTbl.getCellEditor().stopCellEditing();
        }
        if (patientNameTxt.getText().equalsIgnoreCase("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {

            java.sql.Savepoint registerSavePoint = null;
            try {
                try {
                    connectDB.setAutoCommit(false);
                    registerSavePoint = connectDB.setSavepoint("registration");
                } catch (java.sql.SQLException ex) {
                    ex.printStackTrace();
                }

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Date datenowSql = new java.sql.Date(dateNow);

                System.out.println("This date is not printing " + datenowSql.toString());

                String showDate = null;

                long receiptDate = datePicker1.getDate().getTime();

                java.sql.Date billDate = new java.sql.Date(receiptDate);

                //receiptDate = datePicker1.getDate();
                System.out.println("This date is todays date " + billDate);

                String billNo = null;
                transNo = null;
                String payMode = null;
                String patientAcc = null;
                String cardNo = null;
                String AccDesc = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                java.sql.Date expDate = null;
                String staffNo = null;
                String glAcc = null;
                String user = null;
                String accDesc1 = null;
                String glAcc1 = null;
                String chbox = null;
                String gacc = null;
                String item = null;
                int itemInt = 0;
                int pack = 0;
                double price = 0.00;
                String Store = null;
                String units = null;

                double qty = 0.00;
                String glCode = null;
                String actCode = null;
                double amount = 0.00;
                double sellPrice = 0.00;
                java.util.Date admDate = null;
                int visitid = 0;
                String actNames1 = null;
                String actCode1 = null;
                String invoiceNo = null;
                boolean smartcard = false;
                String iTem = null;
                String gcode = null;
                double quant = 0.00;
                double pRice = 0.00;
                double tTotal = 0.00;

                if (opdChkbx.isSelected() || mchfpChkbx.isSelected()) {
                    chbox = "OP";
                } else {
                    if (walkinChkbx.isSelected()) {
                        chbox = "WI";
                    } else {
                        if (ipdChkbx.isSelected()) {
                            chbox = "IP";
                        }
                    }
                }
                //try {
                //    connectDB.setAutoCommit(false);
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");

                while (rst.next()) {
                    rst.getObject(1).toString();

                    transNo = rst.getObject(1).toString();
                }

                if (opdChkbx.isSelected()) {
                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE account_no  = '" + schemeAccountNumberTxt.getText() + "'");
                    while (rset1cz3.next()) {
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (smartcard) {
                        biz.systempartners.claims.Claim claimInstance = new biz.systempartners.claims.Claim();

                        claimInstance.createXMLDoc(discreetServicesTbl, connectDB);
                    }
                } else {
                    //this for inpatient;
                }
                java.sql.Statement stm121 = connectDB.createStatement();
                java.sql.Statement stm1211 = connectDB.createStatement();
                java.sql.Statement stm122 = connectDB.createStatement();
                java.sql.Statement stm122x = connectDB.createStatement();
                java.sql.Statement stm1 = connectDB.createStatement();

                java.sql.Statement stm121x = connectDB.createStatement();

                java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                while (rse121x.next()) {

                    DirectRev = rse121x.getBoolean(1);

                }

                java.sql.Statement stm12 = connectDB.createStatement();

                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }

                java.sql.Statement pss11 = connectDB.createStatement();
                java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity from pb_activity where activity_category ='DA'");
                while (rsts1.next()) {
                    actCode1 = rsts1.getObject(1).toString();
                    actNames1 = rsts1.getObject(2).toString();
                }
                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                while (rst11.next()) {
                    rst11.getObject(1).toString();

                    billNo = rst11.getObject(1).toString();
                    user = rst11.getObject(2).toString();
                }

                if (this.opdChkbx.isSelected()) {
                    java.sql.Statement stm1q = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1q.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no,member_name from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");

                    while (rse1.next()) {

                        payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                        cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                        scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                        cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                        isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                        expDate = rse1.getDate(6);
                        staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                        // staffNo = dbObject.getDBObject(rse1.getObject(8), "-");
                    }
                } else {
                    if (walkinChkbx.isSelected()) {
                        patientNumberTxt.setText("WK" + transNo);
                    }

                }
                if (this.opdChkbx.isSelected() || walkinChkbx.isSelected() || this.mchfpChkbx.isSelected()) {
                    if (this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                        if (walkinChkbx.isSelected()) {

                            java.sql.Statement pss1 = connectDB.createStatement();
                            java.sql.ResultSet rss1 = pss1.executeQuery("select 'O'||(nextval('pinvoice_no_seq'))");
                            while (rss1.next()) {
                                invoiceNo = rss1.getObject(1).toString();
                            }
                        }
                    }
                    for (int i = 0; i < discreetServicesTbl.getRowCount(); i++) {
                        if (discreetServicesTbl.getValueAt(i, 0) != null) {
                            java.sql.Statement stm121q = connectDB.createStatement();
                            java.sql.ResultSet rse121 = stm121q.executeQuery("select activity from pb_activity where code ='" + discreetServicesTbl.getValueAt(i, 4).toString() + "'");

                            while (rse121.next()) {

                                glAcc = rse121.getObject(1).toString();
                            }
                            if (this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                if (walkinChkbx.isSelected()) {
                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                                    pstmt2.setString(1, patientNumberTxt.getText());
                                    pstmt2.setString(2, patientNameTxt.getText());
                                    pstmt2.setString(3, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2.setString(4, patientCategoryTxt.getText());
                                    pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                    pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                                    pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                                    pstmt2.setBoolean(12, false);
                                    pstmt2.setString(10, transNo);
                                    pstmt2.setString(11, user);
                                    pstmt2.setString(13, glAcc);
                                    pstmt2.setInt(14, visitid);
                                    pstmt2.setString(15, doctorNameTxt.getText().toString());
                                    pstmt2.executeUpdate();

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt.setString(3, patientCategoryTxt.getText());
                                    pstmt.setObject(4, paymentModeCmbx.getSelectedItem());
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, schemeNameTxt.getText());
                                    pstmt.setString(6, cardNo);
                                    pstmt.setString(8, cardName);
                                    pstmt.setString(9, isurer);
                                    pstmt.setDate(10, null);//java.sql.Date.valueOf(expDate.toString()));
                                    pstmt.setString(11, "");
                                    pstmt.setDouble(12, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt.setDouble(13, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt.setObject(15, patientAcc);
                                    pstmt.setString(16, glAcc);
                                    pstmt.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                    pstmt.setObject(18, staffNo);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, "Billing");
                                    pstmt.setBoolean(21, false);
                                    pstmt.setString(22, AccDesc);
                                    pstmt.setString(23, invoiceNo);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, billNo);
                                    pstmt.setString(26, "OP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                    pstmt.setInt(28, visitid);
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt24 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt24.setObject(1, discreetServicesTbl.getValueAt(i, 4).toString());
                                    pstmt24.setString(2, glAcc);
                                    pstmt24.setString(3, patientNumberTxt.getText());
                                    pstmt24.setString(4, patientNameTxt.getText());
                                    pstmt24.setString(5, "");
                                    pstmt24.setString(6, cardNo);
                                    pstmt24.setString(7, cardName);
                                    pstmt24.setString(8, "OP");
                                    pstmt24.setString(9, doctorNameTxt.getText());
                                    pstmt24.setObject(10, paymentModeCmbx.getSelectedItem());
                                    pstmt24.setString(11, "");
                                    pstmt24.setString(12, "");
                                    pstmt24.setString(13, "");
                                    pstmt24.setString(14, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt24.setString(15, "Revenue");
                                    pstmt24.setDouble(16, 0.00);
                                    pstmt24.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt24.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt24.setString(19, transNo);
                                    pstmt24.setBoolean(20, false);
                                    pstmt24.setBoolean(21, false);
                                    pstmt24.setBoolean(22, false);
                                    pstmt24.setString(23, user);
                                    pstmt24.executeUpdate();
                                } else {
                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");

                                    pstmt2.setString(1, patientNumberTxt.getText());
                                    pstmt2.setString(10, transNo);
                                    pstmt2.setString(2, patientNameTxt.getText());
                                    pstmt2.setString(3, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2.setString(4, patientCategoryTxt.getText());
                                    pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                    pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                                    pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                                    pstmt2.setBoolean(12, false);
                                    pstmt2.setString(11, user);
                                    pstmt2.setString(13, glAcc);
                                    pstmt2.setInt(14, visitid);
                                    pstmt2.setString(15, doctorNameTxt.getText().toString());
                                    pstmt2.executeUpdate();

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt.setString(3, patientCategoryTxt.getText());
                                    pstmt.setObject(4, paymentModeCmbx.getSelectedItem());
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, schemeNameTxt.getText());
                                    pstmt.setString(6, cardNo);
                                    pstmt.setString(8, cardName);
                                    pstmt.setString(9, isurer);
                                    pstmt.setDate(10, null);//java.sql.Date.valueOf(expDate.toString()));
                                    pstmt.setString(11, "");
                                    pstmt.setDouble(12, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt.setDouble(13, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt.setObject(15, patientAcc);
                                    pstmt.setString(16, glAcc);
                                    pstmt.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                    pstmt.setObject(18, staffNo);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, "Billing");
                                    pstmt.setBoolean(21, false);
                                    pstmt.setString(22, AccDesc);
                                    pstmt.setInt(23, visitid);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, billNo);
                                    pstmt.setString(26, "OP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                    pstmt.setInt(28, visitid);
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt24 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt24.setObject(1, discreetServicesTbl.getValueAt(i, 4).toString());
                                    pstmt24.setString(2, glAcc);
                                    pstmt24.setString(3, patientNumberTxt.getText());
                                    pstmt24.setString(4, patientNameTxt.getText());
                                    pstmt24.setString(5, "");
                                    pstmt24.setString(6, cardNo);
                                    pstmt24.setString(7, cardName);
                                    pstmt24.setString(8, "OP");
                                    pstmt24.setString(9, doctorNameTxt.getText());
                                    pstmt24.setObject(10, paymentModeCmbx.getSelectedItem());
                                    pstmt24.setString(11, "");
                                    pstmt24.setString(12, "");
                                    pstmt24.setString(13, "");
                                    pstmt24.setString(14, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt24.setString(15, "Revenue");
                                    pstmt24.setDouble(16, 0.00);
                                    pstmt24.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt24.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt24.setString(19, transNo);
                                    pstmt24.setBoolean(20, false);
                                    pstmt24.setBoolean(21, false);
                                    pstmt24.setBoolean(22, false);
                                    pstmt24.setString(23, user);
                                    pstmt24.executeUpdate();
                                }
                            } else {
                                if (DirectRev) {
                                    if (walkinChkbx.isSelected() || mchfpChkbx.isSelected()) {
                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                                        pstmt2.setString(1, patientNumberTxt.getText());
                                        pstmt2.setString(10, transNo);
                                        pstmt2.setString(2, patientNameTxt.getText());
                                        pstmt2.setString(3, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt2.setString(4, patientCategoryTxt.getText());
                                        pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                        pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                        pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                        pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                                        pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                                        pstmt2.setBoolean(12, false);
                                        pstmt2.setString(11, user);
                                        pstmt2.setString(13, glAcc);
                                        pstmt2.setInt(14, visitid);
                                        pstmt2.setString(15, doctorNameTxt.getText().toString());
                                        pstmt2.executeUpdate();
                                    } else {
                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                                        pstmt2.setString(1, patientNumberTxt.getText());
                                        pstmt2.setString(10, transNo);
                                        pstmt2.setString(2, patientNameTxt.getText());
                                        pstmt2.setString(3, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt2.setString(4, patientCategoryTxt.getText());
                                        pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                        pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                        pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                        pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                                        pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                                        pstmt2.setBoolean(12, false);
                                        pstmt2.setString(11, user);
                                        pstmt2.setString(13, glAcc);
                                        pstmt2.setInt(14, visitid);
                                        pstmt2.setString(15, doctorNameTxt.getText().toString());
                                        pstmt2.executeUpdate();
                                    }
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt.setString(3, patientCategoryTxt.getText());
                                    pstmt.setObject(4, paymentModeCmbx.getSelectedItem());
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, schemeNameTxt.getText());
                                    pstmt.setString(6, cardNo);
                                    pstmt.setString(8, cardName);
                                    pstmt.setString(9, isurer);
                                    pstmt.setDate(10, null);//java.sql.Date.valueOf(expDate.toString()));
                                    pstmt.setString(11, "");
                                    pstmt.setDouble(12, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt.setDouble(13, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt.setObject(15, patientAcc);
                                    pstmt.setString(16, glAcc);
                                    pstmt.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                    pstmt.setObject(18, staffNo);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, "Billing");
                                    pstmt.setBoolean(21, false);
                                    pstmt.setString(22, AccDesc);
                                    pstmt.setInt(23, visitid);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, billNo);
                                    pstmt.setString(26, "OP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                    pstmt.setInt(28, visitid);
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt24 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt24.setObject(1, discreetServicesTbl.getValueAt(i, 4).toString());
                                    pstmt24.setString(2, glAcc);
                                    pstmt24.setString(3, patientNumberTxt.getText());
                                    pstmt24.setString(4, patientNameTxt.getText());
                                    pstmt24.setString(5, "");
                                    pstmt24.setString(6, cardNo);
                                    pstmt24.setString(7, cardName);
                                    pstmt24.setString(8, "OP");
                                    pstmt24.setString(9, doctorNameTxt.getText());
                                    pstmt24.setObject(10, paymentModeCmbx.getSelectedItem());
                                    pstmt24.setString(11, "");
                                    pstmt24.setString(12, "");
                                    pstmt24.setString(13, "");
                                    pstmt24.setString(14, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt24.setString(15, "Revenue");
                                    pstmt24.setDouble(16, 0.00);
                                    pstmt24.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt24.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt24.setString(19, transNo);
                                    pstmt24.setBoolean(20, false);
                                    pstmt24.setBoolean(21, false);
                                    pstmt24.setBoolean(22, false);
                                    pstmt24.setString(23, user);
                                    pstmt24.executeUpdate();

                                } else {
                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                                    pstmt2.setString(1, patientNumberTxt.getText());
                                    pstmt2.setString(2, patientNameTxt.getText());
                                    pstmt2.setString(3, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2.setString(4, patientCategoryTxt.getText());
                                    pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                    pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                    pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                    pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                                    pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                                    pstmt2.setString(10, transNo);
                                    pstmt2.setString(11, user);
                                    pstmt2.setBoolean(12, false);
                                    pstmt2.setString(13, glAcc);
                                    pstmt2.setInt(14, visitid);
                                    pstmt2.setString(15, doctorNameTxt.getText().toString());
                                    pstmt2.executeUpdate();
                                }
                                //  }
                            }

                            if (this.mchfpChkbx.isSelected()) {
                                System.out.println("Doing MCH requests");
                                PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO pb_doctors_request VALUES(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?), ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");

                                pstmt2.setString(1, patientNumberTxt.getText());
                                pstmt2.setString(2, patientNameTxt.getText());
                                pstmt2.setString(3, "Cash");
                                pstmt2.setString(4, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 2).toString()));
                                pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                                pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2.setString(10, billNo);
                                pstmt2.setBoolean(12, false);
                                pstmt2.setString(11, user);
                                pstmt2.setString(13, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, discreetServicesTbl.getValueAt(i, 4).toString()));
                                pstmt2.setString(18, billNo);
                                if (com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, discreetServicesTbl.getValueAt(i, 4).toString()).contains("Lab")) {
                                    pstmt2.setString(15, "LAB");
                                } else {
                                    pstmt2.setString(15, "X-RAY");
                                }
                                pstmt2.setBoolean(16, false);
                                pstmt2.setBoolean(17, false);
                                pstmt2.setString(14, "01");
                                pstmt2.setString(19, datePicker1.getDate().toString());
                                pstmt2.setTimestamp(20, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt2.setString(21, "MCH");
                                pstmt2.setString(22, "01");
                                pstmt2.setString(23, age);
                                pstmt2.setString(24, "MCH/FP Laboratory Investigations");
                                pstmt2.setString(25, "MCH");
                                pstmt2.setString(26, "");
                                pstmt2.setString(27, "Female");
                                pstmt2.setString(28, "DOC POSTING");
                                pstmt2.setString(29, billNo + "-" + i);
                                pstmt2.executeUpdate();

                            }
                            if (this.walkinChkbx.isSelected()) {
                                System.out.println("Walk-IN requests");
                                PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO pb_doctors_request VALUES(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?), ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");

                                pstmt2.setString(1, patientNumberTxt.getText());
                                pstmt2.setString(2, patientNameTxt.getText());
                                pstmt2.setString(3, "Cash");
                                pstmt2.setString(4, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                pstmt2.setString(5, discreetServicesTbl.getValueAt(i, 0).toString());
                                pstmt2.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                pstmt2.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 2).toString()));
                                pstmt2.setObject(8, discreetServicesTbl.getValueAt(i, 5).toString());
                                pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2.setString(10, billNo);
                                pstmt2.setBoolean(12, false);
                                pstmt2.setString(11, user);
                                pstmt2.setString(13, glAcc);
                                pstmt2.setString(18, billNo);
                                if (com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, discreetServicesTbl.getValueAt(i, 4).toString()).contains("Lab")) {
                                    pstmt2.setString(15, "LAB");
                                } else {
                                    pstmt2.setString(15, "X-RAY");
                                }
                                pstmt2.setBoolean(16, false);
                                pstmt2.setBoolean(17, false);
                                pstmt2.setString(14, "01");
                                pstmt2.setString(19, datePicker1.getDate().toString());
                                pstmt2.setTimestamp(20, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt2.setString(21, "");
                                pstmt2.setString(22, "01");
                                pstmt2.setString(23, age);
                                pstmt2.setString(24, "Walk-IN Investigations");
                                pstmt2.setString(25, "");
                                pstmt2.setString(26, "");
                                if (this.maleChkbx.isSelected()) {
                                    pstmt2.setString(27, "Male");
                                } else {
                                    pstmt2.setString(27, "Female");
                                }
                                pstmt2.setString(28, "DOC POSTING");
                                pstmt2.setString(29, billNo + "-" + i);
                                pstmt2.executeUpdate();

                            }

                        }
                    }

                    if (this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                        if (walkinChkbx.isSelected()) {
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt.setObject(1, actCode1);
                            pstmt.setString(4, patientNumberTxt.getText());
                            pstmt.setObject(3, patientNameTxt.getText());
                            pstmt.setString(2, payerNameTxt.getText());
                            pstmt.setString(5, schemeNameTxt.getText());
                            pstmt.setString(6, "");
                            if (this.schemeAccountNumberTxt.getText().equals(null) || this.schemeAccountNumberTxt.getText().equals("-")) {
                                javax.swing.JOptionPane.showMessageDialog(this, "Account NO. MISSING !!!", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                pstmt.setString(7, schemeAccountNumberTxt.getText());
                            }
                            pstmt.setString(8, "");
                            pstmt.setString(9, "");
                            pstmt.setString(10, "");
                            pstmt.setString(11, transNo);
                            pstmt.setString(12, "Raise Invoice");
                            pstmt.setDouble(13, java.lang.Double.valueOf(billTotalTxt.getText()));
                            pstmt.setDouble(14, 0.00);
                            pstmt.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt.setObject(16, invoiceNo);
                            pstmt.setString(17, actNames1);
                            pstmt.setBoolean(18, false);
                            pstmt.setBoolean(19, false);
                            pstmt.setString(20, user);
                            pstmt.setString(21, "");
                            pstmt.setDouble(22, java.lang.Double.valueOf(billTotalTxt.getText()));
                            pstmt.setBoolean(23, false);
                            pstmt.setDouble(24, 0.00);
                            pstmt.setObject(25, "");
                            pstmt.setObject(26, null);
                            pstmt.setBoolean(27, false);
                            pstmt.setDouble(28, 0.00);
                            pstmt.setObject(29, null);
                            pstmt.setString(30, "");
                            pstmt.setBoolean(31, false);
                            pstmt.setDouble(32, 0.00);
                            pstmt.setObject(33, null);
                            pstmt.setString(34, "");
                            pstmt.setString(35, "");
                            pstmt.executeUpdate();

                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt1.setString(1, patientNumberTxt.getText());
                            pstmt1.setObject(2, "Invoice");
                            pstmt1.setString(3, "");
                            pstmt1.setString(4, "Scheme");
                            pstmt1.setString(5, transNo);
                            pstmt1.setString(7, schemeNameTxt.getText());
                            pstmt1.setString(6, "");
                            pstmt1.setString(8, "");
                            pstmt1.setString(9, "");
                            pstmt1.setDate(10, null);
                            pstmt1.setString(11, "");
                            pstmt1.setDouble(13, java.lang.Double.valueOf(billTotalTxt.getText()));
                            pstmt1.setDouble(12, 0.00);
                            pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1.setObject(15, patientAcc);
                            pstmt1.setString(16, glAcc);
                            pstmt1.setDouble(17, 1);
                            pstmt1.setObject(18, "");
                            pstmt1.setBoolean(19, true);
                            pstmt1.setString(20, "Receipts");
                            pstmt1.setBoolean(21, true);
                            pstmt1.setString(22, AccDesc);
                            pstmt1.setString(23, invoiceNo);
                            pstmt1.setString(24, user);
                            pstmt1.executeUpdate();
                            javax.swing.JOptionPane.showMessageDialog(this, "Insert Invoice No. " + invoiceNo + "", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            com.afrisoftech.reports.FinalInvoiceByinvPdf policy = new com.afrisoftech.reports.FinalInvoiceByinvPdf();
                            policy.FinalInvoiceByinvPdf(connectDB, invoiceNo, invoiceNo);
                        }
                    }

                } else {
                    if (this.ipdChkbx.isSelected()) {
                        String ward = null;
                        float amtPerDay = 0;
                        String revcodes = null;
                        String bedDescr = null;
                        float amtCharged = 0; //java.lang.Float.parseFloat(this.bedAmountTxt.getText());
                        java.sql.Statement stm12n = connectDB.createStatement();
                        java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                        while (rse12n.next()) {
                            admDate = rse12n.getDate(1);

                        }

                        java.sql.Statement pss111 = connectDB.createStatement();
                        java.sql.ResultSet rss111 = pss111.executeQuery("select ward,deposit,visit_id FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + schemeMemberNumberTxt.getText() + "'");
                        while (rss111.next()) {
                            ward = rss111.getString(1);
                            amtPerDay = rss111.getFloat(2);
                        }
                        System.out.println("Ward [" + ward + " AmountPerDay[" + amtPerDay + "]");
                        java.sql.Statement pss1111 = connectDB.createStatement();
                        java.sql.ResultSet rss1111 = pss1111.executeQuery("SELECT revcode FROM  hp_wards WHERE ward_name = '" + ward + "'");
                        while (rss1111.next()) {
                            revcodes = rss1111.getString(1);

                        }
                        System.out.println("Ward Rev Code[" + revcodes + "]");
                        java.sql.Statement stm121v = connectDB.createStatement();
                        java.sql.ResultSet rse121v = stm121v.executeQuery("select activity from pb_activity where code ='" + revcodes + "'");
                        while (rse121v.next()) {

                            glAcc = rse121v.getObject(1).toString();
                        }
                        java.sql.Statement stm121vv = connectDB.createStatement();
                        java.sql.ResultSet rse121vv = stm121vv.executeQuery("SELECT service_type FROM pb_operating_parameters WHERE gl_account ='" + revcodes + "' AND service_type ILIKE '%bed%'");// AND rate = '" + amtPerDay + "'");
                        while (rse121vv.next()) {

                            bedDescr = rse121vv.getObject(1).toString();
                        }
                        System.out.println("Bedsecr [" + bedDescr + "]");
                        System.out.println(admDate);

                        if (this.datePicker1.getDate().before(admDate)) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " + admDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        } else {

                            if (!(jTextField4.getText().equals("Cash"))) {
                                java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                                while (rse1.next()) {
                                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                    expDate = rse1.getDate(6);
                                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");

                                }

                                for (int i = 0; i < discreetServicesTbl.getRowCount(); i++) {
                                    if (discreetServicesTbl.getValueAt(i, 0) != null) {

                                        java.sql.ResultSet rse121 = stm121.executeQuery("select activity from pb_activity where code ='" + discreetServicesTbl.getValueAt(i, 4).toString() + "'");
                                        while (rse121.next()) {

                                            glAcc = rse121.getObject(1).toString();
                                        }
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        pstmt.setString(1, patientNumberTxt.getText());
                                        pstmt.setObject(2, discreetServicesTbl.getValueAt(i, 0).toString());
                                        pstmt.setString(3, patientCategoryTxt.getText());
                                        pstmt.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt.setString(5, transNo);
                                        pstmt.setString(7, scheme);
                                        pstmt.setString(6, cardNo);
                                        pstmt.setString(8, cardName);
                                        pstmt.setString(9, isurer);
                                        pstmt.setDate(10, null);//java.sql.Date.valueOf(expDate.toString()));
                                        pstmt.setString(11, "");
                                        pstmt.setDouble(12, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                        pstmt.setDouble(13, 0.00);
                                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt.setObject(15, patientAcc);
                                        pstmt.setString(16, glAcc);
                                        pstmt.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                                        pstmt.setObject(18, staffNo);
                                        pstmt.setBoolean(19, false);
                                        pstmt.setString(20, "Billing");
                                        pstmt.setBoolean(21, false);
                                        pstmt.setString(22, AccDesc);
                                        pstmt.setInt(23, visitid);
                                        pstmt.setString(24, user);
                                        pstmt.setString(25, billNo);
                                        pstmt.setString(26, "IP");
                                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                        pstmt.setInt(28, visitid);
                                        pstmt.executeUpdate();

                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2.setObject(1, discreetServicesTbl.getValueAt(i, 4).toString());
                                        pstmt2.setString(2, glAcc);
                                        pstmt2.setString(3, patientNumberTxt.getText());
                                        pstmt2.setString(4, patientNameTxt.getText());
                                        pstmt2.setString(5, "");
                                        pstmt2.setString(6, cardNo);
                                        pstmt2.setString(7, cardName);
                                        pstmt2.setString(8, "IP");
                                        pstmt2.setString(9, doctorNameTxt.getText());
                                        pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt2.setString(11, "");
                                        pstmt2.setString(12, "");
                                        pstmt2.setString(13, "");
                                        pstmt2.setString(14, discreetServicesTbl.getValueAt(i, 0).toString());
                                        pstmt2.setString(15, "Revenue");
                                        pstmt2.setDouble(16, 0.00);
                                        pstmt2.setDouble(17, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                                        pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt2.setString(19, transNo);
                                        pstmt2.setBoolean(20, false);
                                        pstmt2.setBoolean(21, false);
                                        pstmt2.setBoolean(22, false);
                                        pstmt2.setString(23, user);
                                        pstmt2.executeUpdate();

                                    }
                                }
                            }
                        }
                    }
                }

                for (int i = 0; i < discreetServicesTbl.getRowCount(); i++) {
                    if (discreetServicesTbl.getValueAt(i, 0) != null) {

                        java.sql.Statement pstBx = connectDB.createStatement();
                        java.sql.ResultSet rsBx = pstBx.executeQuery("select count(product) from stockprices where product = '" + discreetServicesTbl.getValueAt(i, 0) + "' and gl_code =  '" + discreetServicesTbl.getValueAt(i, 4) + "'");

                        while (rsBx.next()) {
                            itemInt = rsBx.getInt(1);
                        }

                        if (itemInt > 0) {
                            Store = com.afrisoftech.lib.StoreFactory.getUserStoreName(connectDB);
                            java.sql.Statement pstB = connectDB.createStatement();
                            java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units,department from stockprices where product = '" + discreetServicesTbl.getValueAt(i, 0) + "' and gl_code =  '" + discreetServicesTbl.getValueAt(i, 4) + "'");

                            while (rsB.next()) {
                                price = rsB.getDouble(1);
                                units = rsB.getString(2);
                                if (Store == null) {
                                    Store = rsB.getString(3);
                                }
                            }

                            java.sql.Statement pst211 = connectDB.createStatement();
                            java.sql.ResultSet rs111 = pst211.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + discreetServicesTbl.getValueAt(i, 4) + "'");
                            while (rs111.next()) {
                                glCode = rs111.getObject(1).toString();
                                actCode = rs111.getObject(2).toString();
                            }

                            qty = java.lang.Double.parseDouble(discreetServicesTbl.getValueAt(i, 1).toString());
                            sellPrice = java.lang.Double.parseDouble(discreetServicesTbl.getValueAt(i, 2).toString());
                            amount = price * qty;

                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt1.setString(1, patientNumberTxt.getText());
                            pstmt1.setString(2, patientNameTxt.getText());
                            pstmt1.setDouble(3, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                            pstmt1.setDouble(4, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                            pstmt1.setObject(5, discreetServicesTbl.getValueAt(i, 0).toString());
                            pstmt1.setDouble(7, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 2).toString()));
                            pstmt1.setObject(8, discreetServicesTbl.getValueAt(i, 4).toString());
                            pstmt1.setBoolean(6, true);
                            pstmt1.setString(9, transNo);
                            pstmt1.setObject(10, doctorNameTxt.getText());
                            pstmt1.setBoolean(11, true);
                            pstmt1.setString(12, units);
                            pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1.setObject(14, Store);
                            pstmt1.setString(15, chbox);
                            pstmt1.setString(16, paymentModeCmbx.getSelectedItem().toString());
                            pstmt1.setObject(17, "");
                            pstmt1.setDouble(18, 0.00);
                            pstmt1.setString(19, user);
                            pstmt1.setObject(20, "");
                            pstmt1.executeUpdate();

                            java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("insert into st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                            pstmt1a.setString(1, null);
                            pstmt1a.setObject(3, discreetServicesTbl.getValueAt(i, 0));
                            pstmt1a.setString(2, Store);
                            pstmt1a.setDate(4, null);
                            pstmt1a.setDouble(5, amount);
                            pstmt1a.setDouble(6, 0.00);
                            pstmt1a.setObject(7, units);
                            pstmt1a.setObject(8, "");
                            pstmt1a.setString(9, null);
                            pstmt1a.setString(10, null);
                            pstmt1a.setDouble(11, 0.00);
                            pstmt1a.setDouble(12, 0.00);
                            pstmt1a.setDouble(13, 0.00);
                            pstmt1a.setString(14, patientNameTxt.getText());
                            pstmt1a.setString(15, user);
                            pstmt1a.setString(16, "");
                            pstmt1a.setString(17, null);
                            pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1a.setString(19, Store);
                            pstmt1a.setString(20, "Issuing");
                            pstmt1a.setDouble(21, 0.00);
                            pstmt1a.setString(23, actCode);
                            pstmt1a.setDouble(22, 0.00);
                            pstmt1a.setString(24, "");
                            pstmt1a.setString(25, Store);
                            pstmt1a.setString(26, transNo);
                            pstmt1a.setDouble(27, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                            pstmt1a.setString(28, user);
                            pstmt1a.executeUpdate();

                            java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt2a.setObject(1, glCode);
                            pstmt2a.setObject(2, revenueDepartmentCmbx.getSelectedItem());
                            pstmt2a.setString(3, patientNumberTxt.getText());
                            pstmt2a.setString(4, patientNameTxt.getText());
                            pstmt2a.setString(5, "");
                            pstmt2a.setString(6, "");
                            pstmt2a.setString(7, "");
                            pstmt2a.setString(8, "");
                            pstmt2a.setString(9, "");
                            pstmt2a.setObject(10, paymentModeCmbx.getSelectedItem());
                            pstmt2a.setString(11, "");
                            pstmt2a.setString(12, "");
                            pstmt2a.setString(13, "");
                            pstmt2a.setString(14, discreetServicesTbl.getValueAt(i, 0).toString());
                            pstmt2a.setString(15, "Issuing");
                            pstmt2a.setDouble(16, amount);
                            pstmt2a.setDouble(17, 0.00);
                            pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt2a.setString(19, transNo);
                            pstmt2a.setBoolean(20, false);
                            pstmt2a.setBoolean(21, false);
                            pstmt2a.setBoolean(22, false);
                            pstmt2a.setString(23, user);
                            pstmt2a.executeUpdate();

                            java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt33.setObject(1, Store);
                            pstmt33.setObject(2, discreetServicesTbl.getValueAt(i, 0).toString());
                            pstmt33.setDouble(3, 0.00);
                            pstmt33.setDouble(7, 0.00);
                            pstmt33.setDouble(5, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 2).toString()));
                            pstmt33.setDouble(6, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 3).toString()));
                            pstmt33.setString(8, transNo);
                            pstmt33.setDouble(4, java.lang.Double.valueOf(discreetServicesTbl.getValueAt(i, 1).toString()));
                            pstmt33.setObject(9, doctorNameTxt.getText());
                            pstmt33.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt33.setString(11, user);
                            pstmt33.setString(12, units);
                            pstmt33.setString(13, Store);
                            pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                            pstmt33.executeUpdate();

                        }
                        //   System.out.println("How many packages test "+pack);

                        java.sql.Statement pstBx2 = connectDB.createStatement();
                        java.sql.ResultSet rsBx2 = pstBx2.executeQuery("select count(package) from packages where package = '" + discreetServicesTbl.getValueAt(i, 0) + "' and glcode =  '" + discreetServicesTbl.getValueAt(i, 4) + "'");

                        while (rsBx2.next()) {
                            pack = rsBx2.getInt(1);
                        }

                    }
                }
                for (int k = 0; k < discreetServicesTbl.getRowCount(); k++) {
                    for (int r = 0; r < discreetServicesTbl.getColumnCount(); r++) {
                        discreetServicesTbl.setValueAt(null, k, r);
                    }
                }
                for (int k = 0; k < packagesTbl.getRowCount(); k++) {
                    for (int r = 0; r < packagesTbl.getColumnCount(); r++) {
                        packagesTbl.setValueAt(null, k, r);
                    }
                }
                billTotalTxt.setText("0.00");

                //STK Push for mobile payment
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful.Bill No. " + transNo + "", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                    boolean checkoutReturn = com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), transNo, payerTelephoneNumber, billTotalTxt.getText());
                    if (checkoutReturn) {
                        java.sql.PreparedStatement pstmtCheckout = connectDB.prepareStatement("UPDATE hp_patient_billing SET checkout_request_id = ? WHERE inpatient_no = ?");
                        pstmtCheckout.setString(1, checkoutRequestID);
                        pstmtCheckout.setString(2, transNo);
                        pstmtCheckout.executeUpdate();
                        pstmtCheckout.close();
                    }
                }
                
                connectDB.commit();
                connectDB.setAutoCommit(true);

                patientNameTxt.setText("");
                patientCategoryTxt.setText("");
                billTotalTxt.setText("");
                patientNumberTxt.setText("");
                schemeAccountNumberTxt.setText("");
                payerNameTxt.setText("");
                unitNumberTxt.setText("");
                schemeMemberNumberTxt.setText("");
                schemeMemberNameTxt.setText("");
                cardBalanceTxt.setText("");
                for (int k = 0; k < discreetServicesTbl.getRowCount(); k++) {
                    for (int r = 0; r < discreetServicesTbl.getColumnCount(); r++) {
                        discreetServicesTbl.setValueAt(null, k, r);
                    }
                }
                billTotalTxt.setText("0.00");
                saveAndPrintBillBtn.setEnabled(false);
                savebillBtn.setEnabled(false);
                rePrintBillBtn.setEnabled(true);
                //paymentModeCmbx.setSelectedItem("Cash");
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox applyPackagesBillingChkbx;
    private javax.swing.JCheckBox back2ServicesTableChkbx;
    public static javax.swing.JTextField bedAmountTxt;
    public static javax.swing.JTextField billTotalTxt;
    private javax.swing.JPanel billingActionButtonsPanel;
    private javax.swing.JTabbedPane billingPanel;
    private javax.swing.JTextField billingStationTxt;
    private javax.swing.JScrollPane billingTablesJscrl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JCheckBox byNameChkbx;
    private javax.swing.JCheckBox byNumberChkbx;
    public static javax.swing.JTextField cardBalanceTxt;
    private javax.swing.JPanel chargeRatesCategoriesPanel;
    private javax.swing.JButton clearformDataBtn;
    public javax.swing.JButton closeFormBtn;
    private javax.swing.JScrollPane consultantBillingJscrl;
    private javax.swing.JPanel consultantBillingMainPanel;
    private javax.swing.JTextField consultantBillingPatientNameTxt;
    private javax.swing.JTextField consultantBillingPatientNoTxt;
    private javax.swing.JTextField consultantBillingPayModeTxt;
    private javax.swing.JComboBox consultantBillingRevenueDeptCmbx;
    private javax.swing.JDialog consultantBillingServiceSearchDialog;
    private javax.swing.JTable consultantBillingTable;
    private javax.swing.JTextField consultantPatientCategoryTxt;
    private javax.swing.JPanel consultantsBillingPanel;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JTable discreetServicesTbl;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton disposeBtn;
    private javax.swing.JTextField doctorAcctNumberTxt;
    private javax.swing.JTextField doctorNameTxt;
    private javax.swing.JDialog doctorSearchDialog;
    private javax.swing.JDialog doctorsSearchDialog;
    private javax.swing.JCheckBox femaleChkbx;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.JDialog generalBillingDoctorSearchDialog;
    private javax.swing.JPanel generalBillingPanel;
    private javax.swing.JDialog generalBillingPatientSearchDialog;
    private javax.swing.JTextField glcodeTxt;
    private javax.swing.JPanel imgPanel;
    public static javax.swing.JDialog inpatientRegisterSearchDialog;
    private javax.swing.JCheckBox ipdChkbx;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton111;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton311;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton411;
    private javax.swing.JButton jButton421;
    private javax.swing.JButton jButton4211;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton5211;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton611;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton911;
    private javax.swing.JButton jButton9111;
    private javax.swing.JButton jButton912;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton921;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox41;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox61;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel211;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel311;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel411;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel531;
    private javax.swing.JLabel jLabel5311;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel711;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel911;
    private javax.swing.JPanel jPanel111;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel211;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel411;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane211;
    private javax.swing.JDialog jSearchDialog3;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel111;
    private javax.swing.JPanel jSearchPanel12;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jSearchPanel211;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JPanel jSearchPanel31;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane111;
    private javax.swing.JScrollPane jSearchScrollPane12;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JScrollPane jSearchScrollPane211;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane31;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable111;
    private javax.swing.JTable jSearchTable12;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable211;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable31;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator111;
    private javax.swing.JTable jTable111;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField11111;
    private javax.swing.JTextField jTextField1112;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField1121;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField11311;
    private javax.swing.JTextField jTextField121;
    private javax.swing.JTextField jTextField211;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField311;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField411;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField711;
    private javax.swing.JTextField jTextField911;
    private javax.swing.JCheckBox maleChkbx;
    private javax.swing.JCheckBox mchfpChkbx;
    private javax.swing.JButton mergeOpBillBtn;
    private javax.swing.JRadioButton normalRateRbtn;
    private com.afrisoftech.lib.DatePicker oldOPVisitDatePicker;
    private javax.swing.JCheckBox opdChkbx;
    private javax.swing.JTextField packageAmountTxt;
    private javax.swing.JCheckBox packageBillingChkbx;
    private javax.swing.JButton packagesCancelBtn;
    public static javax.swing.JDialog packagesSearchDialog;
    private javax.swing.JPanel packagesSearchPanel;
    private javax.swing.JTable packagesSearchTable;
    private javax.swing.JTextField packagesSearchTxt;
    private javax.swing.JTable packagesTbl;
    public static javax.swing.JTextField patientCategoryTxt;
    private javax.swing.JPanel patientCheckBoxPanel;
    private javax.swing.JPanel patientDialogSearchPanel;
    public static javax.swing.JTextField patientNameTxt;
    public static javax.swing.JTextField patientNumberTxt;
    private javax.swing.JPanel patientParticularsPanel;
    private javax.swing.JDialog patientSearchDialog;
    private javax.swing.JTextField patientSearchFieldTxt;
    private javax.swing.JScrollPane patientSearchJscrl;
    private javax.swing.JTable patientSearchTbl;
    private javax.swing.JPanel patientSelectionModePanel;
    private javax.swing.JFormattedTextField payerMobileTelephoneNumberTxt;
    public static javax.swing.JTextField payerNameTxt;
    public static javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JButton rePrintBillBtn;
    public static javax.swing.JButton readSmartCardBtn;
    private javax.swing.JButton removePackageBtn;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JComboBox revenueDepartmentCmbx;
    private javax.swing.JButton saveAndPrintBillBtn;
    private javax.swing.JButton savebillBtn;
    public static javax.swing.JTextField schemeAccountNumberTxt;
    public static javax.swing.JTextField schemeMemberNameTxt;
    public static javax.swing.JTextField schemeMemberNumberTxt;
    public static javax.swing.JTextField schemeNameTxt;
    private javax.swing.JDialog schemesSearchDialog;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton11;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JCheckBox searchbyCodeChkbx;
    private javax.swing.JCheckBox searchbyNameChkbx;
    private javax.swing.JButton selectBtn;
    public static javax.swing.JDialog serviceorcodeSearchDialog;
    private javax.swing.JPanel serviceorcodeSearchPanel;
    private javax.swing.JTable serviceorcodeSearchTable;
    private javax.swing.JTextField serviceorcodeSearchTxt;
    public static javax.swing.JDialog servicesSearchDialog;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JRadioButton specialRateRbtn;
    private javax.swing.JTextField subActivityTxt;
    public static javax.swing.JTextField unitNumberTxt;
    private javax.swing.JCheckBox walkinChkbx;
    private javax.swing.JTextField wardNameTxt;
    // End of variables declaration//GEN-END:variables
}
