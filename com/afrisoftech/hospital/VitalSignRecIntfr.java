/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospital;

import static com.afrisoftech.hospinventory.PatientsBillingIpIntfr.jTable13;
import static com.afrisoftech.hospinventory.PatientsBillingIpIntfr.jTextField15;
import static com.afrisoftech.hospital.GeneralBillingIntfr.packagesSearchDialog;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner;

/**
 *
 * @author  root
 */
public class VitalSignRecIntfr extends javax.swing.JInternalFrame {

    /** Creates new form loanpymntintfr */
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
 //   private JSpinner beginDateSpinner;
    private String transNo;
    private String chbox;
    private boolean DirectRev;
    private String glAcc2;
    private double price;
    private double qty;
    private double amount;
    private com.afrisoftech.lib.DBObject dbObject;
    private String userName;
    private String units;
 

    public VitalSignRecIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        WaitingPatientsThread waitingPatientsThread = new WaitingPatientsThread();

        waitingPatientsThread.start();

        this.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset4 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new javax.swing.JTable();
        jButton52 = new javax.swing.JButton();
        try {
            searchRowSet2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        patientListPn = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientListTbl = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        temparatureLbl = new javax.swing.JLabel();
        genderLbl = new javax.swing.JLabel();
        weightLbl = new javax.swing.JLabel();
        weightTxt = new javax.swing.JTextField();
        heightLbl = new javax.swing.JLabel();
        systolicBPTxt = new javax.swing.JTextField();
        systolicBPLbl = new javax.swing.JLabel();
        heightTxt = new javax.swing.JTextField();
        diastolicBPLbl = new javax.swing.JLabel();
        diastolicBPTxt = new javax.swing.JTextField();
        temperatureTxt = new javax.swing.JTextField();
        dobPanel = new javax.swing.JPanel();
        datePickerDOB = new com.afrisoftech.lib.DatePicker();
        patientNoSearchPanel = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        ipopSelectorPanel = new javax.swing.JPanel();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        respiratoryRateTxt = new javax.swing.JTextField();
        pulseRateLbl = new javax.swing.JLabel();
        pulseRateTxt = new javax.swing.JTextField();
        respiratoryRateLbl = new javax.swing.JLabel();
        rbsLbl = new javax.swing.JLabel();
        rbsTxt = new javax.swing.JTextField();
        rhesusFactorPanel = new javax.swing.JPanel();
        rhesusPositiveRbtn = new javax.swing.JRadioButton();
        rhesusNegativeRbtn = new javax.swing.JRadioButton();
        rhesusUnknownRbtn = new javax.swing.JRadioButton();
        bloodGroupPanel = new javax.swing.JPanel();
        bloodGroupARbtn = new javax.swing.JRadioButton();
        bloodGroupBRbtn = new javax.swing.JRadioButton();
        bloodGroupORbtn = new javax.swing.JRadioButton();
        bloodGroupABRbtn = new javax.swing.JRadioButton();
        bloodGroupUnknownRbtn = new javax.swing.JRadioButton();
        searchalgorithmPanel = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        genderPanel = new javax.swing.JPanel();
        maleRbtn = new javax.swing.JRadioButton();
        femaleBtn = new javax.swing.JRadioButton();
        remarksLbl = new javax.swing.JLabel();
        remarksJscrl = new javax.swing.JScrollPane();
        remarksTxt = new javax.swing.JTextPane();
        datePickerData = new com.afrisoftech.lib.DatePicker();
        bmiLbl = new javax.swing.JLabel();
        bmiTxt = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        beginDateSpinner = new javax.swing.JSpinner();
        java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
        //        java.lang.String dateString2Parse = null;
        //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);
        try {
            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
            System.out.println(dateFormat.format(formattedDate));
            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
            beginDateSpinner.setModel(beginDate);
        } catch(java.text.ParseException ex) {
            ex.printStackTrace();
        }
        //   javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

        //   beginDateSpinner = new javax.swing.JSpinner(beginDate);
        butttonsPanel = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        recordSignsBtn = new javax.swing.JButton();
        clearEntriesBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jComboBox10 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        remarksJscrl1 = new javax.swing.JScrollPane();
        remarksTxt1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientListTbl1 = new javax.swing.JTable();

        crset1.setConnectionSource(pConnDB);

        crset4.setConnectionSource(pConnDB);

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        searchRowSet2.setConnectionSource(pConnDB);

        jSearchDialog.setMinimumSize(new java.awt.Dimension(600, 200));
        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField112, gridBagConstraints);

        jSearchScrollPane.setDoubleBuffered(true);

        jSearchTable.setDoubleBuffered(true);
        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nursing Care Operations Centre");
        setToolTipText("Nursing Care Operations Centre");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jSplitPane1.setDividerLocation(200);

        patientListPn.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Waiting List"));

        patientListTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient No.", "Patient Name"
            }
        ));
        patientListTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientListTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientListPn.add(jScrollPane1, gridBagConstraints);

        jSplitPane1.setLeftComponent(patientListPn);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select patient here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 255)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Patient Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(jLabel9, gridBagConstraints);

        jLabel1.setText("Patient Names");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(jLabel1, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mainPanel.add(patientNameTxt, gridBagConstraints);

        temparatureLbl.setText("Temperature(deg. C.)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(temparatureLbl, gridBagConstraints);

        genderLbl.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(genderLbl, gridBagConstraints);

        weightLbl.setText("Weight(Kg)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(weightLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        mainPanel.add(weightTxt, gridBagConstraints);

        heightLbl.setText("Height(Cm)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(heightLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(systolicBPTxt, gridBagConstraints);

        systolicBPLbl.setText("Systolic B.P.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(systolicBPLbl, gridBagConstraints);

        heightTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                heightTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        mainPanel.add(heightTxt, gridBagConstraints);

        diastolicBPLbl.setText("Diastolic B.P.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(diastolicBPLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(diastolicBPTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(temperatureTxt, gridBagConstraints);

        dobPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Date of birth", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(51, 51, 255))); // NOI18N
        dobPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dobPanel.add(datePickerDOB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(dobPanel, gridBagConstraints);

        patientNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientNoSearchPanel.setMaximumSize(new java.awt.Dimension(20, 25));
        patientNoSearchPanel.setMinimumSize(new java.awt.Dimension(6, 24));
        patientNoSearchPanel.setPreferredSize(new java.awt.Dimension(6, 24));
        patientNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientNoSearchPanel.add(patientNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setPreferredSize(new java.awt.Dimension(34, 20));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        patientNoSearchPanel.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(patientNoSearchPanel, gridBagConstraints);

        ipopSelectorPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ipopSelectorPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox11);
        jCheckBox11.setForeground(new java.awt.Color(51, 51, 255));
        jCheckBox11.setMnemonic('o');
        jCheckBox11.setSelected(true);
        jCheckBox11.setText("OUT-Patients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipopSelectorPanel.add(jCheckBox11, gridBagConstraints);

        buttonGroup1.add(jCheckBox21);
        jCheckBox21.setForeground(new java.awt.Color(255, 0, 51));
        jCheckBox21.setMnemonic('i');
        jCheckBox21.setText("IN-Patients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipopSelectorPanel.add(jCheckBox21, gridBagConstraints);

        jButton1.setText("View Patient Card");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        ipopSelectorPanel.add(jButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mainPanel.add(ipopSelectorPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(respiratoryRateTxt, gridBagConstraints);

        pulseRateLbl.setText("Pulse Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(pulseRateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(pulseRateTxt, gridBagConstraints);

        respiratoryRateLbl.setText("Respiratory Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(respiratoryRateLbl, gridBagConstraints);

        rbsLbl.setText("Random Blood Sugar (RBS)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(rbsLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        mainPanel.add(rbsTxt, gridBagConstraints);

        rhesusFactorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rhesus Factor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(255, 0, 51))); // NOI18N
        rhesusFactorPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup4.add(rhesusPositiveRbtn);
        rhesusPositiveRbtn.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        rhesusPositiveRbtn.setText("+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        rhesusFactorPanel.add(rhesusPositiveRbtn, gridBagConstraints);

        buttonGroup4.add(rhesusNegativeRbtn);
        rhesusNegativeRbtn.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        rhesusNegativeRbtn.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        rhesusFactorPanel.add(rhesusNegativeRbtn, gridBagConstraints);

        buttonGroup4.add(rhesusUnknownRbtn);
        rhesusUnknownRbtn.setText("Unknown");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        rhesusFactorPanel.add(rhesusUnknownRbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(rhesusFactorPanel, gridBagConstraints);

        bloodGroupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choose Blood Group", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        bloodGroupPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup3.add(bloodGroupARbtn);
        bloodGroupARbtn.setText("A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        bloodGroupPanel.add(bloodGroupARbtn, gridBagConstraints);

        buttonGroup3.add(bloodGroupBRbtn);
        bloodGroupBRbtn.setText("B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        bloodGroupPanel.add(bloodGroupBRbtn, gridBagConstraints);

        buttonGroup3.add(bloodGroupORbtn);
        bloodGroupORbtn.setText("O");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        bloodGroupPanel.add(bloodGroupORbtn, gridBagConstraints);

        buttonGroup3.add(bloodGroupABRbtn);
        bloodGroupABRbtn.setText("AB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        bloodGroupPanel.add(bloodGroupABRbtn, gridBagConstraints);

        buttonGroup3.add(bloodGroupUnknownRbtn);
        bloodGroupUnknownRbtn.setText("Unknown");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        bloodGroupPanel.add(bloodGroupUnknownRbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(bloodGroupPanel, gridBagConstraints);

        searchalgorithmPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchalgorithmPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(jCheckBox3);
        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Search By  No.");
        searchalgorithmPanel.add(jCheckBox3, new java.awt.GridBagConstraints());

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Search By Name");
        searchalgorithmPanel.add(jCheckBox4, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(searchalgorithmPanel, gridBagConstraints);

        buttonGroup5.add(maleRbtn);
        maleRbtn.setText("Male");
        genderPanel.add(maleRbtn);

        buttonGroup5.add(femaleBtn);
        femaleBtn.setText("Female");
        genderPanel.add(femaleBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        mainPanel.add(genderPanel, gridBagConstraints);

        remarksLbl.setText("Cardex - Remarks/Comments or narration for emergency treatment done at the Triage centre (Indicate drugs/dosage used for emergency treatment)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(remarksLbl, gridBagConstraints);

        remarksJscrl.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        remarksJscrl.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        remarksTxt.setToolTipText("Type comments and remarks here.");
        remarksJscrl.setViewportView(remarksTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        mainPanel.add(remarksJscrl, gridBagConstraints);

        datePickerData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Set date of record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 102, 102)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(datePickerData, gridBagConstraints);

        bmiLbl.setText("Body Mass Index (BMI)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(bmiLbl, gridBagConstraints);

        bmiTxt.setEditable(false);
        bmiTxt.setMinimumSize(new java.awt.Dimension(80, 20));
        bmiTxt.setPreferredSize(new java.awt.Dimension(80, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(bmiTxt, gridBagConstraints);

        jCheckBox1.setForeground(new java.awt.Color(255, 0, 102));
        jCheckBox1.setText("Tick if emergency treatment required");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(jCheckBox1, gridBagConstraints);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("PITCT"));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        buttonGroup6.add(jCheckBox5);
        jCheckBox5.setText("Reactive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jCheckBox5, gridBagConstraints);

        buttonGroup6.add(jCheckBox6);
        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Non-Reactive");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jCheckBox6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(jPanel13, gridBagConstraints);

        jLabel2.setText("Date/Time for the Nursing operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(beginDateSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        jPanel1.add(mainPanel, gridBagConstraints);

        butttonsPanel.setLayout(new java.awt.GridBagLayout());

        recordSignsBtn.setMnemonic('O');
        recordSignsBtn.setText("Record vital signs");
        recordSignsBtn.setToolTipText("Click here enter data");
        recordSignsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordSignsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        butttonsPanel.add(recordSignsBtn, gridBagConstraints);

        clearEntriesBtn.setMnemonic('l');
        clearEntriesBtn.setText("Clear entries");
        clearEntriesBtn.setToolTipText("Click here to clear textfields");
        clearEntriesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEntriesBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        butttonsPanel.add(clearEntriesBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close form");
        closeFormBtn.setToolTipText("Click here to close window");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        butttonsPanel.add(closeFormBtn, gridBagConstraints);

        helpBtn.setMnemonic('h');
        helpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        butttonsPanel.add(helpBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 500.0;
        gridBagConstraints.weighty = 1.0;
        butttonsPanel.add(spacerLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(butttonsPanel, gridBagConstraints);

        jTabbedPane1.addTab("Triage Centre - Vital Signs Recording", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Lung Sounds");
        jPanel2.add(jLabel3, new java.awt.GridBagConstraints());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Crackles -  Rales crackling or Rattling sounds", "Wheezing - High-pitched whistling expirations", "Stridor harsh - High-pitched inspirations", "Rhonchi coarse - Gravelly sounds" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox1, gridBagConstraints);

        jLabel4.setText("Pulse Oximetry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel4, gridBagConstraints);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal - 95 to 100% None or placebic", "Mild Hypoxia - 91 to 94% Give oxygen", "Moderate Hypoxia - 86 to 90% Give 100% oxygen", "Severe Hypoxia - < 85% Give 100% oxygen w/ positive pressure" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox2, gridBagConstraints);

        jLabel5.setText("Glasgow Coma Scale - Eye Opening (E)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel5, gridBagConstraints);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4 - Spontaneous", "3 - To speech", "2 - To pain", "1 - No response" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox3, gridBagConstraints);

        jLabel6.setText("Glasgow Coma Scale - Best Motor Response (M)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel6, gridBagConstraints);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "6 - Obeys verbal command - Normal movements", "5 - Localizes pain", "4 - Withdraws from pain", "3 - Flexion - Abnormal", "2 - Extension", "1 - No response" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox4, gridBagConstraints);

        jLabel8.setText("Glasgow Coma Scale -Best Verbal Response (V)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel8, gridBagConstraints);

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5 - Coos, babbles (Oriented and converses)", "4 - Cries but consolable( Disoriented and converses)", "3 - Persistently irritable (Inappropriate words)", "2 - Grunts to pain/restless (Incomprehensible sounds)", "1 -  No response" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox5, gridBagConstraints);

        jLabel10.setText(" Score =  E + M + V");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel2.add(jLabel10, gridBagConstraints);

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<=8 - In Coma", "=8 - Critical", ">8 <12 - Moderate Severity", ">=12 - Minor Injury" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox6, gridBagConstraints);

        jLabel11.setText("APGAR Scale (evaluate @ 1 and 5 Mins postpartum) - A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel11, gridBagConstraints);

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2- Activity (muscle tone)", "1 - Active Arms and legs flexed ", "0 - Absent" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox7, gridBagConstraints);

        jLabel12.setText("APGAR Scale (evaluate @ 1 and 5 Mins postpartum) - P");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        jPanel2.add(jLabel12, gridBagConstraints);

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2 - Pulse >100", "1 -  bpm <100 bpm", "0 - Absent", " " }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox8, gridBagConstraints);

        jLabel13.setText("APGAR Scale (evaluate @ 1 and 5 Mins postpartum) - G");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        jPanel2.add(jLabel13, gridBagConstraints);

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2 - (Reflex irritability) Sneezes", "1 - Coughs, pulls away Grimaces", "0 - No response", " " }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox9, gridBagConstraints);

        jLabel14.setText("APGAR Scale (evaluate @ 1 and 5 Mins postpartum) - A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        jPanel2.add(jLabel14, gridBagConstraints);

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2 - Normal over entire body", "1 -  Normal except extremities", "0 -  Cyanotic or pale all over", " " }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox10, gridBagConstraints);

        jLabel15.setText("APGAR Scale (evaluate @ 1 and 5 Mins postpartum) - R");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        jPanel2.add(jLabel15, gridBagConstraints);

        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2 - Respirations Good", "1 - Crying Slow", "0 - Irregular Absent" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox11, gridBagConstraints);

        jLabel16.setText("Pain Scale (Patients are asked to rate their pain (0 - No Pain, 10 -Extreme Pain)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        jPanel2.add(jLabel16, gridBagConstraints);

        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox12, gridBagConstraints);

        jTabbedPane1.addTab("Extended Vital Signs", jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        remarksJscrl1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cardex/Notes"));
        remarksJscrl1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        remarksJscrl1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        remarksTxt1.setToolTipText("Type comments and remarks here.");
        remarksJscrl1.setViewportView(remarksTxt1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(remarksJscrl1, gridBagConstraints);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Registration of services/operations performed on patient upon requests"));

        patientListTbl1.setAutoCreateRowSorter(true);
        patientListTbl1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        patientListTbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Service Requested", "Qty", "Amt", "Done ?", "GL Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        patientListTbl1.getTableHeader().setReorderingAllowed(false);
        patientListTbl1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListTbl1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(patientListTbl1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane2, gridBagConstraints);

        jTabbedPane1.addTab("Requested Services/Operations", jPanel3);

        jSplitPane1.setRightComponent(jTabbedPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);

        setBounds(0, 0, 843, 506);
    }// </editor-fold>//GEN-END:initComponents

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        patientNameTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT sex, year_of_birth::date from hp_patient_register WHERE patient_no = ?");
            pstmt.setString(1, patientNumberTxt.getText());
            java.sql.ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                if (rset.getString(1).startsWith("M")) {
                    maleRbtn.setSelected(true);
                } else {
                    femaleBtn.setSelected(true);
                }
                this.datePickerDOB.setDate(new java.util.Date(rset.getDate(2).getTime()));
            }

        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }

        jSearchDialog2.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (this.jCheckBox11.isSelected() && this.jCheckBox3.isSelected()) {

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence, sex from hp_patient_register where patient_no ILIKE '%" + jTextField113.getText() + "%' and last_visit > current_date - 2 ORDER BY second_name"));// and last_visit > current_date - 5 order by second_name"));

                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }
        } else {
            if (this.jCheckBox11.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence, sex from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '%" + jTextField113.getText() + "%' and last_visit > current_date - 2 order by second_name"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }
            }
        }
        // }else{
        if (this.jCheckBox21.isSelected() && this.jCheckBox3.isSelected()) {

            // if(this.jCheckBox21.isSelected()){
            //   if( jTextField113.getCaretPosition() > 3){f

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, sex from hp_inpatient_register where patient_no ILIKE '%" + jTextField113.getText() + "%' order by second_name"));

                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);


            }
        } else {
            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                if (this.jCheckBox21.isSelected() && this.jCheckBox4.isSelected()) {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence, sex from hp_inpatient_register where second_name||' '||first_name||' '||last_name ILIKE '" + jTextField113.getText() + "%' order by second_name"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }
            }
        }




    // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate
    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNameTxt.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);


    }
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void clearEntriesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEntriesBtnActionPerformed

        this.refreshFields();

// Add your handling code here:
    }//GEN-LAST:event_clearEntriesBtnActionPerformed

    private void recordSignsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordSignsBtnActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        java.lang.String tempRecordNo = com.afrisoftech.lib.DateLables.getDateLabel();

        String user = null;
        String pmtct = null;
        String Categ = null;
        String patCount = null;
        String Grp = null;
        String Rhs = null;
        String Gend = null;


        if (this.jCheckBox11.isSelected()) {
            Categ = jCheckBox11.getText();
        } else {
            Categ = jCheckBox21.getText();
        }

        if (this.jCheckBox5.isSelected()) {
            pmtct = jCheckBox5.getText();
        } else {
            pmtct = jCheckBox5.getText();
        }

        if (this.maleRbtn.isSelected()) {
            Gend = maleRbtn.getText();
        } else {
            Gend = femaleBtn.getText();
        }

        if (this.bloodGroupARbtn.isSelected()) {
            Grp = bloodGroupARbtn.getText();
        } else {
            if (this.bloodGroupBRbtn.isSelected()) {
                Grp = bloodGroupBRbtn.getText();
            } else {
                if (this.bloodGroupORbtn.isSelected()) {
                    Grp = bloodGroupARbtn.getText();
                } else {
                    if (this.bloodGroupABRbtn.isSelected()) {
                        Grp = bloodGroupABRbtn.getText();
                    } else {
                        Grp = bloodGroupUnknownRbtn.getText();
                    }
                }
            }
        }

        if (this.rhesusPositiveRbtn.isSelected()) {
            Rhs = rhesusPositiveRbtn.getText();
        } else {
            if (this.rhesusNegativeRbtn.isSelected()) {
                Rhs = rhesusNegativeRbtn.getText();
            } else {
                Rhs = rhesusUnknownRbtn.getText();
            }
        }
        double wght = 0;
        double heights = 0;
        double rbs = 0;
        if (this.weightTxt.getText().equalsIgnoreCase("")) {

            wght = 1;
        } else {
            wght = java.lang.Double.parseDouble(this.weightTxt.getText());
        }
        if (this.heightTxt.getText().equalsIgnoreCase("")) {
            heights = 1;

        } else {
            heights = java.lang.Double.parseDouble(this.heightTxt.getText());
        }

        if (this.rbsTxt.getText().equalsIgnoreCase("")) {
            rbs = 1;

        } else {
            rbs = java.lang.Double.parseDouble(this.rbsTxt.getText());
        }

        try {
            connectDB.setAutoCommit(false);


            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_signs_record(" +
                    "patient_no, patient_name, gender, weight, height, diastolic, " +
                    "pulse, systolic, date, temp, resp," +
                    "rbs, blood_group, rhesus, bmi,comments,record_id)" +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");

            pstmt.setString(1, patientNumberTxt.getText());
            pstmt.setString(2, patientNameTxt.getText());
            if (maleRbtn.isSelected()) {
                pstmt.setString(3, "Male");
            } else {
                pstmt.setString(3, "Female");
            }
            pstmt.setDouble(4, wght);
            pstmt.setDouble(5, heights);
            pstmt.setDouble(6, java.lang.Double.parseDouble(this.diastolicBPTxt.getText()));
            pstmt.setDouble(7, java.lang.Double.parseDouble(this.pulseRateTxt.getText()));
            pstmt.setDouble(8, java.lang.Double.parseDouble(this.systolicBPTxt.getText()));
            pstmt.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerData.getDate()));
            pstmt.setDouble(10, java.lang.Double.parseDouble(this.temperatureTxt.getText()));
            pstmt.setDouble(11, java.lang.Double.parseDouble(this.respiratoryRateTxt.getText()));
            pstmt.setDouble(12, rbs);
            pstmt.setString(13, Grp);
            pstmt.setString(14, Rhs);
            pstmt.setDouble(15, wght / heights);
            pstmt.setString(16, remarksTxt.getText());
            pstmt.setString(17, tempRecordNo);
            //pstmt.setString(18, pmtct);
            pstmt.execute();


            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rst = ps.executeQuery("select lpad(nextval('rec_no_seq')::text, 9, 0::text)");
            while (rst.next()) {
                rst.getObject(1).toString();

                patCount = rst.getObject(1).toString();
            }

            java.sql.PreparedStatement updatePstmt = connectDB.prepareStatement("UPDATE hp_signs_record SET record_id = ? WHERE patient_no = ? AND date = ?");

            updatePstmt.setString(1, patCount);
            updatePstmt.setString(2, this.patientNumberTxt.getText());
            updatePstmt.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerData.getDate()));

            updatePstmt.execute();
            java.sql.PreparedStatement updPstmt = connectDB.prepareStatement("UPDATE hp_patient_register set waiting_patient = false WHERE patient_no = ?");
            updPstmt.setString(1, patientNumberTxt.getText());
            updPstmt.executeUpdate();

            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Patient clinical record saved successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            ////       com.afrisoftech.txtreports.RecordTxt policy = new com.afrisoftech.txtreports.RecordTxt(connectDB, Patcount);

           // this.refreshFields();
        //  jComboBox2.setSelectedItem(null);
        } catch (java.lang.Exception sq) {
            sq.printStackTrace();
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }   // Add your handling code here:
    }//GEN-LAST:event_recordSignsBtnActionPerformed

    private void patientListTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListTblMouseClicked

        patientNumberTxt.setText(patientListTbl.getValueAt(patientListTbl.getSelectedRow(), 0).toString());
        patientNameTxt.setText(patientListTbl.getValueAt(patientListTbl.getSelectedRow(), 1).toString());

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT sex, year_of_birth::date from hp_patient_register WHERE patient_no = ?");
            pstmt.setString(1, patientNumberTxt.getText());
            java.sql.ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                if (rset.getString(1).startsWith("M")) {
                    maleRbtn.setSelected(true);
                } else {
                    femaleBtn.setSelected(true);
                }
                this.datePickerDOB.setDate(new java.util.Date(rset.getDate(2).getTime()));
            }

        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }

    // TODO add your handling code here:
    }//GEN-LAST:event_patientListTblMouseClicked

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked2();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void heightTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_heightTxtCaretUpdate

        if (weightTxt.getText().toCharArray().length > 0 && heightTxt.getText().toCharArray().length > 0) {
            //if(weightTxt.getText().matches("[0-9]") && heightTxt.getText().matches("[0-9]")){
                bmiTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(java.lang.Double.parseDouble(this.weightTxt.getText()) / ((java.lang.Double.parseDouble(this.heightTxt.getText()) * 0.01) * (java.lang.Double.parseDouble(this.heightTxt.getText()) * 0.01))));
                // } else {
                //   javax.swing.JOptionPane.showMessageDialog(this, "Values MUST be NUMERIC characters");
                // }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please double check values for WEIGHT and HEIGHT entries. \nThe two variables MUST be numeric values.");
        }// TODO add your handling code here:
    }//GEN-LAST:event_heightTxtCaretUpdate

    private void patientListTbl1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListTbl1MouseClicked
        if (patientListTbl1.getSelectedColumn() == 0) {

            this.cmboxMouseClicked();
        }// TODO add your handling code here:
    }//GEN-LAST:event_patientListTbl1MouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = this.jScrollPane2.getLocationOnScreen();
        jSearchDialog.setSize(600, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    com.afrisoftech.laboratory.InPatientFilePdf policy = new com.afrisoftech.laboratory.InPatientFilePdf();

    policy.InPatientFilePdf(connectDB, datePickerData.getDate(), datePickerData.getDate(), patientNumberTxt.getText());        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        if (jTextField112.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%' AND (main_service NOT ILIKE 'x%' OR main_service NOT ILIKE 'L%') ORDER BY service_type LIMIT 30"));

            jSearchScrollPane.setViewportView(jSearchTable);

        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        patientListTbl1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), patientListTbl1.getSelectedRow(), 0);
        patientListTbl1.setValueAt(1, patientListTbl1.getSelectedRow(), 1);
        patientListTbl1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), patientListTbl1.getSelectedRow(), 2);
        patientListTbl1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), patientListTbl1.getSelectedRow(), 4);

        double floatCol2 = java.lang.Double.parseDouble(patientListTbl1.getValueAt(patientListTbl1.getSelectedRow(), 1).toString());

        double floatCol3 = java.lang.Double.parseDouble(patientListTbl1.getValueAt(patientListTbl1.getSelectedRow(), 2).toString());

        double resVal = floatCol2 * floatCol3;

        //patientListTbl1.setValueAt(new java.lang.Float(resVal), patientListTbl1.getSelectedRow(), 3);
        double resFloat = 0.00;

        /*for (int i = 0; i < patientListTbl1.getRowCount(); i++) {

            if (patientListTbl1.getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {

                resFloat = resFloat + Double.parseDouble(patientListTbl1.getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            }
        }*/

        // resFloat = resVal+resFloat + Double.parseDouble(jTable1.getValueAt( jTable1.getSelectedRow(), 3).toString());

        jSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        jSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void refreshFields() {
        weightTxt.setText("");
        patientNumberTxt.setText("");
        patientNameTxt.setText("");
        heightTxt.setText("");
        rbsTxt.setText("");
        diastolicBPTxt.setText("");
        systolicBPTxt.setText("");
        respiratoryRateTxt.setText("");
        temperatureTxt.setText("");
        pulseRateTxt.setText("");
        patientListTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, first_name ||' '||second_name||' '||last_name AS patient_name FROM hp_patient_register WHERE waiting_patient = true AND last_visit = current_date"));
    }

    class WaitingPatientsThread extends Thread {

        public WaitingPatientsThread() {
        }

        public void run() {
            while (true) {
                patientListTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, first_name ||' '||second_name||' '||last_name AS patient_name FROM hp_patient_register WHERE waiting_patient = true and last_visit = current_date"));
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(VitalSignRecIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
 
                                        
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner beginDateSpinner;
    private javax.swing.JRadioButton bloodGroupABRbtn;
    private javax.swing.JRadioButton bloodGroupARbtn;
    private javax.swing.JRadioButton bloodGroupBRbtn;
    private javax.swing.JRadioButton bloodGroupORbtn;
    private javax.swing.JPanel bloodGroupPanel;
    private javax.swing.JRadioButton bloodGroupUnknownRbtn;
    private javax.swing.JLabel bmiLbl;
    private javax.swing.JTextField bmiTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JPanel butttonsPanel;
    private javax.swing.JButton clearEntriesBtn;
    public static javax.swing.JButton closeFormBtn;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private org.netbeans.lib.sql.NBCachedRowSet crset4;
    private com.afrisoftech.lib.DatePicker datePickerDOB;
    private com.afrisoftech.lib.DatePicker datePickerData;
    private javax.swing.JLabel diastolicBPLbl;
    private javax.swing.JTextField diastolicBPTxt;
    private javax.swing.JPanel dobPanel;
    private javax.swing.JRadioButton femaleBtn;
    private javax.swing.JLabel genderLbl;
    private javax.swing.JPanel genderPanel;
    private javax.swing.JLabel heightLbl;
    private javax.swing.JTextField heightTxt;
    private javax.swing.JButton helpBtn;
    private javax.swing.JPanel ipopSelectorPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton92;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox10;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox12;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton maleRbtn;
    private javax.swing.JPanel patientListPn;
    private javax.swing.JTable patientListTbl;
    private javax.swing.JTable patientListTbl1;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JPanel patientNoSearchPanel;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JLabel pulseRateLbl;
    private javax.swing.JTextField pulseRateTxt;
    private javax.swing.JLabel rbsLbl;
    private javax.swing.JTextField rbsTxt;
    private javax.swing.JButton recordSignsBtn;
    private javax.swing.JScrollPane remarksJscrl;
    private javax.swing.JScrollPane remarksJscrl1;
    private javax.swing.JLabel remarksLbl;
    private javax.swing.JTextPane remarksTxt;
    private javax.swing.JTextPane remarksTxt1;
    private javax.swing.JLabel respiratoryRateLbl;
    private javax.swing.JTextField respiratoryRateTxt;
    private javax.swing.JPanel rhesusFactorPanel;
    private javax.swing.JRadioButton rhesusNegativeRbtn;
    private javax.swing.JRadioButton rhesusPositiveRbtn;
    private javax.swing.JRadioButton rhesusUnknownRbtn;
    private javax.swing.JButton searchButton;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet2;
    private javax.swing.JPanel searchalgorithmPanel;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JLabel systolicBPLbl;
    private javax.swing.JTextField systolicBPTxt;
    private javax.swing.JLabel temparatureLbl;
    private javax.swing.JTextField temperatureTxt;
    private javax.swing.JLabel weightLbl;
    private javax.swing.JTextField weightTxt;
    // End of variables declaration//GEN-END:variables
}
