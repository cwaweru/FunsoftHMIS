 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.nutrition;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
/**
 *
 * @author wgitau@systempartners.biz
 */
public class NutritionHomeIntr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    Date date = new Date();
    private static String ward = null;
    private String gender = null;
    private String patient_name = null;
    int years = 0, months = 0, days = 0;
    
    /**
     * Creates new form NursingCasualty
     */
    public NutritionHomeIntr(java.sql.Connection connDb) {
        connectDB = connDb;
        
        initComponents();        
        paedNutriCarePlanTxa.setText("1.\n\n2.\n\n3.\n\n4.\n\n5.\n\n6.\n\n7");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientSearch = new javax.swing.JDialog();
        patientSearchDialogPanel = new javax.swing.JPanel();
        searchPatientNumbTxt = new javax.swing.JTextField();
        patientSearchScrollPane = new javax.swing.JScrollPane();
        patientSearchTable = new com.afrisoftech.dbadmin.JTable();
        patientSearchBtn = new javax.swing.JButton();
        patientDiagnosisSearch = new javax.swing.JDialog();
        patientDiagnosisSearchDialogPanel = new javax.swing.JPanel();
        patientDiagnosisSearchTxt = new javax.swing.JTextField();
        patientDiagnosisSearchScrollPane = new javax.swing.JScrollPane();
        patientDiagnosisSearchTable = new com.afrisoftech.dbadmin.JTable();
        patientDiagnosisSearchBtn = new javax.swing.JButton();
        paedPatientSearch = new javax.swing.JDialog();
        paedPatientSearchDialogPanel = new javax.swing.JPanel();
        searchPaedPatientNumbTxt = new javax.swing.JTextField();
        patientPaedSearchScrollPane = new javax.swing.JScrollPane();
        patientPaedSearchTable = new com.afrisoftech.dbadmin.JTable();
        patientPaedSearchBtn = new javax.swing.JButton();
        paedPatientDiagnosisSearch = new javax.swing.JDialog();
        paedPatientDiagnosisSearchDialogPanel = new javax.swing.JPanel();
        paedPatientDiagnosisSearchTxt = new javax.swing.JTextField();
        paedPatientDiagnosisSearchScrollPane = new javax.swing.JScrollPane();
        paedPatientDiagnosisSearchTable = new com.afrisoftech.dbadmin.JTable();
        paedPatientDiagnosisSearchBtn = new javax.swing.JButton();
        nutritionHomeTabbedPane = new javax.swing.JTabbedPane();
        adultsNutritionAssessPanel = new javax.swing.JPanel();
        nutriHomeSplitPane = new javax.swing.JSplitPane();
        patientDetailsPanel = new javax.swing.JPanel();
        searchForPatientPanel = new javax.swing.JPanel();
        nameNoLabel = new javax.swing.JLabel();
        nameNoSearchPanel = new javax.swing.JPanel();
        nameNoTxt = new javax.swing.JTextField();
        nameNoSearchBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        headerDatePicker = new com.afrisoftech.lib.DatePicker();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        patientDetailsTxa = new javax.swing.JTextArea();
        reffDieNutrImpPanel = new javax.swing.JPanel();
        diseaseSearchPanel = new javax.swing.JPanel();
        dieseaseSearchLabel = new javax.swing.JLabel();
        dieaseaseSearchPanel = new javax.swing.JPanel();
        dieaseaseSearchTxt = new javax.swing.JTextField();
        deseaseSearchBtn = new javax.swing.JButton();
        nutritionImplicationTxt = new javax.swing.JTextField();
        refferedFromLabel = new javax.swing.JLabel();
        nutritionImplicationLabel = new javax.swing.JLabel();
        refferedFromCmbx = new javax.swing.JComboBox();
        nutritionAssessmentPanel = new javax.swing.JPanel();
        nutritionSplitPane = new javax.swing.JSplitPane();
        nutritionAssessmentTabbedPane = new javax.swing.JTabbedPane();
        anthropMeasPanel = new javax.swing.JPanel();
        inAnthroMeasPanel = new javax.swing.JPanel();
        anthHeightLbl = new javax.swing.JLabel();
        anthHeightTxt = new javax.swing.JTextField();
        anthrWeightLbl = new javax.swing.JLabel();
        anthrWeightTxt = new javax.swing.JTextField();
        anthroBMItxt = new javax.swing.JTextField();
        anthIBWtxt = new javax.swing.JTextField();
        anthrRemarksScrollPane = new javax.swing.JScrollPane();
        anthrRemarksTxa = new javax.swing.JTextArea();
        bioChemistryScrollPane = new javax.swing.JScrollPane();
        bioChemistryTxa = new javax.swing.JTextArea();
        anthOKbtn = new javax.swing.JButton();
        anthrRemoveBtn = new javax.swing.JButton();
        anthroMeasValueScrollPane = new javax.swing.JScrollPane();
        anthroMeasValueTable = new javax.swing.JTable();
        anthClearBtn = new javax.swing.JButton();
        dietHistoryPanel = new javax.swing.JPanel();
        inDietHistoryPanel = new javax.swing.JPanel();
        anthrRemarksScrollPane1 = new javax.swing.JScrollPane();
        dietHistRestrictionTxa = new javax.swing.JTextArea();
        bioChemistryScrollPane1 = new javax.swing.JScrollPane();
        dietHistAllegiesTxa = new javax.swing.JTextArea();
        feedingPatternsPanel = new javax.swing.JPanel();
        dietHistBreakFastLbl = new javax.swing.JLabel();
        dietHistBreakFastTxt = new javax.swing.JTextField();
        dietHistLunchLbl = new javax.swing.JLabel();
        dietHistLunchTxt = new javax.swing.JTextField();
        dietHistSupperTxt = new javax.swing.JTextField();
        dietHistSnacksLbl = new javax.swing.JLabel();
        dietHistSnacksTxt = new javax.swing.JTextField();
        dietHistSupperLbl = new javax.swing.JLabel();
        bioChemistryScrollPane2 = new javax.swing.JScrollPane();
        feedHistoryCommRemTxa = new javax.swing.JTextArea();
        feedingPatternBtnPanel = new javax.swing.JPanel();
        feedingPatternOKbtn = new javax.swing.JButton();
        feedingPatternRemoveBtn = new javax.swing.JButton();
        feedingClearBtn = new javax.swing.JButton();
        feedingPatternValueScrollPane = new javax.swing.JScrollPane();
        feedingPatternValueTable = new javax.swing.JTable();
        appNutriIntakePanel = new javax.swing.JPanel();
        approNutriIntakePanel = new javax.swing.JPanel();
        inApproxNutriIntakePanel = new javax.swing.JPanel();
        approxPROTLbl = new javax.swing.JLabel();
        approxPROTxt = new javax.swing.JTextField();
        approxCHOSLbl = new javax.swing.JLabel();
        approxCHOStxt = new javax.swing.JTextField();
        approxKCALtxt = new javax.swing.JTextField();
        anthrRemarksScrollPane2 = new javax.swing.JScrollPane();
        typeOfDietTxa = new javax.swing.JTextArea();
        bioChemistryScrollPane3 = new javax.swing.JScrollPane();
        currProbAffFoodTxa = new javax.swing.JTextArea();
        approxOKbtn = new javax.swing.JButton();
        approxRemoveBtn = new javax.swing.JButton();
        approxNutriValueScrollPane = new javax.swing.JScrollPane();
        approxNutriValueTable = new javax.swing.JTable();
        approxFATStxt = new javax.swing.JTextField();
        approxFATSLbl = new javax.swing.JLabel();
        approxNutOthersLbl = new javax.swing.JLabel();
        approxNutOthersTxt = new javax.swing.JTextField();
        approxClearBtn = new javax.swing.JButton();
        carePlanPanel = new javax.swing.JPanel();
        inApproxNutriIntakePanel1 = new javax.swing.JPanel();
        carePlanPROTLbl = new javax.swing.JLabel();
        carePlanPROTTxt = new javax.swing.JTextField();
        carePlanCHOSLbl = new javax.swing.JLabel();
        carePlanCHOSTxt = new javax.swing.JTextField();
        carePlanKCALSTxt = new javax.swing.JTextField();
        carePlanOKbtn = new javax.swing.JButton();
        carePlanRemovebtn = new javax.swing.JButton();
        carePlanValueScrollPane = new javax.swing.JScrollPane();
        carePlanValueTable = new javax.swing.JTable();
        carePlanFATSTxt = new javax.swing.JTextField();
        carePlanFATSLbl = new javax.swing.JLabel();
        carePlanRODLbl = new javax.swing.JLabel();
        carePlanCODLbl = new javax.swing.JLabel();
        carePlanCODTxt = new javax.swing.JTextField();
        carePlanPrescribedDietLbl = new javax.swing.JLabel();
        carePlanPrescribedDietTxt = new javax.swing.JTextField();
        carePlanOthersTxt = new javax.swing.JTextField();
        carePlanOthersLbl = new javax.swing.JLabel();
        carePlanValueRMFPScrollPane4 = new javax.swing.JScrollPane();
        carePlanRMFPTxa = new javax.swing.JTextArea();
        carePlanRODCbx = new javax.swing.JComboBox();
        carePlanClearBtn = new javax.swing.JButton();
        carePlanFLUIDSLbl = new javax.swing.JLabel();
        carePlanFLUIDSTxt = new javax.swing.JTextField();
        fillingPanel = new javax.swing.JPanel();
        paedNutritionAssessPanel = new javax.swing.JPanel();
        nutriHomeSplitPane1 = new javax.swing.JSplitPane();
        patientDetailsPanel1 = new javax.swing.JPanel();
        searchForPatientPanel1 = new javax.swing.JPanel();
        paedNameNoLabel = new javax.swing.JLabel();
        paedNameNoSearchPanel = new javax.swing.JPanel();
        paedNameNoTxt = new javax.swing.JTextField();
        paedNameNoSearchBtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        paedHeaderDatePicker = new com.afrisoftech.lib.DatePicker();
        paedPatientDetailsPanel = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        paedPatientDetailsTxa = new javax.swing.JTextArea();
        reffDieNutrImpPanel1 = new javax.swing.JPanel();
        diseaseSearchPanel1 = new javax.swing.JPanel();
        paedDieseaseSearchLabel = new javax.swing.JLabel();
        dieaseaseSearchPanel1 = new javax.swing.JPanel();
        paedDieaseaseSearchTxt = new javax.swing.JTextField();
        paedDeseaseSearchBtn = new javax.swing.JButton();
        nutritionAssessmentPanel1 = new javax.swing.JPanel();
        nutritionSplitPane1 = new javax.swing.JSplitPane();
        nutritionAssessmentTabbedPane1 = new javax.swing.JTabbedPane();
        paedFamilyHistoryPanel = new javax.swing.JPanel();
        familyHistoryPanel = new javax.swing.JPanel();
        paedFamilyHistFatherOccTxt = new javax.swing.JTextField();
        paedFamilyHistoryPMSCmbx = new javax.swing.JComboBox();
        paedFamilyHistoryTNOSScrollPane = new javax.swing.JScrollPane();
        paedFamilyHistoryTNOSTxa = new javax.swing.JTextArea();
        paedFamilyHistFatherLbl = new javax.swing.JLabel();
        paedFamilyHistFatAgeTxt = new javax.swing.JTextField();
        paedFamilyHistMATxt = new javax.swing.JTextField();
        paedFamilyHistMotherLbl = new javax.swing.JLabel();
        paedFamilyHistMAOccTxt = new javax.swing.JTextField();
        paedFamilyHistoryCBOTxt = new javax.swing.JTextField();
        paedFamilyHistOPIScrollPane = new javax.swing.JScrollPane();
        paedFamilyHistOPITxa = new javax.swing.JTextArea();
        paedFamilyHistoryCBOLbl = new javax.swing.JLabel();
        paedFamilyHistoryOKbtn = new javax.swing.JButton();
        paedFamilyHistoryRemoveBtn = new javax.swing.JButton();
        paedFamilyHistoryClearBtn = new javax.swing.JButton();
        paedFamilyHistoryScrollPane1 = new javax.swing.JScrollPane();
        paedFamilyHistoryMeasValueTable = new javax.swing.JTable();
        paedNutriHistPanel = new javax.swing.JPanel();
        paedNutriHistInPanel = new javax.swing.JPanel();
        paedNutriHistBRHScrollPane = new javax.swing.JScrollPane();
        paedNutriHistBRHTxa = new javax.swing.JTextArea();
        paedNutriHistWAFUScrollPane = new javax.swing.JScrollPane();
        paedNutriHistWAFUTxa = new javax.swing.JTextArea();
        paedNutriHistUCDIScrollPane = new javax.swing.JScrollPane();
        paedNutriHistUCDITxa = new javax.swing.JTextArea();
        paedNutriHistScrollPane = new javax.swing.JScrollPane();
        paedNutriHistValueTable = new javax.swing.JTable();
        paedBTNPanel = new javax.swing.JPanel();
        paedNutriHistOKbtn = new javax.swing.JButton();
        paedNutriHistClearBtn = new javax.swing.JButton();
        paedNutriHistRemoveBtn = new javax.swing.JButton();
        paedAnthroMeasurePanel = new javax.swing.JPanel();
        paedAnthroMeasureInPanel = new javax.swing.JPanel();
        paedAnthAssessBTKgLbl = new javax.swing.JLabel();
        paedAnthAssessBTKgTxt = new javax.swing.JTextField();
        paedAnthAssessAWTKgLbl = new javax.swing.JLabel();
        paedAnthAssessAWTKgTxt = new javax.swing.JTextField();
        paedAnthAssessHeightCmLbl = new javax.swing.JLabel();
        paedAnthAssessRefWtAgeTxt = new javax.swing.JTextField();
        paedAnthAssessRefWtAgeLbl = new javax.swing.JLabel();
        paedAnthAssessHeightCmTxt = new javax.swing.JTextField();
        paedAnthAssessWtforAgeLbl = new javax.swing.JLabel();
        paedAnthAssessWtforAgeTxt = new javax.swing.JTextField();
        paedAnthAssessOthClBioScrollPane = new javax.swing.JScrollPane();
        paedAnthAssessOthClBioTxa = new javax.swing.JTextArea();
        paedAnthAssessOCScrollPane = new javax.swing.JScrollPane();
        paedAnthAssessOCTxa = new javax.swing.JTextArea();
        paedAnthAssessScrollPane = new javax.swing.JScrollPane();
        paedAnthAssessValueTable = new javax.swing.JTable();
        paedAmBTNPanel = new javax.swing.JPanel();
        paedAnthAssessOKbtn = new javax.swing.JButton();
        paedAnthAssessClearBtn = new javax.swing.JButton();
        paedAnthAssessRemoveBtn = new javax.swing.JButton();
        paedCarePlanPanel = new javax.swing.JPanel();
        paedCarePlanInPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paedNutriCarePlanTxa = new javax.swing.JTextArea();
        paedAmBTNPanel1 = new javax.swing.JPanel();
        paedNutriCarePlanOKbtn = new javax.swing.JButton();
        paedNutriCarePlanClearBtn = new javax.swing.JButton();
        fillingPanel1 = new javax.swing.JPanel();

        patientSearch.setModal(true);
        patientSearch.setUndecorated(true);
        patientSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        searchPatientNumbTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchPatientNumbTxtCaretUpdate(evt);
            }
        });
        searchPatientNumbTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatientNumbTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientSearchDialogPanel.add(searchPatientNumbTxt, gridBagConstraints);

        patientSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientSearchTableMouseClicked(evt);
            }
        });
        patientSearchScrollPane.setViewportView(patientSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        patientSearchDialogPanel.add(patientSearchScrollPane, gridBagConstraints);

        patientSearchBtn.setText("Dispose");
        patientSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchDialogPanel.add(patientSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearch.getContentPane().add(patientSearchDialogPanel, gridBagConstraints);

        patientDiagnosisSearch.setModal(true);
        patientDiagnosisSearch.setUndecorated(true);
        patientDiagnosisSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientDiagnosisSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientDiagnosisSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        patientDiagnosisSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientDiagnosisSearchTxtCaretUpdate(evt);
            }
        });
        patientDiagnosisSearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientDiagnosisSearchTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientDiagnosisSearchDialogPanel.add(patientDiagnosisSearchTxt, gridBagConstraints);

        patientDiagnosisSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientDiagnosisSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientDiagnosisSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientDiagnosisSearchTableMouseClicked(evt);
            }
        });
        patientDiagnosisSearchScrollPane.setViewportView(patientDiagnosisSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        patientDiagnosisSearchDialogPanel.add(patientDiagnosisSearchScrollPane, gridBagConstraints);

        patientDiagnosisSearchBtn.setText("Dispose");
        patientDiagnosisSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientDiagnosisSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDiagnosisSearchDialogPanel.add(patientDiagnosisSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDiagnosisSearch.getContentPane().add(patientDiagnosisSearchDialogPanel, gridBagConstraints);

        paedPatientSearch.setModal(true);
        paedPatientSearch.setUndecorated(true);
        paedPatientSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        paedPatientSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paedPatientSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        searchPaedPatientNumbTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchPaedPatientNumbTxtCaretUpdate(evt);
            }
        });
        searchPaedPatientNumbTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPaedPatientNumbTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        paedPatientSearchDialogPanel.add(searchPaedPatientNumbTxt, gridBagConstraints);

        patientPaedSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientPaedSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientPaedSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientPaedSearchTableMouseClicked(evt);
            }
        });
        patientPaedSearchScrollPane.setViewportView(patientPaedSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        paedPatientSearchDialogPanel.add(patientPaedSearchScrollPane, gridBagConstraints);

        patientPaedSearchBtn.setText("Dispose");
        patientPaedSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientPaedSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientSearchDialogPanel.add(patientPaedSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientSearch.getContentPane().add(paedPatientSearchDialogPanel, gridBagConstraints);

        paedPatientDiagnosisSearch.setModal(true);
        paedPatientDiagnosisSearch.setUndecorated(true);
        paedPatientDiagnosisSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        paedPatientDiagnosisSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paedPatientDiagnosisSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        paedPatientDiagnosisSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                paedPatientDiagnosisSearchTxtCaretUpdate(evt);
            }
        });
        paedPatientDiagnosisSearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedPatientDiagnosisSearchTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        paedPatientDiagnosisSearchDialogPanel.add(paedPatientDiagnosisSearchTxt, gridBagConstraints);

        paedPatientDiagnosisSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        paedPatientDiagnosisSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        paedPatientDiagnosisSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paedPatientDiagnosisSearchTableMouseClicked(evt);
            }
        });
        paedPatientDiagnosisSearchScrollPane.setViewportView(paedPatientDiagnosisSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        paedPatientDiagnosisSearchDialogPanel.add(paedPatientDiagnosisSearchScrollPane, gridBagConstraints);

        paedPatientDiagnosisSearchBtn.setText("Dispose");
        paedPatientDiagnosisSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedPatientDiagnosisSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientDiagnosisSearchDialogPanel.add(paedPatientDiagnosisSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientDiagnosisSearch.getContentPane().add(paedPatientDiagnosisSearchDialogPanel, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nutrition Assessement Form");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        nutritionHomeTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nutritionHomeTabbedPaneMouseClicked(evt);
            }
        });

        adultsNutritionAssessPanel.setBackground(new java.awt.Color(204, 255, 204));
        adultsNutritionAssessPanel.setLayout(new java.awt.GridBagLayout());

        nutriHomeSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        nutriHomeSplitPane.setEnabled(false);
        nutriHomeSplitPane.setFocusable(false);

        patientDetailsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientDetailsPanel.setForeground(new java.awt.Color(0, 0, 204));
        patientDetailsPanel.setLayout(new java.awt.GridBagLayout());

        searchForPatientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search for the Patient Here......", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(41, 41, 213)));
        searchForPatientPanel.setLayout(new java.awt.GridBagLayout());

        nameNoLabel.setText("Patient No/Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        searchForPatientPanel.add(nameNoLabel, gridBagConstraints);

        nameNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        nameNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        nameNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nameNoSearchPanel.add(nameNoTxt, gridBagConstraints);

        nameNoSearchBtn.setToolTipText("Search");
        nameNoSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameNoSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        nameNoSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        nameNoSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nameNoSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameNoSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        nameNoSearchPanel.add(nameNoSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        searchForPatientPanel.add(nameNoSearchPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        searchForPatientPanel.add(jPanel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        searchForPatientPanel.add(headerDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        patientDetailsPanel.add(searchForPatientPanel, gridBagConstraints);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The Patient's Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(43, 43, 224)));
        jPanel18.setForeground(new java.awt.Color(0, 0, 204));
        jPanel18.setLayout(new java.awt.GridBagLayout());

        patientDetailsTxa.setEditable(false);
        patientDetailsTxa.setColumns(4);
        patientDetailsTxa.setForeground(new java.awt.Color(255, 0, 0));
        patientDetailsTxa.setLineWrap(true);
        patientDetailsTxa.setRows(3);
        patientDetailsTxa.setTabSize(5);
        patientDetailsTxa.setText("\n");
        patientDetailsTxa.setToolTipText("The Patient's Details");
        patientDetailsTxa.setWrapStyleWord(true);
        patientDetailsTxa.setAutoscrolls(false);
        patientDetailsTxa.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane19.setViewportView(patientDetailsTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        jPanel18.add(jScrollPane19, gridBagConstraints);

        reffDieNutrImpPanel.setLayout(new java.awt.GridBagLayout());

        diseaseSearchPanel.setLayout(new java.awt.GridBagLayout());

        dieseaseSearchLabel.setText("Principle Diagnosis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        diseaseSearchPanel.add(dieseaseSearchLabel, gridBagConstraints);

        dieaseaseSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dieaseaseSearchPanel.setLayout(new java.awt.GridBagLayout());

        dieaseaseSearchTxt.setEditable(false);
        dieaseaseSearchTxt.setToolTipText("Principle Diagnosis of the Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dieaseaseSearchPanel.add(dieaseaseSearchTxt, gridBagConstraints);

        deseaseSearchBtn.setToolTipText("Search");
        deseaseSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        deseaseSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        deseaseSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        deseaseSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deseaseSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deseaseSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        dieaseaseSearchPanel.add(deseaseSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 2, 0);
        diseaseSearchPanel.add(dieaseaseSearchPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel.add(diseaseSearchPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel.add(nutritionImplicationTxt, gridBagConstraints);

        refferedFromLabel.setText("Reffered From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        reffDieNutrImpPanel.add(refferedFromLabel, gridBagConstraints);

        nutritionImplicationLabel.setText("Nutrition Implication");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        reffDieNutrImpPanel.add(nutritionImplicationLabel, gridBagConstraints);

        refferedFromCmbx.setEditable(true);
        refferedFromCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Not Refered/Unknown Status", "Other dept at KNH", "County Hospital", "Health Center(Within Nairobi)", "Health Center(Outside Nairobi)", "Private Facility or Doctor", "NGO Facility", "Outside country", "Casualty dept at KNH", "Other dept at KNH" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel.add(refferedFromCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel18.add(reffDieNutrImpPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        patientDetailsPanel.add(jPanel18, gridBagConstraints);

        nutriHomeSplitPane.setLeftComponent(patientDetailsPanel);

        nutritionAssessmentPanel.setLayout(new java.awt.GridBagLayout());

        nutritionSplitPane.setDividerLocation(1);
        nutritionSplitPane.setEnabled(false);
        nutritionSplitPane.setFocusable(false);
        nutritionSplitPane.setRequestFocusEnabled(false);

        nutritionAssessmentTabbedPane.setForeground(new java.awt.Color(0, 102, 51));
        nutritionAssessmentTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        nutritionAssessmentTabbedPane.setMinimumSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane.setPreferredSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nutritionAssessmentTabbedPaneMouseClicked(evt);
            }
        });
        nutritionAssessmentTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nutritionAssessmentTabbedPaneStateChanged(evt);
            }
        });

        anthropMeasPanel.setLayout(new java.awt.GridBagLayout());

        inAnthroMeasPanel.setLayout(new java.awt.GridBagLayout());

        anthHeightLbl.setText("Height(m)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthHeightLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inAnthroMeasPanel.add(anthHeightTxt, gridBagConstraints);

        anthrWeightLbl.setText("Weight(Kg)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthrWeightLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inAnthroMeasPanel.add(anthrWeightTxt, gridBagConstraints);

        anthroBMItxt.setEditable(false);
        anthroBMItxt.setToolTipText("Click to reveal Patient's BMI");
        anthroBMItxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BMI(Kg/M2)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(24, 43, 236)));
        anthroBMItxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anthroBMItxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        inAnthroMeasPanel.add(anthroBMItxt, gridBagConstraints);

        anthIBWtxt.setEditable(false);
        anthIBWtxt.setToolTipText("Click to reveal the Patient's IBW");
        anthIBWtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IBW (Kg)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(31, 31, 229)));
        anthIBWtxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anthIBWtxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthIBWtxt, gridBagConstraints);

        anthrRemarksTxa.setColumns(20);
        anthrRemarksTxa.setLineWrap(true);
        anthrRemarksTxa.setRows(5);
        anthrRemarksTxa.setWrapStyleWord(true);
        anthrRemarksTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Remarks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(20, 35, 233)));
        anthrRemarksScrollPane.setViewportView(anthrRemarksTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthrRemarksScrollPane, gridBagConstraints);

        bioChemistryTxa.setColumns(20);
        bioChemistryTxa.setLineWrap(true);
        bioChemistryTxa.setRows(5);
        bioChemistryTxa.setWrapStyleWord(true);
        bioChemistryTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bio-Chemistry", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 16, 231)));
        bioChemistryScrollPane.setViewportView(bioChemistryTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(bioChemistryScrollPane, gridBagConstraints);

        anthOKbtn.setText("OK");
        anthOKbtn.setToolTipText("Save the Patient's Details");
        anthOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anthOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthOKbtn, gridBagConstraints);

        anthrRemoveBtn.setText("Remove");
        anthrRemoveBtn.setToolTipText("Delete and Remove table values ");
        anthrRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anthrRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthrRemoveBtn, gridBagConstraints);

        anthroMeasValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "DATE", "HEIGHT", "WEIGHT", "BMI", "IBW", "BIOCHEMISTY", "REMARKS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        anthroMeasValueScrollPane.setViewportView(anthroMeasValueTable);
        anthroMeasValueTable.getColumnModel().getColumn(0).setResizable(false);
        anthroMeasValueTable.getColumnModel().getColumn(0).setHeaderValue("DATE");
        anthroMeasValueTable.getColumnModel().getColumn(1).setResizable(false);
        anthroMeasValueTable.getColumnModel().getColumn(1).setHeaderValue("HEIGHT");
        anthroMeasValueTable.getColumnModel().getColumn(2).setHeaderValue("WEIGHT");
        anthroMeasValueTable.getColumnModel().getColumn(3).setResizable(false);
        anthroMeasValueTable.getColumnModel().getColumn(3).setHeaderValue("BMI");
        anthroMeasValueTable.getColumnModel().getColumn(4).setHeaderValue("IBW");
        anthroMeasValueTable.getColumnModel().getColumn(5).setPreferredWidth(500);
        anthroMeasValueTable.getColumnModel().getColumn(5).setHeaderValue("BIOCHEMISTY");
        anthroMeasValueTable.getColumnModel().getColumn(6).setHeaderValue("REMARKS");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inAnthroMeasPanel.add(anthroMeasValueScrollPane, gridBagConstraints);

        anthClearBtn.setText("Clear");
        anthClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anthClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inAnthroMeasPanel.add(anthClearBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        anthropMeasPanel.add(inAnthroMeasPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane.addTab("Anthropometric Measurements", anthropMeasPanel);

        dietHistoryPanel.setLayout(new java.awt.GridBagLayout());

        inDietHistoryPanel.setLayout(new java.awt.GridBagLayout());

        dietHistRestrictionTxa.setColumns(20);
        dietHistRestrictionTxa.setRows(5);
        dietHistRestrictionTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Restriction/s", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(20, 35, 233)));
        anthrRemarksScrollPane1.setViewportView(dietHistRestrictionTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inDietHistoryPanel.add(anthrRemarksScrollPane1, gridBagConstraints);

        dietHistAllegiesTxa.setColumns(20);
        dietHistAllegiesTxa.setRows(5);
        dietHistAllegiesTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Allergies", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 16, 231)));
        bioChemistryScrollPane1.setViewportView(dietHistAllegiesTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inDietHistoryPanel.add(bioChemistryScrollPane1, gridBagConstraints);

        feedingPatternsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feeding Patterns (Diet History)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(29, 33, 236)));
        feedingPatternsPanel.setLayout(new java.awt.GridBagLayout());

        dietHistBreakFastLbl.setText("BreakFast");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternsPanel.add(dietHistBreakFastLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        feedingPatternsPanel.add(dietHistBreakFastTxt, gridBagConstraints);

        dietHistLunchLbl.setText("Lunch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternsPanel.add(dietHistLunchLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        feedingPatternsPanel.add(dietHistLunchTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        feedingPatternsPanel.add(dietHistSupperTxt, gridBagConstraints);

        dietHistSnacksLbl.setText("Snacks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternsPanel.add(dietHistSnacksLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        feedingPatternsPanel.add(dietHistSnacksTxt, gridBagConstraints);

        dietHistSupperLbl.setText("Supper");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternsPanel.add(dietHistSupperLbl, gridBagConstraints);

        feedHistoryCommRemTxa.setColumns(20);
        feedHistoryCommRemTxa.setRows(5);
        feedHistoryCommRemTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Comments/Remarks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 16, 231)));
        bioChemistryScrollPane2.setViewportView(feedHistoryCommRemTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternsPanel.add(bioChemistryScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inDietHistoryPanel.add(feedingPatternsPanel, gridBagConstraints);

        feedingPatternBtnPanel.setLayout(new java.awt.GridBagLayout());

        feedingPatternOKbtn.setText("OK");
        feedingPatternOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedingPatternOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternBtnPanel.add(feedingPatternOKbtn, gridBagConstraints);

        feedingPatternRemoveBtn.setText("Remove");
        feedingPatternRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedingPatternRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternBtnPanel.add(feedingPatternRemoveBtn, gridBagConstraints);

        feedingClearBtn.setText("Clear");
        feedingClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedingClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingPatternBtnPanel.add(feedingClearBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inDietHistoryPanel.add(feedingPatternBtnPanel, gridBagConstraints);

        feedingPatternValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        feedingPatternValueScrollPane.setViewportView(feedingPatternValueTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inDietHistoryPanel.add(feedingPatternValueScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dietHistoryPanel.add(inDietHistoryPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane.addTab("Feeding Patterns (Diet History)", dietHistoryPanel);

        appNutriIntakePanel.setLayout(new java.awt.GridBagLayout());

        approNutriIntakePanel.setLayout(new java.awt.GridBagLayout());

        inApproxNutriIntakePanel.setLayout(new java.awt.GridBagLayout());

        approxPROTLbl.setText("PROT(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxPROTLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel.add(approxPROTxt, gridBagConstraints);

        approxCHOSLbl.setText("CHOS(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxCHOSLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel.add(approxCHOStxt, gridBagConstraints);

        approxKCALtxt.setEditable(false);
        approxKCALtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "KCALS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(24, 43, 236)));
        approxKCALtxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                approxKCALtxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxKCALtxt, gridBagConstraints);

        typeOfDietTxa.setColumns(20);
        typeOfDietTxa.setRows(5);
        typeOfDietTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Type Of Diet", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(20, 35, 233)));
        anthrRemarksScrollPane2.setViewportView(typeOfDietTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(anthrRemarksScrollPane2, gridBagConstraints);

        currProbAffFoodTxa.setColumns(20);
        currProbAffFoodTxa.setRows(5);
        currProbAffFoodTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Current Problems affecting Food Intake", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 16, 231)));
        bioChemistryScrollPane3.setViewportView(currProbAffFoodTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(bioChemistryScrollPane3, gridBagConstraints);

        approxOKbtn.setText("OK");
        approxOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approxOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxOKbtn, gridBagConstraints);

        approxRemoveBtn.setText("Remove");
        approxRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approxRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxRemoveBtn, gridBagConstraints);

        approxNutriValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        approxNutriValueScrollPane.setViewportView(approxNutriValueTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxNutriValueScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel.add(approxFATStxt, gridBagConstraints);

        approxFATSLbl.setText("FATS(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxFATSLbl, gridBagConstraints);

        approxNutOthersLbl.setText("Others");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxNutOthersLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxNutOthersTxt, gridBagConstraints);

        approxClearBtn.setText("Clear");
        approxClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approxClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel.add(approxClearBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        approNutriIntakePanel.add(inApproxNutriIntakePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        appNutriIntakePanel.add(approNutriIntakePanel, gridBagConstraints);

        nutritionAssessmentTabbedPane.addTab("Appro. Total Nutrition Intake", appNutriIntakePanel);

        carePlanPanel.setMinimumSize(new java.awt.Dimension(385, 250));
        carePlanPanel.setPreferredSize(new java.awt.Dimension(385, 250));
        carePlanPanel.setLayout(new java.awt.GridBagLayout());

        inApproxNutriIntakePanel1.setLayout(new java.awt.GridBagLayout());

        carePlanPROTLbl.setText("PROT(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanPROTLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel1.add(carePlanPROTTxt, gridBagConstraints);

        carePlanCHOSLbl.setText("CHOS(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanCHOSLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel1.add(carePlanCHOSTxt, gridBagConstraints);

        carePlanKCALSTxt.setEditable(false);
        carePlanKCALSTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "KCALS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(24, 43, 236)));
        carePlanKCALSTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carePlanKCALSTxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanKCALSTxt, gridBagConstraints);

        carePlanOKbtn.setText("Save & Print");
        carePlanOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carePlanOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanOKbtn, gridBagConstraints);

        carePlanRemovebtn.setText("Remove");
        carePlanRemovebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carePlanRemovebtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanRemovebtn, gridBagConstraints);

        carePlanValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        carePlanValueScrollPane.setViewportView(carePlanValueTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanValueScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel1.add(carePlanFATSTxt, gridBagConstraints);

        carePlanFATSLbl.setText("FATS(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanFATSLbl, gridBagConstraints);

        carePlanRODLbl.setText("Route of Administration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanRODLbl, gridBagConstraints);

        carePlanCODLbl.setText("Consistency Of Diet");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanCODLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanCODTxt, gridBagConstraints);

        carePlanPrescribedDietLbl.setText("Prescribed Diet");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanPrescribedDietLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanPrescribedDietTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanOthersTxt, gridBagConstraints);

        carePlanOthersLbl.setText("Others");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanOthersLbl, gridBagConstraints);

        carePlanRMFPTxa.setColumns(20);
        carePlanRMFPTxa.setRows(5);
        carePlanRMFPTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Remarks and Future Plan", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 16, 231)));
        carePlanValueRMFPScrollPane4.setViewportView(carePlanRMFPTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        inApproxNutriIntakePanel1.add(carePlanValueRMFPScrollPane4, gridBagConstraints);

        carePlanRODCbx.setEditable(true);
        carePlanRODCbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Oral Administration", "Nasogastric Feeding", "Total Parenteral Nutrition (TPN)", "Peripheral Parenteral Nutrition (PPN)", "Central Parenteral Nutrition (CPN)" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanRODCbx, gridBagConstraints);

        carePlanClearBtn.setText("Clear");
        carePlanClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carePlanClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanClearBtn, gridBagConstraints);

        carePlanFLUIDSLbl.setText("FLUIDS(mls)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanFLUIDSLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        inApproxNutriIntakePanel1.add(carePlanFLUIDSTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        carePlanPanel.add(inApproxNutriIntakePanel1, gridBagConstraints);

        nutritionAssessmentTabbedPane.addTab("Care Plan", carePlanPanel);

        nutritionSplitPane.setRightComponent(nutritionAssessmentTabbedPane);

        fillingPanel.setLayout(new java.awt.GridBagLayout());
        nutritionSplitPane.setLeftComponent(fillingPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nutritionAssessmentPanel.add(nutritionSplitPane, gridBagConstraints);

        nutriHomeSplitPane.setRightComponent(nutritionAssessmentPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        adultsNutritionAssessPanel.add(nutriHomeSplitPane, gridBagConstraints);

        nutritionHomeTabbedPane.addTab("Adults Assessement", adultsNutritionAssessPanel);

        paedNutritionAssessPanel.setBackground(new java.awt.Color(204, 255, 204));
        paedNutritionAssessPanel.setLayout(new java.awt.GridBagLayout());

        nutriHomeSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        nutriHomeSplitPane1.setEnabled(false);
        nutriHomeSplitPane1.setFocusable(false);
        nutriHomeSplitPane1.setRequestFocusEnabled(false);

        patientDetailsPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientDetailsPanel1.setForeground(new java.awt.Color(0, 0, 204));
        patientDetailsPanel1.setLayout(new java.awt.GridBagLayout());

        searchForPatientPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Here......", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(41, 41, 213)));
        searchForPatientPanel1.setLayout(new java.awt.GridBagLayout());

        paedNameNoLabel.setText("Patient No/Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        searchForPatientPanel1.add(paedNameNoLabel, gridBagConstraints);

        paedNameNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paedNameNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        paedNameNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedNameNoSearchPanel.add(paedNameNoTxt, gridBagConstraints);

        paedNameNoSearchBtn.setToolTipText("Search");
        paedNameNoSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        paedNameNoSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        paedNameNoSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        paedNameNoSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        paedNameNoSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNameNoSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        paedNameNoSearchPanel.add(paedNameNoSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        searchForPatientPanel1.add(paedNameNoSearchPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        searchForPatientPanel1.add(jPanel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        searchForPatientPanel1.add(paedHeaderDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        patientDetailsPanel1.add(searchForPatientPanel1, gridBagConstraints);

        paedPatientDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patients Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(43, 43, 224)));
        paedPatientDetailsPanel.setForeground(new java.awt.Color(0, 0, 204));
        paedPatientDetailsPanel.setLayout(new java.awt.GridBagLayout());

        paedPatientDetailsTxa.setEditable(false);
        paedPatientDetailsTxa.setColumns(4);
        paedPatientDetailsTxa.setForeground(new java.awt.Color(255, 0, 0));
        paedPatientDetailsTxa.setLineWrap(true);
        paedPatientDetailsTxa.setRows(3);
        paedPatientDetailsTxa.setTabSize(5);
        paedPatientDetailsTxa.setText("\n");
        paedPatientDetailsTxa.setWrapStyleWord(true);
        paedPatientDetailsTxa.setAutoscrolls(false);
        paedPatientDetailsTxa.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane20.setViewportView(paedPatientDetailsTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        paedPatientDetailsPanel.add(jScrollPane20, gridBagConstraints);

        reffDieNutrImpPanel1.setLayout(new java.awt.GridBagLayout());

        diseaseSearchPanel1.setLayout(new java.awt.GridBagLayout());

        paedDieseaseSearchLabel.setText("Principle Diagnosis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        diseaseSearchPanel1.add(paedDieseaseSearchLabel, gridBagConstraints);

        dieaseaseSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dieaseaseSearchPanel1.setLayout(new java.awt.GridBagLayout());

        paedDieaseaseSearchTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dieaseaseSearchPanel1.add(paedDieaseaseSearchTxt, gridBagConstraints);

        paedDeseaseSearchBtn.setToolTipText("Search");
        paedDeseaseSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        paedDeseaseSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        paedDeseaseSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        paedDeseaseSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        paedDeseaseSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedDeseaseSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        dieaseaseSearchPanel1.add(paedDeseaseSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 2, 0);
        diseaseSearchPanel1.add(dieaseaseSearchPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel1.add(diseaseSearchPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientDetailsPanel.add(reffDieNutrImpPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        patientDetailsPanel1.add(paedPatientDetailsPanel, gridBagConstraints);

        nutriHomeSplitPane1.setLeftComponent(patientDetailsPanel1);

        nutritionAssessmentPanel1.setLayout(new java.awt.GridBagLayout());

        nutritionSplitPane1.setDividerLocation(1);
        nutritionSplitPane1.setEnabled(false);
        nutritionSplitPane1.setFocusable(false);
        nutritionSplitPane1.setRequestFocusEnabled(false);

        nutritionAssessmentTabbedPane1.setForeground(new java.awt.Color(0, 102, 51));
        nutritionAssessmentTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        nutritionAssessmentTabbedPane1.setMinimumSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane1.setPreferredSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nutritionAssessmentTabbedPane1MouseClicked(evt);
            }
        });
        nutritionAssessmentTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nutritionAssessmentTabbedPane1StateChanged(evt);
            }
        });

        paedFamilyHistoryPanel.setLayout(new java.awt.GridBagLayout());

        familyHistoryPanel.setLayout(new java.awt.GridBagLayout());

        paedFamilyHistFatherOccTxt.setToolTipText("Father's Occupation");
        paedFamilyHistFatherOccTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Occupation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(29, 49, 228)));
        paedFamilyHistFatherOccTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFamilyHistFatherOccTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistFatherOccTxt, gridBagConstraints);

        paedFamilyHistoryPMSCmbx.setEditable(true);
        paedFamilyHistoryPMSCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Married", "Single", "Separated", "Divorced", "Widowed", "Unknown" }));
        paedFamilyHistoryPMSCmbx.setToolTipText("Select The Prent's Marital Status");
        paedFamilyHistoryPMSCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select the Parent's Marital Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(63, 69, 241)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryPMSCmbx, gridBagConstraints);

        paedFamilyHistoryTNOSTxa.setColumns(20);
        paedFamilyHistoryTNOSTxa.setLineWrap(true);
        paedFamilyHistoryTNOSTxa.setRows(5);
        paedFamilyHistoryTNOSTxa.setToolTipText("Total No. of Sibling in family and their ages");
        paedFamilyHistoryTNOSTxa.setWrapStyleWord(true);
        paedFamilyHistoryTNOSTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total No. of Sibling in family and their ages", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(22, 43, 232)));
        paedFamilyHistoryTNOSScrollPane.setViewportView(paedFamilyHistoryTNOSTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryTNOSScrollPane, gridBagConstraints);

        paedFamilyHistFatherLbl.setText("Father's");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistFatherLbl, gridBagConstraints);

        paedFamilyHistFatAgeTxt.setToolTipText("Father's age");
        paedFamilyHistFatAgeTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Age", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(31, 29, 223)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistFatAgeTxt, gridBagConstraints);

        paedFamilyHistMATxt.setToolTipText("Mother's age");
        paedFamilyHistMATxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Age", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(22, 34, 235)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistMATxt, gridBagConstraints);

        paedFamilyHistMotherLbl.setText("Mother's ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistMotherLbl, gridBagConstraints);

        paedFamilyHistMAOccTxt.setToolTipText("Mother's Occupation");
        paedFamilyHistMAOccTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Occupation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(23, 30, 230)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistMAOccTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryCBOTxt, gridBagConstraints);

        paedFamilyHistOPITxa.setColumns(20);
        paedFamilyHistOPITxa.setLineWrap(true);
        paedFamilyHistOPITxa.setRows(5);
        paedFamilyHistOPITxa.setToolTipText("Other Psychological information");
        paedFamilyHistOPITxa.setWrapStyleWord(true);
        paedFamilyHistOPITxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other Psychological information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(20, 17, 233)));
        paedFamilyHistOPIScrollPane.setViewportView(paedFamilyHistOPITxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistOPIScrollPane, gridBagConstraints);

        paedFamilyHistoryCBOLbl.setText("Child Birth Order");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryCBOLbl, gridBagConstraints);

        paedFamilyHistoryOKbtn.setText("OK");
        paedFamilyHistoryOKbtn.setToolTipText("Save the Patient's Details");
        paedFamilyHistoryOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFamilyHistoryOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryOKbtn, gridBagConstraints);

        paedFamilyHistoryRemoveBtn.setText("Remove");
        paedFamilyHistoryRemoveBtn.setToolTipText("Delete and Remove table values ");
        paedFamilyHistoryRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFamilyHistoryRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryRemoveBtn, gridBagConstraints);

        paedFamilyHistoryClearBtn.setText("Clear");
        paedFamilyHistoryClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFamilyHistoryClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryClearBtn, gridBagConstraints);

        paedFamilyHistoryMeasValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        paedFamilyHistoryScrollPane1.setViewportView(paedFamilyHistoryMeasValueTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        familyHistoryPanel.add(paedFamilyHistoryScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedFamilyHistoryPanel.add(familyHistoryPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane1.addTab("Family History", paedFamilyHistoryPanel);

        paedNutriHistPanel.setLayout(new java.awt.GridBagLayout());

        paedNutriHistInPanel.setLayout(new java.awt.GridBagLayout());

        paedNutriHistBRHTxa.setColumns(20);
        paedNutriHistBRHTxa.setLineWrap(true);
        paedNutriHistBRHTxa.setRows(5);
        paedNutriHistBRHTxa.setToolTipText("Breastfeeding History (if relevant)");
        paedNutriHistBRHTxa.setWrapStyleWord(true);
        paedNutriHistBRHTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Breastfeeding History (if relevant)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(49, 35, 212)));
        paedNutriHistBRHScrollPane.setViewportView(paedNutriHistBRHTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedNutriHistInPanel.add(paedNutriHistBRHScrollPane, gridBagConstraints);

        paedNutriHistWAFUTxa.setColumns(20);
        paedNutriHistWAFUTxa.setLineWrap(true);
        paedNutriHistWAFUTxa.setRows(5);
        paedNutriHistWAFUTxa.setToolTipText("Weaning age and food used");
        paedNutriHistWAFUTxa.setWrapStyleWord(true);
        paedNutriHistWAFUTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weaning age and food used", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(33, 64, 238)));
        paedNutriHistWAFUScrollPane.setViewportView(paedNutriHistWAFUTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedNutriHistInPanel.add(paedNutriHistWAFUScrollPane, gridBagConstraints);

        paedNutriHistUCDITxa.setColumns(20);
        paedNutriHistUCDITxa.setLineWrap(true);
        paedNutriHistUCDITxa.setRows(5);
        paedNutriHistUCDITxa.setToolTipText("Usual and Current Dietary intake");
        paedNutriHistUCDITxa.setWrapStyleWord(true);
        paedNutriHistUCDITxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Usual and Current Dietary intake", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(47, 21, 220)));
        paedNutriHistUCDIScrollPane.setViewportView(paedNutriHistUCDITxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedNutriHistInPanel.add(paedNutriHistUCDIScrollPane, gridBagConstraints);

        paedNutriHistValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        paedNutriHistScrollPane.setViewportView(paedNutriHistValueTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedNutriHistInPanel.add(paedNutriHistScrollPane, gridBagConstraints);

        paedBTNPanel.setLayout(new java.awt.GridBagLayout());

        paedNutriHistOKbtn.setText("OK");
        paedNutriHistOKbtn.setToolTipText("Save the Patient's Details");
        paedNutriHistOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNutriHistOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedBTNPanel.add(paedNutriHistOKbtn, gridBagConstraints);

        paedNutriHistClearBtn.setText("Clear");
        paedNutriHistClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNutriHistClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedBTNPanel.add(paedNutriHistClearBtn, gridBagConstraints);

        paedNutriHistRemoveBtn.setText("Remove");
        paedNutriHistRemoveBtn.setToolTipText("Delete and Remove table values ");
        paedNutriHistRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNutriHistRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedBTNPanel.add(paedNutriHistRemoveBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedNutriHistInPanel.add(paedBTNPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedNutriHistPanel.add(paedNutriHistInPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane1.addTab("Nutrition History", paedNutriHistPanel);

        paedAnthroMeasurePanel.setLayout(new java.awt.GridBagLayout());

        paedAnthroMeasureInPanel.setLayout(new java.awt.GridBagLayout());

        paedAnthAssessBTKgLbl.setText("Birth Wt. (Kg) ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessBTKgLbl, gridBagConstraints);

        paedAnthAssessBTKgTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedAnthAssessBTKgTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessBTKgTxt, gridBagConstraints);

        paedAnthAssessAWTKgLbl.setText("Adm. Wt (Kg)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessAWTKgLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessAWTKgTxt, gridBagConstraints);

        paedAnthAssessHeightCmLbl.setText("Height (Cm)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessHeightCmLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessRefWtAgeTxt, gridBagConstraints);

        paedAnthAssessRefWtAgeLbl.setText("Ref. Wt. for Age (Kg)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessRefWtAgeLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessHeightCmTxt, gridBagConstraints);

        paedAnthAssessWtforAgeLbl.setText("Wt. for Age %");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessWtforAgeLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessWtforAgeTxt, gridBagConstraints);

        paedAnthAssessOthClBioTxa.setColumns(20);
        paedAnthAssessOthClBioTxa.setLineWrap(true);
        paedAnthAssessOthClBioTxa.setRows(5);
        paedAnthAssessOthClBioTxa.setToolTipText("Other Clinical and Biochemical Assessement");
        paedAnthAssessOthClBioTxa.setWrapStyleWord(true);
        paedAnthAssessOthClBioTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other clinical and Biochemical Assessment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(53, 37, 233)));
        paedAnthAssessOthClBioScrollPane.setViewportView(paedAnthAssessOthClBioTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessOthClBioScrollPane, gridBagConstraints);

        paedAnthAssessOCTxa.setColumns(20);
        paedAnthAssessOCTxa.setLineWrap(true);
        paedAnthAssessOCTxa.setRows(5);
        paedAnthAssessOCTxa.setToolTipText("Opinion/Conclusion (Mention briefly the Nutritional Status markers which have led you to this opinion.)");
        paedAnthAssessOCTxa.setWrapStyleWord(true);
        paedAnthAssessOCTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opinion/Conclusion (Mention briefly the Nutritional Status markers which have led you to this opinion.)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(35, 30, 220)));
        paedAnthAssessOCScrollPane.setViewportView(paedAnthAssessOCTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessOCScrollPane, gridBagConstraints);

        paedAnthAssessValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        paedAnthAssessScrollPane.setViewportView(paedAnthAssessValueTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAnthAssessScrollPane, gridBagConstraints);

        paedAmBTNPanel.setLayout(new java.awt.GridBagLayout());

        paedAnthAssessOKbtn.setText("OK");
        paedAnthAssessOKbtn.setToolTipText("Save the Patient's Details");
        paedAnthAssessOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedAnthAssessOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAmBTNPanel.add(paedAnthAssessOKbtn, gridBagConstraints);

        paedAnthAssessClearBtn.setText("Clear");
        paedAnthAssessClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedAnthAssessClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAmBTNPanel.add(paedAnthAssessClearBtn, gridBagConstraints);

        paedAnthAssessRemoveBtn.setText("Remove");
        paedAnthAssessRemoveBtn.setToolTipText("Delete and Remove table values ");
        paedAnthAssessRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedAnthAssessRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAmBTNPanel.add(paedAnthAssessRemoveBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAnthroMeasureInPanel.add(paedAmBTNPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedAnthroMeasurePanel.add(paedAnthroMeasureInPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane1.addTab("Anthropometric Assessement", paedAnthroMeasurePanel);

        paedCarePlanPanel.setMinimumSize(new java.awt.Dimension(385, 250));
        paedCarePlanPanel.setPreferredSize(new java.awt.Dimension(385, 250));
        paedCarePlanPanel.setLayout(new java.awt.GridBagLayout());

        paedCarePlanInPanel.setLayout(new java.awt.GridBagLayout());

        paedNutriCarePlanTxa.setColumns(20);
        paedNutriCarePlanTxa.setLineWrap(true);
        paedNutriCarePlanTxa.setRows(5);
        paedNutriCarePlanTxa.setToolTipText("Nutrition Care Plan");
        paedNutriCarePlanTxa.setWrapStyleWord(true);
        paedNutriCarePlanTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nutrition Care Plan", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(36, 29, 226)));
        jScrollPane1.setViewportView(paedNutriCarePlanTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedCarePlanInPanel.add(jScrollPane1, gridBagConstraints);

        paedAmBTNPanel1.setLayout(new java.awt.GridBagLayout());

        paedNutriCarePlanOKbtn.setText("Save & Print");
        paedNutriCarePlanOKbtn.setToolTipText("Save the Patient's Details");
        paedNutriCarePlanOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNutriCarePlanOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAmBTNPanel1.add(paedNutriCarePlanOKbtn, gridBagConstraints);

        paedNutriCarePlanClearBtn.setText("Clear");
        paedNutriCarePlanClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNutriCarePlanClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedAmBTNPanel1.add(paedNutriCarePlanClearBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedCarePlanInPanel.add(paedAmBTNPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedCarePlanPanel.add(paedCarePlanInPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane1.addTab("Care Plan", paedCarePlanPanel);

        nutritionSplitPane1.setRightComponent(nutritionAssessmentTabbedPane1);

        fillingPanel1.setLayout(new java.awt.GridBagLayout());
        nutritionSplitPane1.setLeftComponent(fillingPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nutritionAssessmentPanel1.add(nutritionSplitPane1, gridBagConstraints);

        nutriHomeSplitPane1.setRightComponent(nutritionAssessmentPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedNutritionAssessPanel.add(nutriHomeSplitPane1, gridBagConstraints);

        nutritionHomeTabbedPane.addTab("Paediatrics Assessement", paedNutritionAssessPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(nutritionHomeTabbedPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   

    

    private String getAge(int yr, int month, int day) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy MM dd");
        int dateParts[] = {Calendar.YEAR, Calendar.MONTH, Calendar.DAY_OF_MONTH};
        Calendar today = Calendar.getInstance();
        Calendar birthday = Calendar.getInstance();
        birthday.set(yr, month, day); //months are 0-based  
        if (today.before(birthday)) {
            System.out.println("birthday invalid - date after today, exiting");
            System.exit(0);
        }
        int diff[] = new int[3];
        for (int i = 2; i >= 0; i--) {
            while (!sdf.format(birthday.getTime()).split(" ")[i].equals(sdf.format(today.getTime()).split(" ")[i])) {
                birthday.add(dateParts[i], 1);
                diff[i]++;
            }
        }
        String difference = "" + (diff[0] + " yrs : " + diff[1]) + " mths : " + diff[2] + " days";
        years = diff[0];
        months = diff[1];
        days = diff[2];
        System.out.println(years + " " + months + " " + days);
        return difference;
    }

    private void nameNoSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameNoSearchBtnActionPerformed
        patientSearchButtonClicked();
    }//GEN-LAST:event_nameNoSearchBtnActionPerformed
               

    private void patientSearchButtonClicked() {

        System.out.println("Showing dialog");
        
        java.awt.Point point = this.nameNoTxt.getLocationOnScreen();

        patientSearch.setSize(400, 200);

        patientSearch.setLocation(point);

        patientSearch.setVisible(true);

    }
    
    private void patientPaedSearchButtonClicked() {

        System.out.println("Showing dialog");
        
        java.awt.Point point = this.paedNameNoTxt.getLocationOnScreen();

        paedPatientSearch.setSize(400, 200);

        paedPatientSearch.setLocation(point);

        paedPatientSearch.setVisible(true);

    }
    
    private void patientDiagnosisSearchButtonClicked() {

        System.out.println("Showing Diagnosis Search Dialog");
        
        java.awt.Point point = this.dieaseaseSearchTxt.getLocationOnScreen();

        patientDiagnosisSearch.setSize(400, 200);

        patientDiagnosisSearch.setLocation(point);

        patientDiagnosisSearch.setVisible(true);

    }
    
    private void paedPatientDiagnosisSearchButtonClicked() {

        System.out.println("Showing Diagnosis Search Dialog");
        
        java.awt.Point point = this.paedDieaseaseSearchTxt.getLocationOnScreen();

        paedPatientDiagnosisSearch.setSize(400, 200);

        paedPatientDiagnosisSearch.setLocation(point);

        paedPatientDiagnosisSearch.setVisible(true);

    }
    private void searchPatientNumbTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchPatientNumbTxtCaretUpdate
        if (searchPatientNumbTxt.getCaretPosition() < 3) {
            System.out.println("Nothing...");
        } else {
            patientDetailsTxa.setText("");

            patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT patient_no, patient_name FROM hp_admission "
                    + "WHERE patient_no ILIKE '%"+searchPatientNumbTxt.getText()+"%' "
                    + "OR patient_name ILIKE '%"+searchPatientNumbTxt.getText()+"%'"
                    + "AND discharge = false ORDER BY patient_no"));

            patientSearchTable.setShowHorizontalLines(false);
            patientSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            patientSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            patientSearchScrollPane.setViewportView(patientSearchTable);
        }
        
    }//GEN-LAST:event_searchPatientNumbTxtCaretUpdate
    private String populateBioData(String patient_num) {
        String text = null;
        try {
            connectDB.setAutoCommit(false);
            
            //About to Get the Patient Details
            
            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.ResultSet rse12 = stm12.executeQuery(
                    "SELECT patient_no, patient_name, gender, reffered_from,"
                    + " date_admitted, ward, diagnosis1, diagnosis2, diagnosis3 FROM hp_admission "
                    + "WHERE patient_no='" + patient_num + "' "
                    + "AND discharge = false ");
            
            while (rse12.next()) {
                
                ///Getting the user's Details;

                text = rse12.getObject(2).toString() + 
                        "    Ward: ".concat(rse12.getObject(6).toString()) + 
                        "\nPatient No: ".concat(patient_num + 
                        "     Gender: ".concat(rse12.getObject(3).toString() +
                        "\nDate of Admission: ".concat(rse12.getObject(5).toString())));
                
                gender = rse12.getObject(3).toString();
                patient_name = rse12.getObject(2).toString();
                ward = rse12.getObject(6).toString();

                String title = ward + "                                 (" + rse12.getObject(2).toString().concat("  ---  ").
                        concat(patient_num).concat(")");
                
                
                
                if (rse12.getObject(7).toString().equals("") && rse12.getObject(8).toString().equals("") 
                        && rse12.getObject(9).toString().equals("") ) {
                    System.out.println("Diagnosis - Empty");
                
                } else if (!rse12.getObject(7).toString().equals("")) {
                    dieaseaseSearchTxt.setText(rse12.getObject(7).toString());
                    System.out.println("Diagnosis - "+rse12.getObject(7).toString());
                    
                    if (patientPaedSearchTable.isShowing()) {
                        paedDieaseaseSearchTxt.setText(rse12.getObject(7).toString());
                    } 
                } else if (!rse12.getObject(8).toString().equals("")) {
                    dieaseaseSearchTxt.setText(rse12.getObject(8).toString());
                    System.out.println("Diagnosis - "+rse12.getObject(8).toString());
                    
                    if (patientPaedSearchTable.isShowing()) {
                        paedDieaseaseSearchTxt.setText(rse12.getObject(8).toString());
                    } 
                } else if (!rse12.getObject(9).toString().equals("")) {
                    dieaseaseSearchTxt.setText(rse12.getObject(9).toString());
                    System.out.println("Diagnosis - "+rse12.getObject(9).toString());
                    
                    if (patientPaedSearchTable.isShowing()) {
                        paedDieaseaseSearchTxt.setText(rse12.getObject(9).toString());
                    } 
                } 
                
                if (!rse12.getObject(4).toString().equals("")) {
                    System.out.println("Referred From - "+rse12.getObject(4).toString());
                    refferedFromCmbx.setSelectedItem(rse12.getObject(4).toString());
                } else if (rse12.getObject(4).toString().equals("")) {
                    refferedFromCmbx.setSelectedItem("Not Refered/Unknown Status");
                    System.out.println("Referred From - Empty");
                }
                
                this.setTitle(title);
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }
        
        return text;
    }
    private void patientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseClicked

        nameNoTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString());
        String title = "                           (" + patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0)
                .toString().concat("    ").
                concat(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 1).toString()).concat(")");
        this.setTitle(title);

        patientDetailsTxa.setForeground(Color.BLUE);
        patientDetailsTxa.setText(populateBioData(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString()));
        
        anthroMeasValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, height, weight, bmi, ibw, biochemistry, remarks FROM nutrition.nutr_patient_antro_measures "
                                + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
        
        feedingPatternValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breakfast, lunch, supper, snacks, restrictions, allergies, comments_remarks "
                                + "FROM nutrition.nutr_patient_feeding_pattern "
                                + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
        
        approxNutriValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, prot, chos, fats, kcals, others, type_of_diet, current_problems_affecting_food_intake "
                                + "FROM nutrition.nutr_patient_appro_nutrition_intake "
                                + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
        
        carePlanValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, prescribed_diet, prot, chos, fats, fluids, kcals, others, consistency_of_diet, "
                                + "route_of_administration, remarks_and_future_plans "
                                + "FROM nutrition.nutr_patient_care_plan "
                                + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
        
        patientSearch.dispose();
    }//GEN-LAST:event_patientSearchTableMouseClicked

    private void patientSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSearchBtnActionPerformed
        this.patientSearch.dispose();
    }//GEN-LAST:event_patientSearchBtnActionPerformed
     
    
    
    

        

        
    private void searchPatientNumbTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatientNumbTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchPatientNumbTxtActionPerformed
    
    private void nutritionAssessmentTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPaneStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionAssessmentTabbedPaneStateChanged

    private void nutritionAssessmentTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPaneMouseClicked
        
    }//GEN-LAST:event_nutritionAssessmentTabbedPaneMouseClicked

    private void deseaseSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deseaseSearchBtnActionPerformed
        System.out.println("About to Search the Patient's Diagnosis");
        if (nameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient First!!!", "Missing Patient Number", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Searching the Patient's Diagnosis");
            patientDiagnosisSearchButtonClicked();            
        }
    }//GEN-LAST:event_deseaseSearchBtnActionPerformed

    private void paedNameNoSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNameNoSearchBtnActionPerformed
        patientPaedSearchButtonClicked();
    }//GEN-LAST:event_paedNameNoSearchBtnActionPerformed

    private void paedDeseaseSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedDeseaseSearchBtnActionPerformed
        System.out.println("About to Search the Paed Patient's Diagnosis");
        if (paedNameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient First!!!", "Missing Patient Number", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Searching the Patient's Diagnosis");
            paedPatientDiagnosisSearchButtonClicked();            
        }
    }//GEN-LAST:event_paedDeseaseSearchBtnActionPerformed

    private void nutritionAssessmentTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionAssessmentTabbedPane1MouseClicked

    private void nutritionAssessmentTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPane1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionAssessmentTabbedPane1StateChanged

    private void patientDiagnosisSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchTxtCaretUpdate
        if (patientDiagnosisSearchTxt.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {        
            patientDiagnosisSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT code, disease_name FROM hp_diseases  "
                    + "WHERE code ILIKE '%"+patientDiagnosisSearchTxt.getText()+"%' "
                    + "OR disease_name ILIKE '%"+patientDiagnosisSearchTxt.getText()+"%'"
                    + " ORDER BY disease_name"));

            patientDiagnosisSearchTable.setShowHorizontalLines(false);
            patientDiagnosisSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            patientDiagnosisSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            patientDiagnosisSearchScrollPane.setViewportView(patientDiagnosisSearchTable);
        }
    }//GEN-LAST:event_patientDiagnosisSearchTxtCaretUpdate

    private void patientDiagnosisSearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientDiagnosisSearchTxtActionPerformed

    private void patientDiagnosisSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchTableMouseClicked
        dieaseaseSearchTxt.setText(patientDiagnosisSearchTable.getValueAt(patientDiagnosisSearchTable.getSelectedRow(), 1).toString());
        
        dieaseaseSearchTxt.setForeground(Color.BLUE);
        patientDiagnosisSearch.dispose();
    }//GEN-LAST:event_patientDiagnosisSearchTableMouseClicked

    private void patientDiagnosisSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchBtnActionPerformed
        this.patientDiagnosisSearch.dispose();
    }//GEN-LAST:event_patientDiagnosisSearchBtnActionPerformed

    private void anthroBMItxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anthroBMItxtMouseClicked
        nameNoLabel.setForeground(Color.BLACK);
        anthHeightLbl.setForeground(Color.BLACK);
        anthrWeightLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", "Empty Patient Number", JOptionPane.INFORMATION_MESSAGE);
            nameNoLabel.setForeground(Color.red);        
        } else {
            if (anthHeightTxt.getText().equals("") || anthrWeightTxt.getText().equals("")) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that both Height and Weight are filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                anthHeightLbl.setForeground(Color.red); 
                anthrWeightLbl.setForeground(Color.red); 
            } else {
                if (anthHeightTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$") && anthrWeightTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                    
                    if (anthHeightTxt.getText().matches("^[0-5](\\.[0-9]{1,4})?$")) {
                        double h = 0.00, w = 0.00, r = 0.00;
                        h = Double.valueOf(anthHeightTxt.getText().toString());
                        w = Double.valueOf(anthrWeightTxt.getText().toString());

                        r = w / Math.pow((h), 2);

                        anthroBMItxt.setText(Double.toString(Math.round(r)));
                        
                        System.out.println("Height - "+h);
                        System.out.println("Weight - "+w);
                        System.out.println("Results - "+r);
                        
                        if (r <= 15.0) {
                            System.out.println("Very severely underweight");
                            anthrRemarksTxa.setText("The Patient is Very severely underweight.");
                            anthrRemarksTxa.setForeground(Color.red);
                            
                        } else if(r >= 15.0 && r <= 16.0) {
                            System.out.println("Severely underweight");
                            anthrRemarksTxa.setText("The Patient is Severely underweight.");
                            anthrRemarksTxa.setForeground(Color.red);
                        } else if(r >= 16.0 && r <= 18.5) {
                            System.out.println("Underweight");
                            anthrRemarksTxa.setText("The Patient is Underweight.");
                            anthrRemarksTxa.setForeground(Color.red);
                        } else if(r >= 18.5 && r <= 25) {
                            System.out.println("Normal (healthy weight)");
                            anthrRemarksTxa.setText("The Patient is Normal (healthy weight).");
                            anthrRemarksTxa.setForeground(Color.BLUE);
                        } else if(r >= 25.0 && r <= 30) {
                            System.out.println("Overweight");
                            anthrRemarksTxa.setText("The Patient is Overweight.");
                            anthrRemarksTxa.setForeground(Color.red);
                        } else if(r >= 30.0 && r <= 35.0) {
                            System.out.println("Obese Class I (Moderately obese)");
                            anthrRemarksTxa.setText("The Patient is Obese Class I (Moderately obese).");
                            anthrRemarksTxa.setForeground(Color.red);
                        } else if(r >= 35.0 && r <= 40.0) {
                            System.out.println("Obese Class II (Severely obese)");
                            anthrRemarksTxa.setText("The Patient is Obese Class II (Severely obese).");
                            anthrRemarksTxa.setForeground(Color.red);
                        } else if(r >= 40.0 ) {
                            System.out.println("Obese Class III (Very severely obese)");
                            anthrRemarksTxa.setText("The Patient is Obese Class III (Very severely obese).");
                            anthrRemarksTxa.setForeground(Color.red);
                        }
                        
                    } else {
                        java.awt.Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Height is entered in Meters.", 
                        "Error at Height", JOptionPane.INFORMATION_MESSAGE);
                        anthHeightLbl.setForeground(Color.red); 
                    }
                } else {
                    java.awt.Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Values have been entered. \n "
                            + "Recheck both the entries.", "Unrecognized Values Noted", JOptionPane.ERROR_MESSAGE);
                    anthHeightLbl.setForeground(Color.red);
                    anthrWeightLbl.setForeground(Color.red);
                }
            }           
        }
    }//GEN-LAST:event_anthroBMItxtMouseClicked

    private void anthIBWtxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anthIBWtxtMouseClicked
        nameNoLabel.setForeground(Color.BLACK);
        anthHeightLbl.setForeground(Color.BLACK);
        anthrWeightLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", "Empty Patient Number", JOptionPane.INFORMATION_MESSAGE);
            nameNoLabel.setForeground(Color.red);  
            java.awt.Toolkit.getDefaultToolkit().beep();
        } else {
            if (anthHeightTxt.getText().equals("")  || anthrWeightTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Value of Height is entered.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                anthHeightLbl.setForeground(Color.red); 
                anthrWeightLbl.setForeground(Color.red); 
                java.awt.Toolkit.getDefaultToolkit().beep();
            } else {
                try {
                    connectDB.setAutoCommit(false);

                    //About to Get the Patient Details
                    java.sql.Statement stm = connectDB.createStatement();
                    java.sql.ResultSet rse = stm.executeQuery(
                            "SELECT gender FROM hp_admission "
                            + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' "
                            + "AND discharge = false ");

                    while (rse.next()) {

                        //Getting the user's Gender
                        gender = rse.getObject(1).toString().trim().toLowerCase(); 
                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                } catch (final Exception es) {
                    System.out.println(es);

                }
                
                if (anthHeightTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")  && anthrWeightTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                    
                    if (anthHeightTxt.getText().matches("^[0-5](\\.[0-9]{1,4})?$")) {
                        double h = 0.00, w = 0.00, r = 0.00;
                        String concat = anthrRemarksTxa.getText().toString();
                        h = Double.valueOf(anthHeightTxt.getText().toString());
                        w = Double.valueOf(anthrWeightTxt.getText().toString());                     
                        
                                                
                        System.out.println("Height - "+h);
                        System.out.println("Weight - "+w);
                        
                        if (h<=1.52) {
                            if (gender.equals("male")) {
                                anthIBWtxt.setText("50.0");
                                concat = anthrRemarksTxa.getText().toString().concat(" And his Ideal Body Weight should at least be 50.0 Kgs");
                            } else if (gender.equals("female")) {
                                anthIBWtxt.setText("45.5");
                                concat = anthrRemarksTxa.getText().toString().concat(" And her Ideal Body Weight should at least be 45.5 Kgs");
                            }  
                            anthrRemarksTxa.setText(concat);
                        } else {
                            if (gender.equals("male")) {
                                r = Math.round(50.0 + (0.9*((h*100)-152)));
                                System.out.println("IBW - "+r);
                                concat = anthrRemarksTxa.getText().toString().concat(" Considering his Ideal Body Weight is "+r+" Kgs.");
                                anthIBWtxt.setText(Double.toString(r));
                            } else if (gender.equals("female")) {
                                r = Math.round(45.5 + (0.9*((h*100)-152)));
                                
                                System.out.println("IBW - "+r);
                                concat = anthrRemarksTxa.getText().toString().concat(" Considering her Ideal Body Weight is "+r+" Kgs.");
                                anthIBWtxt.setText(Double.toString(r));                                
                            } 
                            anthrRemarksTxa.setText(concat);
                            
                        }
                        
                    } else {
                        java.awt.Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Height is entered in Meters.", 
                        "Error at Height", JOptionPane.INFORMATION_MESSAGE);
                        anthHeightLbl.setForeground(Color.red); 
                    }
                } else {
                    java.awt.Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Values have been entered. \n "
                            + "Recheck both the entries.", "Unrecognized Values Noted", JOptionPane.ERROR_MESSAGE);
                    anthHeightLbl.setForeground(Color.red);
                    anthrWeightLbl.setForeground(Color.red);
                    
                }
            }           
        }
    }//GEN-LAST:event_anthIBWtxtMouseClicked

    private void anthOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anthOKbtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        refferedFromLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        nutritionImplicationLabel.setForeground(Color.BLACK);
        anthHeightLbl.setForeground(Color.BLACK);
        anthrWeightLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || nutritionImplicationTxt.getText().equals("") || anthHeightTxt.getText().equals("") || anthrWeightTxt.getText().equals("")
                 || anthroBMItxt.getText().equals("") || anthIBWtxt.getText().equals("") || anthrRemarksTxa.getText().equals("")
                 || bioChemistryTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Ensure all the Fields are filled", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
            }  else if (nutritionImplicationTxt.getText().equals("")) {
                nutritionImplicationLabel.setForeground(Color.red);
            }  else if (anthHeightTxt.getText().equals("")) {
                anthHeightLbl.setForeground(Color.red);
            }  else if (anthrWeightTxt.getText().equals("")) {
                anthrWeightLbl.setForeground(Color.red);
            }  else if (anthroBMItxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Enter the Height and the Weight and finally Click on BMI. "
                        + "\nTo fill the BMI Field", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (anthIBWtxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Enter the Height and the Weight and finally Click on IBW (kg). "
                        + "\nTo fill the IBW Field", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (bioChemistryTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Patient's BIO-Chemistry Field. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (anthrRemarksTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Enter the Patient's Nutrition Remarks. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possibly missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_patient_antro_measures "
                            + "(patient_no, referred_from, diagnosis, nutrition_implication, "
                            + "height, weight, bmi, ibw, remarks, biochemistry, date) "
                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, nameNoTxt.getText().toString().trim());
                        pstmt.setString(2, refferedFromCmbx.getSelectedItem().toString().trim());
                        pstmt.setString(3, dieaseaseSearchTxt.getText().toString().trim());
                        pstmt.setString(4, nutritionImplicationTxt.getText().toString().trim());
                        pstmt.setString(5, anthHeightTxt.getText().toString().trim());
                        pstmt.setString(6, anthrWeightTxt.getText().toString().trim());
                        pstmt.setString(7, anthroBMItxt.getText().toString().trim());
                        pstmt.setString(8, anthIBWtxt.getText().toString().trim());

                        pstmt.setString(9, anthrRemarksTxa.getText().toString().trim());
                        pstmt.setObject(10, bioChemistryTxa.getText().toString().trim());
                        pstmt.setObject(11, headerDatePicker.getDate().toLocaleString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        anthroMeasValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, height, bmi, weight, ibw, biochemistry, remarks FROM nutrition.nutr_patient_antro_measures "
                            + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_anthOKbtnActionPerformed

    private void anthrRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anthrRemoveBtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        if (nameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            nameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = anthroMeasValueTable.getSelectedRowCount();

            int[] selectedRows = anthroMeasValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < anthroMeasValueTable.getRowCount(); k++) {
                        for (int r = 0; r < anthroMeasValueTable.getColumnCount(); r++) {
                            anthroMeasValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            anthroMeasValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_patient_antro_measures"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND weight = '"+anthroMeasValueTable.getValueAt(anthroMeasValueTable.getSelectedRow(), 2).toString()+"'"
                                + " AND biochemistry = '"+anthroMeasValueTable.getValueAt(anthroMeasValueTable.getSelectedRow(), 5).toString()+"'"
                                + " AND remarks = '"+anthroMeasValueTable.getValueAt(anthroMeasValueTable.getSelectedRow(), 6).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            defTableModel.removeRow(anthroMeasValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        anthroMeasValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, height, weight, bmi, ibw, biochemistry, remarks FROM nutrition.nutr_patient_antro_measures "
                            + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_anthrRemoveBtnActionPerformed

    private void anthClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anthClearBtnActionPerformed
        ClearAnthroFields();
    }//GEN-LAST:event_anthClearBtnActionPerformed

    private void feedingPatternOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedingPatternOKbtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        refferedFromLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        nutritionImplicationLabel.setForeground(Color.BLACK);
        dietHistBreakFastLbl.setForeground(Color.BLACK);
        dietHistLunchLbl.setForeground(Color.BLACK); 
        dietHistSupperLbl.setForeground(Color.BLACK); 
        dietHistSnacksLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || nutritionImplicationTxt.getText().equals("") || dietHistRestrictionTxa.getText().equals("") 
                 || dietHistAllegiesTxa.getText().equals("") || dietHistBreakFastTxt.getText().equals("") 
                 || dietHistLunchTxt.getText().equals("") || dietHistSupperTxt.getText().equals("")
                 || dietHistSnacksTxt.getText().equals("") || feedHistoryCommRemTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Ensure all the Fields are filled.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
            }  else if (nutritionImplicationTxt.getText().equals("")) {
                nutritionImplicationLabel.setForeground(Color.red);
            }  else if (dietHistRestrictionTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the restrition field.  - 'Restriction/s.'", 
                    "\nMissing Entries Noted - Restriction.", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dietHistAllegiesTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the Allergies Field. - 'Allergies.'", 
                    "\nMissing Entries Noted - Allergies.", JOptionPane.INFORMATION_MESSAGE);
            } else if (dietHistBreakFastTxt.getText().equals("")) {
                dietHistBreakFastLbl.setForeground(Color.red);
            }  else if (dietHistLunchTxt.getText().equals("")) {
                dietHistLunchLbl.setForeground(Color.red);
            }  else if (dietHistSupperTxt.getText().equals("")) {
                dietHistSupperLbl.setForeground(Color.red);
            }  else if (dietHistSnacksTxt.getText().equals("")) {
                dietHistSnacksLbl.setForeground(Color.red);
            }  else if (feedHistoryCommRemTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Please enter some comments in the (Comments/Remarks) field. ", 
                    "Missing Entries Noted - Comments/Remarks", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_patient_feeding_pattern "
                            + "(patient_no, date, breakfast, lunch, supper, "
                            + "snacks, allergies, restrictions, comments_remarks) "
                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, nameNoTxt.getText().toString().trim());
                        pstmt.setString(2, headerDatePicker.getDate().toLocaleString().trim());
                        pstmt.setString(3, dietHistBreakFastTxt.getText().toString().trim());
                        pstmt.setString(4, dietHistLunchTxt.getText().toString().trim());
                        pstmt.setString(5, dietHistSupperTxt.getText().toString().trim());
                        pstmt.setString(6, dietHistSnacksTxt.getText().toString().trim());
                        pstmt.setString(7, dietHistAllegiesTxa.getText().toString().trim());
                        pstmt.setString(8, dietHistRestrictionTxa.getText().toString().trim());
                        pstmt.setString(9, feedHistoryCommRemTxa.getText().toString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        feedingPatternValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breakfast, lunch, supper, snacks, restrictions, allergies, comments_remarks "
                                + "FROM nutrition.nutr_patient_feeding_pattern "
                            + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_feedingPatternOKbtnActionPerformed

    private void feedingClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedingClearBtnActionPerformed
        ClearFeedingPatternsFields();
    }//GEN-LAST:event_feedingClearBtnActionPerformed

    private void feedingPatternRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedingPatternRemoveBtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        if (nameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            nameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = feedingPatternValueTable.getSelectedRowCount();

            int[] selectedRows = feedingPatternValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < feedingPatternValueTable.getRowCount(); k++) {
                        for (int r = 0; r < feedingPatternValueTable.getColumnCount(); r++) {
                            feedingPatternValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            feedingPatternValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_patient_feeding_pattern"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND breakfast = '"+feedingPatternValueTable.getValueAt(feedingPatternValueTable.getSelectedRow(), 1).toString()+"'"
                                + " AND snacks = '"+feedingPatternValueTable.getValueAt(feedingPatternValueTable.getSelectedRow(), 4).toString()+"'"
                                + " AND comments_remarks = '"+feedingPatternValueTable.getValueAt(feedingPatternValueTable.getSelectedRow(), 7).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and "
                                    + "removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            
                            defTableModel.removeRow(feedingPatternValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        feedingPatternValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breakfast, lunch, supper, snacks, restrictions, allergies, comments_remarks FROM "
                                + "nutrition.nutr_patient_feeding_pattern "
                            + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_feedingPatternRemoveBtnActionPerformed

    private void approxClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approxClearBtnActionPerformed
        ClearApproxNutriFields();
    }//GEN-LAST:event_approxClearBtnActionPerformed

    private void approxOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approxOKbtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        refferedFromLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        nutritionImplicationLabel.setForeground(Color.BLACK);
        approxPROTLbl.setForeground(Color.BLACK);
        approxCHOSLbl.setForeground(Color.BLACK); 
        approxFATSLbl.setForeground(Color.BLACK); 
        approxNutOthersLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || nutritionImplicationTxt.getText().equals("") || approxKCALtxt.getText().equals("") 
                 || approxNutOthersTxt.getText().equals("") || typeOfDietTxa.getText().equals("")
                 || currProbAffFoodTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient's Principle Diagnosis.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (nutritionImplicationTxt.getText().equals("")) {
                nutritionImplicationLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Patient's Nutrition Implication field.",  
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (approxKCALtxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "The KCALS field has to be filled. Please click on it.", 
                    "\nMissing Entries Noted - KCALS.", JOptionPane.INFORMATION_MESSAGE);
            }  else if (approxNutOthersTxt.getText().equals("")) {
                approxNutOthersLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the 'Others' Field.", 
                    "\nMissing Entries Noted - Others.", JOptionPane.INFORMATION_MESSAGE);
            } else if (typeOfDietTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the Specified Type of Diet.", 
                    "\nMissing Entries Noted - Type of Diet.", JOptionPane.INFORMATION_MESSAGE);
            }  else if (currProbAffFoodTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Please enter if any (Current Problems affecting Food intake). ", 
                    "Missing Entries Noted - Current Problems affecting Food intake.", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_patient_appro_nutrition_intake "
                            + "(patient_no, date, prot, chos, fats, kcals, others, "
                            + "type_of_diet, current_problems_affecting_food_intake) "
                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, nameNoTxt.getText().toString().trim());
                        pstmt.setString(2, headerDatePicker.getDate().toLocaleString().trim());
                        pstmt.setString(3, approxPROTxt.getText().toString().trim());
                        pstmt.setString(4, approxCHOStxt.getText().toString().trim());
                        pstmt.setString(5, approxFATStxt.getText().toString().trim());
                        pstmt.setString(6, approxKCALtxt.getText().toString().trim());
                        pstmt.setString(7, approxNutOthersTxt.getText().toString().trim());
                        pstmt.setString(8, typeOfDietTxa.getText().toString().trim());
                        pstmt.setString(9, currProbAffFoodTxa.getText().toString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        approxNutriValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, prot, chos, fats, kcals, others, type_of_diet, current_problems_affecting_food_intake "
                                + "FROM nutrition.nutr_patient_appro_nutrition_intake "
                            + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_approxOKbtnActionPerformed

    private void approxKCALtxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_approxKCALtxtMouseClicked
        nameNoLabel.setForeground(Color.BLACK);
        approxPROTLbl.setForeground(Color.BLACK);
        approxCHOSLbl.setForeground(Color.BLACK); 
        approxFATStxt.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", "Empty Patient Number", JOptionPane.INFORMATION_MESSAGE);
            nameNoLabel.setForeground(Color.red);        
        } else {
            if (approxPROTxt.getText().equals("") || approxCHOStxt.getText().equals("") || approxFATStxt.getText().equals("")) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                
                if (approxPROTxt.getText().equals("")) {
                    approxPROTLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that PROT is filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                } else if (approxCHOStxt.getText().equals("")) {
                    approxCHOSLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that CHOS is filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                } else if (approxFATStxt.getText().equals("")) {
                    approxFATSLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that FATS is filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                }
                
            } else {
                if (approxPROTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$") && approxCHOStxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                        && approxFATStxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                    
                    double p = 0.00, c = 0.00, f= 0.00, r = 0.00;
                    p = Double.valueOf(approxPROTxt.getText().toString());
                    c = Double.valueOf(approxCHOStxt.getText().toString());
                    f = Double.valueOf(approxFATStxt.getText().toString());

                    r = ((p*4)+(c*4)+(f*9));

                    approxKCALtxt.setText(Double.toString(Math.round(r)));

                    System.out.println("PROT - "+p);
                    System.out.println("CHOS - "+c);
                    System.out.println("FATS - "+f);
                    System.out.println("Results - "+r);
                } else {
                    java.awt.Toolkit.getDefaultToolkit().beep();
                                        
                    if (!approxPROTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        approxPROTLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at PROT(gms) - "+approxPROTxt.getText()+"! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else if (!approxCHOStxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        approxCHOSLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at CHOS(gms) - "+approxCHOStxt.getText()+"! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else if (!approxFATStxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        approxFATSLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at FATS(gms) - "+approxFATStxt.getText()+"! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }           
        }
    }//GEN-LAST:event_approxKCALtxtMouseClicked

    private void approxRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approxRemoveBtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        if (nameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            nameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = approxNutriValueTable.getSelectedRowCount();

            int[] selectedRows = approxNutriValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < approxNutriValueTable.getRowCount(); k++) {
                        for (int r = 0; r < approxNutriValueTable.getColumnCount(); r++) {
                            approxNutriValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            approxNutriValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_patient_appro_nutrition_intake"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND prot = '"+approxNutriValueTable.getValueAt(approxNutriValueTable.getSelectedRow(), 1).toString()+"'"
                                + " AND chos = '"+approxNutriValueTable.getValueAt(approxNutriValueTable.getSelectedRow(), 2).toString()+"'"
                                + " AND kcals = '"+approxNutriValueTable.getValueAt(approxNutriValueTable.getSelectedRow(), 4).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and "
                                    + "removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            
                            defTableModel.removeRow(approxNutriValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        approxNutriValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, prot, chos, fats, kcals, others, type_of_diet, current_problems_affecting_food_intake FROM "
                                + "nutrition.nutr_patient_appro_nutrition_intake "
                            + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_approxRemoveBtnActionPerformed

    private void carePlanClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carePlanClearBtnActionPerformed
        ClearCarePlanFields();
    }//GEN-LAST:event_carePlanClearBtnActionPerformed

    private void carePlanKCALSTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carePlanKCALSTxtMouseClicked
        nameNoLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK);
        carePlanCHOSLbl.setForeground(Color.BLACK); 
        carePlanFATSLbl.setForeground(Color.BLACK); 
        carePlanFLUIDSLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", "Empty Patient Number", JOptionPane.INFORMATION_MESSAGE);
            nameNoLabel.setForeground(Color.red);        
        } else {
            if (carePlanPROTTxt.getText().equals("") || carePlanCHOSTxt.getText().equals("") || carePlanFATSTxt.getText().equals("")) {
                java.awt.Toolkit.getDefaultToolkit().beep();
                
                if (carePlanPROTTxt.getText().equals("")) {
                    carePlanPROTLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that PROT is filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                } else if (carePlanCHOSTxt.getText().equals("")) {
                    carePlanCHOSLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that CHOS is filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                } else if (carePlanFATSTxt.getText().equals("")) {
                    carePlanFATSLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that FATS is filled.", 
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                }
                
            } else {
                if (carePlanPROTTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$") && carePlanCHOSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                        && carePlanFATSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                    
                    double p = 0.00, c = 0.00, f= 0.00, r = 0.00;
                    p = Double.valueOf(carePlanPROTTxt.getText().toString());
                    c = Double.valueOf(carePlanCHOSTxt.getText().toString());
                    f = Double.valueOf(carePlanFATSTxt.getText().toString());

                    r = ((p*4)+(c*4)+(f*9));

                    carePlanKCALSTxt.setText(Double.toString(Math.round(r)));

                    System.out.println("PROT - "+p);
                    System.out.println("CHOS - "+c);
                    System.out.println("FATS - "+f);
                    System.out.println("Results - "+r);
                } else {
                    java.awt.Toolkit.getDefaultToolkit().beep();
                                        
                    if (!carePlanPROTTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        carePlanPROTLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at PROT(gms) - "
                                +carePlanPROTTxt.getText()+"! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else if (!carePlanCHOSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        carePlanCHOSLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at CHOS(gms) - "
                                +carePlanCHOSTxt.getText()+"! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else if (!carePlanFATSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        carePlanFATSLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at FATS(gms) - "
                                +carePlanFATSTxt.getText()+"! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted! ", 
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }           
        }
    }//GEN-LAST:event_carePlanKCALSTxtMouseClicked

    private void carePlanOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carePlanOKbtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        refferedFromLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        nutritionImplicationLabel.setForeground(Color.BLACK);
        carePlanPrescribedDietLbl.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK); 
        carePlanCHOSLbl.setForeground(Color.BLACK); 
        carePlanFATSLbl.setForeground(Color.BLACK); 
        carePlanFLUIDSLbl.setForeground(Color.BLACK); 
        carePlanOthersLbl.setForeground(Color.BLACK); 
        carePlanCODLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || nutritionImplicationTxt.getText().equals("") || carePlanPrescribedDietTxt.getText().equals("") 
                 || carePlanKCALSTxt.getText().equals("") || carePlanFLUIDSTxt.getText().equals("") 
                 || carePlanOthersTxt.getText().equals("") 
                 || carePlanCODTxt.getText().equals("") || carePlanRMFPTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient's Principle Diagnosis.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (nutritionImplicationTxt.getText().equals("")) {
                nutritionImplicationLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Patient's Nutrition Implication field.",  
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanPrescribedDietTxt.getText().equals("")) {
                carePlanPrescribedDietLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, the Patient's 'Prescribed Diet' Field.", 
                    "\nMissing Entries Noted - Prescribed Diet", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanFLUIDSTxt.getText().equals("")) {
                carePlanFLUIDSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the 'FLUIDS' Field.", 
                    "\nMissing Entries Noted - FLUIDS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, the KCALS field by clicking on it.", 
                    "\nMissing Entries Noted - KCALS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanOthersTxt.getText().equals("")) {
                carePlanOthersLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the 'Others' Field.", 
                    "\nMissing Entries Noted - Others", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanCODTxt.getText().equals("")) {
                carePlanCODLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Consistency of Diet field.",  
                    "\nMissing Entries Noted - Consistency of Diet.", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanRMFPTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Please enter if any (Remarks and Future Plan). ", 
                    "Missing Entries Noted - Remarks and Future Plan.", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_patient_care_plan "
                            + "(patient_no, date, prescribed_diet, prot, chos, fats, fluids, kcals, others, "
                            + "consistency_of_diet, route_of_administration, remarks_and_future_plans) "
                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, nameNoTxt.getText().toString().trim());
                        pstmt.setString(2, headerDatePicker.getDate().toLocaleString().trim());
                        pstmt.setString(3, carePlanPrescribedDietTxt.getText().toString().trim());
                        pstmt.setString(4, carePlanPROTTxt.getText().toString().trim());
                        pstmt.setString(5, carePlanCHOSTxt.getText().toString().trim());
                        pstmt.setString(6, carePlanFATSTxt.getText().toString().trim());
                        pstmt.setString(7, carePlanFLUIDSTxt.getText().toString().trim());
                        pstmt.setString(8, carePlanKCALSTxt.getText().toString().trim());
                        pstmt.setString(9, carePlanOthersTxt.getText().toString().trim());
                        pstmt.setString(10, carePlanCODTxt.getText().toString().trim());
                        pstmt.setString(11, carePlanRODCbx.getSelectedItem().toString().trim());
                        pstmt.setString(12, carePlanRMFPTxa.getText().toString().trim());
                        
                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        carePlanValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, prescribed_diet, prot, chos, fats, fluids, kcals, others, consistency_of_diet, "
                                + "route_of_administration, remarks_and_future_plans "
                                + "FROM nutrition.nutr_patient_care_plan "
                                + "WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));
                        
                        
                        System.out.println("About to print the file..."); 
                        
                        PrintPatientsAssessementForm();
                        
                        System.out.println("File Printed!!!");
                    
                        
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_carePlanOKbtnActionPerformed

    private void carePlanRemovebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carePlanRemovebtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        if (nameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            nameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = carePlanValueTable.getSelectedRowCount();

            int[] selectedRows = carePlanValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < carePlanValueTable.getRowCount(); k++) {
                        for (int r = 0; r < carePlanValueTable.getColumnCount(); r++) {
                            carePlanValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            carePlanValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_patient_care_plan"
                                    + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                    + " AND prot = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2).toString()+"'"
                                    + " AND chos = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 3).toString()+"'"
                                    + " AND kcals = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 6).toString()+"'"
                                    + " AND route_of_administration = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 9).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and "
                                    + "removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            
                            defTableModel.removeRow(carePlanValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        carePlanValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, prescribed_diet, prot, chos, fats, fluids, kcals, others, consistency_of_diet, "
                                + "route_of_administration, remarks_and_future_plans FROM "
                                + "nutrition.nutr_patient_care_plan WHERE patient_no ILIKE '%"+nameNoTxt.getText()+"%' "));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_carePlanRemovebtnActionPerformed

    private void paedFamilyHistoryOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFamilyHistoryOKbtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        paedDieseaseSearchLabel.setForeground(Color.BLACK);
        paedFamilyHistoryCBOLbl.setForeground(Color.BLACK);
        paedFamilyHistMotherLbl.setForeground(Color.BLACK);
        paedFamilyHistFatherLbl.setForeground(Color.BLACK);
        
        if (paedNameNoTxt.getText().equals("") || paedDieaseaseSearchTxt.getText().equals("")
                 || paedFamilyHistoryCBOTxt.getText().equals("") || paedFamilyHistoryTNOSTxa.getText().equals("")
                 || paedFamilyHistMATxt.getText().equals("") || paedFamilyHistMAOccTxt.getText().equals("") 
                 || paedFamilyHistFatAgeTxt.getText().equals("") || paedFamilyHistFatherOccTxt.getText().equals("")
                 || paedFamilyHistOPITxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Ensure all the Fields are filled", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            
            if (paedNameNoTxt.getText().equals("")) {
                paedNameNoLabel.setForeground(Color.red);
            }  else if (paedDieaseaseSearchTxt.getText().equals("")) {
                paedDieseaseSearchLabel.setForeground(Color.red);
            }  else if (paedFamilyHistoryCBOTxt.getText().equals("")) {
                paedFamilyHistoryCBOLbl.setForeground(Color.red);
            }  else if (paedFamilyHistoryTNOSTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Total No. of Sibling in family"
                        + " and their ages has some data. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedFamilyHistMATxt.getText().equals("")) {
                paedFamilyHistMotherLbl.setForeground(Color.red);
            }  else if (paedFamilyHistMAOccTxt.getText().equals("")) {
                paedFamilyHistMotherLbl.setForeground(Color.red);
            }  else if (paedFamilyHistFatAgeTxt.getText().equals("")) {
                paedFamilyHistFatherLbl.setForeground(Color.red);
            }  else if (paedFamilyHistFatherOccTxt.getText().equals("")) {
                paedFamilyHistFatherLbl.setForeground(Color.red);
            }  else if (paedFamilyHistOPITxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Other Psychological information has some data.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possibly missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_paed_family_history "
                            + "(patient_no, diagnosis, child_birth_order, parent_mar_status, total_no_siblings, "
                            + "mother_age, mother_occupation, father_age, father_occupation, other_info, date) "
                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, paedNameNoTxt.getText().toString().trim());
                        pstmt.setString(2, paedDieaseaseSearchTxt.getText().toString().trim());
                        pstmt.setString(3, paedFamilyHistoryCBOTxt.getText().toString().trim());
                        pstmt.setString(4, paedFamilyHistoryPMSCmbx.getSelectedItem().toString().trim());
                        pstmt.setString(5, paedFamilyHistoryTNOSTxa.getText().toString().trim());
                        pstmt.setString(6, paedFamilyHistMATxt.getText().toString().trim());
                        pstmt.setString(7, paedFamilyHistMAOccTxt.getText().toString().trim());
                        pstmt.setString(8, paedFamilyHistFatAgeTxt.getText().toString().trim());

                        pstmt.setString(9, paedFamilyHistFatherOccTxt.getText().toString().trim());
                        pstmt.setObject(10, paedFamilyHistOPITxa.getText().toString().trim());
                        pstmt.setObject(11, paedHeaderDatePicker.getDate().toLocaleString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        paedFamilyHistoryMeasValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, diagnosis, child_birth_order, parent_mar_status, total_no_siblings, mother_age, "
                                + "mother_occupation, father_age, father_occupation, other_info "
                                + "FROM nutrition.nutr_paed_family_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_paedFamilyHistoryOKbtnActionPerformed

    private void paedFamilyHistoryRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFamilyHistoryRemoveBtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        if (paedNameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            paedNameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = paedFamilyHistoryMeasValueTable.getSelectedRowCount();

            int[] selectedRows = paedFamilyHistoryMeasValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < paedFamilyHistoryMeasValueTable.getRowCount(); k++) {
                        for (int r = 0; r < paedFamilyHistoryMeasValueTable.getColumnCount(); r++) {
                            paedFamilyHistoryMeasValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            paedFamilyHistoryMeasValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_pad_family_history"
                                + " WHERE patient_no = '"+paedNameNoTxt.getText().toString().trim()+"'"
                                + " AND parent_mar_status = '"+paedFamilyHistoryMeasValueTable.getValueAt(paedFamilyHistoryMeasValueTable.getSelectedRow(), 3).toString()+"'"
                                + " AND mother_age = '"+paedFamilyHistoryMeasValueTable.getValueAt(paedFamilyHistoryMeasValueTable.getSelectedRow(), 5).toString()+"'"
                                + " AND father_occupation = '"+paedFamilyHistoryMeasValueTable.getValueAt(paedFamilyHistoryMeasValueTable.getSelectedRow(), 8).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            defTableModel.removeRow(paedFamilyHistoryMeasValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        paedFamilyHistoryMeasValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, diagnosis, child_birth_order, parent_mar_status, total_no_siblings, mother_age, "
                                + "mother_occupation, father_age, father_occupation, other_info "
                                + "FROM nutrition.nutr_pad_family_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_paedFamilyHistoryRemoveBtnActionPerformed

    private void paedFamilyHistoryClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFamilyHistoryClearBtnActionPerformed
        ClearPaedFamilyHistoPlanFields();
    }//GEN-LAST:event_paedFamilyHistoryClearBtnActionPerformed

    private void paedNutriHistOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNutriHistOKbtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        paedDieseaseSearchLabel.setForeground(Color.BLACK);
        
        if (paedNameNoTxt.getText().equals("") || paedDieaseaseSearchTxt.getText().equals("")
                 || paedNutriHistBRHTxa.getText().equals("") || paedNutriHistWAFUTxa.getText().equals("")
                 || paedNutriHistUCDITxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Ensure all the Fields are filled", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            
            if (paedNameNoTxt.getText().equals("")) {
                paedNameNoLabel.setForeground(Color.red);
            }  else if (paedDieaseaseSearchTxt.getText().equals("")) {
                paedDieseaseSearchLabel.setForeground(Color.red);
            }  else if (paedNutriHistBRHTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Breastfeeding History (if relevant)"
                        + " has some data. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedNutriHistWAFUTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Weaning age and food used has some data. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedNutriHistUCDITxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure Usual and Current Dietary intake has some data. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possibly missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_paed_nutrition_history "
                            + "(patient_no, breast_feeding_history, weaning_age_food, dietary_intake, date) "
                            + " VALUES(?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, paedNameNoTxt.getText().toString().trim());
                        pstmt.setString(2, paedNutriHistBRHTxa.getText().toString().trim());
                        pstmt.setString(3, paedNutriHistWAFUTxa.getText().toString().trim());
                        pstmt.setString(4, paedNutriHistUCDITxa.getText().toString().trim());
                        pstmt.setString(5, paedHeaderDatePicker.getDate().toLocaleString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        paedNutriHistValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breast_feeding_history, weaning_age_food, dietary_intake "
                                + "FROM nutrition.nutr_paed_nutrition_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_paedNutriHistOKbtnActionPerformed

    private void paedNutriHistRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNutriHistRemoveBtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        if (paedNameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            paedNameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = paedNutriHistValueTable.getSelectedRowCount();

            int[] selectedRows = paedNutriHistValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < paedNutriHistValueTable.getRowCount(); k++) {
                        for (int r = 0; r < paedNutriHistValueTable.getColumnCount(); r++) {
                            paedNutriHistValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            paedNutriHistValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_paed_nutrition_history"
                                + " WHERE patient_no = '"+paedNameNoTxt.getText().toString().trim()+"'"
                                + " AND breast_feeding_history = '"+paedNutriHistValueTable.getValueAt(paedNutriHistValueTable.getSelectedRow(), 1).toString()+"'"
                                + " AND weaning_age_food = '"+paedNutriHistValueTable.getValueAt(paedNutriHistValueTable.getSelectedRow(), 2).toString()+"'"
                                + " AND dietary_intake = '"+paedNutriHistValueTable.getValueAt(paedNutriHistValueTable.getSelectedRow(), 3).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            
                            defTableModel.removeRow(paedNutriHistValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        paedNutriHistValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breast_feeding_history, weaning_age_food, dietary_intake "
                                + "FROM nutrition.nutr_paed_nutrition_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%'"));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_paedNutriHistRemoveBtnActionPerformed

    private void paedNutriHistClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNutriHistClearBtnActionPerformed
        ClearPaedNutriHistoPlanFields();
    }//GEN-LAST:event_paedNutriHistClearBtnActionPerformed

    private void paedAnthAssessOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedAnthAssessOKbtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        paedDieseaseSearchLabel.setForeground(Color.BLACK);
        paedAnthAssessBTKgLbl.setForeground(Color.BLACK);
        paedAnthAssessAWTKgLbl.setForeground(Color.BLACK);
        paedAnthAssessHeightCmLbl.setForeground(Color.BLACK);
        paedAnthAssessRefWtAgeLbl.setForeground(Color.BLACK);
        paedAnthAssessWtforAgeLbl.setForeground(Color.BLACK);
        
        if (paedNameNoTxt.getText().equals("") || paedDieaseaseSearchTxt.getText().equals("")
                 || paedAnthAssessBTKgTxt.getText().equals("") || paedAnthAssessAWTKgTxt.getText().equals("")
                 || paedAnthAssessHeightCmTxt.getText().equals("") || paedAnthAssessRefWtAgeTxt.getText().equals("") 
                 || paedAnthAssessWtforAgeTxt.getText().equals("") || paedAnthAssessOthClBioTxa.getText().equals("")
                 || paedAnthAssessOCTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Ensure all the Fields are filled", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            
            if (paedNameNoTxt.getText().equals("")) {
                paedNameNoLabel.setForeground(Color.red);
            }  else if (paedDieaseaseSearchTxt.getText().equals("")) {
                paedDieseaseSearchLabel.setForeground(Color.red);
            }  else if (paedAnthAssessBTKgTxt.getText().equals("")) {
                paedAnthAssessBTKgLbl.setForeground(Color.red);
            }  else if (paedAnthAssessAWTKgTxt.getText().equals("")) {
                paedAnthAssessAWTKgLbl.setForeground(Color.red);
            }  else if (paedAnthAssessHeightCmTxt.getText().equals("")) {
                paedAnthAssessHeightCmLbl.setForeground(Color.red);
            }  else if (paedAnthAssessRefWtAgeTxt.getText().equals("")) {
                paedAnthAssessRefWtAgeLbl.setForeground(Color.red);
            }  else if (paedAnthAssessOthClBioTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Other Clinical and Biochemical Assessement"
                        + " has some data. ", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedAnthAssessOCTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Ensure that the Opinion/Conclusion "
                        + "(Mention briefly the Nutritional Status markers which have led you to this opinion.).", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possibly missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_paed_anthro_assessement "
                            + "(patient_no, birth_wt, adm_wt, height, ref_wt_for_age,"
                            + " wt_for_age, other_clinical_biochem, opion_conclusion, date) "
                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, paedNameNoTxt.getText().toString().trim());
                        pstmt.setString(2, paedAnthAssessBTKgTxt.getText().toString().trim());
                        pstmt.setString(3, paedAnthAssessAWTKgTxt.getText().toString().trim());
                        pstmt.setString(4, paedAnthAssessHeightCmTxt.getText().toString().trim());
                        pstmt.setString(5, paedAnthAssessRefWtAgeTxt.getText().toString().trim());
                        pstmt.setString(6, paedAnthAssessWtforAgeTxt.getText().toString().trim());
                        pstmt.setString(7, paedAnthAssessOthClBioTxa.getText().toString().trim());
                        pstmt.setString(8, paedAnthAssessOCTxa.getText().toString().trim());
                        pstmt.setString(9, paedHeaderDatePicker.getDate().toLocaleString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        paedAnthAssessValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, birth_wt, adm_wt, height, ref_wt_for_age, wt_for_age, "
                                + "other_clinical_biochem, opion_conclusion "
                                + "FROM nutrition.nutr_paed_anthro_assessement "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_paedAnthAssessOKbtnActionPerformed

    private void paedAnthAssessClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedAnthAssessClearBtnActionPerformed
        ClearAnthroNutriHistoPlanFields();
    }//GEN-LAST:event_paedAnthAssessClearBtnActionPerformed

    private void paedAnthAssessRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedAnthAssessRemoveBtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        if (paedNameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient", 
                    JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            paedNameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = paedAnthAssessValueTable.getSelectedRowCount();

            int[] selectedRows = paedAnthAssessValueTable.getSelectedRows();

            if (rows2Delete < 1) {
                
                System.out.println("No row/s selected.");
                
                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    for (int k = 0; k < paedAnthAssessValueTable.getRowCount(); k++) {
                        for (int r = 0; r < paedAnthAssessValueTable.getColumnCount(); r++) {
                            paedAnthAssessValueTable.setValueAt(null, k, r);
                        }
                    }
                    
                } else {
                    System.out.println("One row selected.");
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) 
                            paedAnthAssessValueTable.getModel();
                    
                    try {
                        connectDB.setAutoCommit(false);
                        
                        int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?", 
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                        
                        if (a == 0) {
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_paed_anthro_assessement"
                                + " WHERE patient_no = '"+paedNameNoTxt.getText().toString().trim()+"'"
                                + " AND birth_wt = '"+paedAnthAssessValueTable.getValueAt(paedAnthAssessValueTable.getSelectedRow(), 1).toString()+"'"
                                + " AND ref_wt_for_age = '"+paedAnthAssessValueTable.getValueAt(paedAnthAssessValueTable.getSelectedRow(), 4).toString()+"'"
                                + " AND opion_conclusion = '"+paedAnthAssessValueTable.getValueAt(paedAnthAssessValueTable.getSelectedRow(), 7).toString()+"'");
                        
                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nDelete success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and removed successfully. ", 
                                "Delete success.", JOptionPane.INFORMATION_MESSAGE);
                            
                            defTableModel.removeRow(paedAnthAssessValueTable.getSelectedRow());
                            
                        } else {
                            JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.", 
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                        }                        

                        paedAnthAssessValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, birth_wt, adm_wt, height, ref_wt_for_age, "
                                + "wt_for_age, other_clinical_biochem, opion_conclusion "
                                + "FROM nutrition.nutr_paed_anthro_assessement "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%'"));

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }                    
                    
                }
            }
        }
    }//GEN-LAST:event_paedAnthAssessRemoveBtnActionPerformed

    private void paedAnthAssessBTKgTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedAnthAssessBTKgTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paedAnthAssessBTKgTxtActionPerformed

    private void paedNutriCarePlanOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNutriCarePlanOKbtnActionPerformed
        paedNameNoLabel.setForeground(Color.BLACK);
        paedDieseaseSearchLabel.setForeground(Color.BLACK);
        
        if (paedNameNoTxt.getText().equals("") || paedDieaseaseSearchTxt.getText().equals("")
                 || paedNutriCarePlanTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Ensure all the Fields are filled", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            
            if (paedNameNoTxt.getText().equals("")) {
                paedNameNoLabel.setForeground(Color.red);
            }  else if (paedDieaseaseSearchTxt.getText().equals("")) {
                paedDieseaseSearchLabel.setForeground(Color.red);
            }  else if (paedNutriCarePlanTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Patient's Nutrition Care Plan", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possibly missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
            
            try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_paed_care_plan "
                            + "(patient_no, care_plan, date) "
                            + " VALUES(?, ?, ?)");
                    
                        pstmt.setString(1, paedNameNoTxt.getText().toString().trim());
                        pstmt.setString(2, paedNutriCarePlanTxa.getText().toString().trim());
                        pstmt.setString(3, paedHeaderDatePicker.getDate().toLocaleString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        PrintPaedPatientsAssessementForm();
                        
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            
        }
    }//GEN-LAST:event_paedNutriCarePlanOKbtnActionPerformed

    private void paedNutriCarePlanClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNutriCarePlanClearBtnActionPerformed
        ClearPaedCarePlanFields();
    }//GEN-LAST:event_paedNutriCarePlanClearBtnActionPerformed

    private void searchPaedPatientNumbTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchPaedPatientNumbTxtCaretUpdate
        if (searchPaedPatientNumbTxt.getCaretPosition() < 3) {
            System.out.println("Nothing...");
        } else {
            paedPatientDetailsTxa.setText("");

            patientPaedSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT patient_no, patient_name FROM hp_admission "
                    + "WHERE patient_no ILIKE '%"+searchPaedPatientNumbTxt.getText()+"%' "
                    + "OR patient_name ILIKE '%"+searchPaedPatientNumbTxt.getText()+"%'"
                    + "AND discharge = false ORDER BY patient_no"));

            patientPaedSearchTable.setShowHorizontalLines(false);
            patientPaedSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            patientPaedSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            patientPaedSearchScrollPane.setViewportView(patientPaedSearchTable);
        }
    }//GEN-LAST:event_searchPaedPatientNumbTxtCaretUpdate

    private void searchPaedPatientNumbTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPaedPatientNumbTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchPaedPatientNumbTxtActionPerformed

    private void patientPaedSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientPaedSearchTableMouseClicked
        paedNameNoTxt.setText(patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 0).toString());
        String title = "                           (" + patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 0)
                .toString().concat("    ").
                concat(patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 1).toString()).concat(")");
        this.setTitle(title);

        paedPatientDetailsTxa.setForeground(Color.BLUE);
        paedPatientDetailsTxa.setText(populateBioData(patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 0).toString()));
        
        paedFamilyHistoryMeasValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, diagnosis, child_birth_order, parent_mar_status, total_no_siblings, mother_age, "
                                + "mother_occupation, father_age, father_occupation, other_info "
                                + "FROM nutrition.nutr_paed_family_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));
        
        paedNutriHistValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breast_feeding_history, weaning_age_food, dietary_intake "
                                + "FROM nutrition.nutr_paed_nutrition_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));
        
        paedNutriHistValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, breast_feeding_history, weaning_age_food, dietary_intake "
                                + "FROM nutrition.nutr_paed_nutrition_history "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%' "));
        
        paedAnthAssessValueTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                            "SELECT date, birth_wt, adm_wt, height, ref_wt_for_age, "
                                + "wt_for_age, other_clinical_biochem, opion_conclusion "
                                + "FROM nutrition.nutr_paed_anthro_assessement "
                                + "WHERE patient_no ILIKE '%"+paedNameNoTxt.getText()+"%'"));
        
        paedPatientSearch.dispose();
    }//GEN-LAST:event_patientPaedSearchTableMouseClicked

    private void patientPaedSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientPaedSearchBtnActionPerformed
        this.paedPatientSearch.dispose();
    }//GEN-LAST:event_patientPaedSearchBtnActionPerformed

    private void paedPatientDiagnosisSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_paedPatientDiagnosisSearchTxtCaretUpdate
        if (paedPatientDiagnosisSearchTxt.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {        
            paedPatientDiagnosisSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT code, disease_name FROM hp_diseases  "
                    + "WHERE code ILIKE '%"+paedPatientDiagnosisSearchTxt.getText()+"%' "
                    + "OR disease_name ILIKE '%"+paedPatientDiagnosisSearchTxt.getText()+"%'"
                    + " ORDER BY disease_name"));

            paedPatientDiagnosisSearchTable.setShowHorizontalLines(false);
            paedPatientDiagnosisSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            paedPatientDiagnosisSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            paedPatientDiagnosisSearchScrollPane.setViewportView(paedPatientDiagnosisSearchTable);
        }
    }//GEN-LAST:event_paedPatientDiagnosisSearchTxtCaretUpdate

    private void paedPatientDiagnosisSearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedPatientDiagnosisSearchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paedPatientDiagnosisSearchTxtActionPerformed

    private void paedPatientDiagnosisSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paedPatientDiagnosisSearchTableMouseClicked
        paedDieaseaseSearchTxt.setText(paedPatientDiagnosisSearchTable.getValueAt(paedPatientDiagnosisSearchTable.getSelectedRow(), 1).toString());
        
        paedDieaseaseSearchTxt.setForeground(Color.BLUE);
        paedPatientDiagnosisSearch.dispose();
    }//GEN-LAST:event_paedPatientDiagnosisSearchTableMouseClicked

    private void paedPatientDiagnosisSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedPatientDiagnosisSearchBtnActionPerformed
        this.paedPatientDiagnosisSearch.dispose();
    }//GEN-LAST:event_paedPatientDiagnosisSearchBtnActionPerformed

    private void nutritionHomeTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nutritionHomeTabbedPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionHomeTabbedPaneMouseClicked

    private void paedFamilyHistFatherOccTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFamilyHistFatherOccTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paedFamilyHistFatherOccTxtActionPerformed
        
    public void ClearAnthroFields() {
        anthHeightTxt.setText(""); 
        anthrWeightTxt.setText("");
        anthroBMItxt.setText("");
        anthIBWtxt.setText("");
        anthrRemarksTxa.setText("");
        bioChemistryTxa.setText("");
    }
    
    public void ClearFeedingPatternsFields() {
        dietHistRestrictionTxa.setText(""); 
        dietHistAllegiesTxa.setText("");
        dietHistBreakFastTxt.setText("");
        dietHistLunchTxt.setText("");
        dietHistSupperTxt.setText("");
        dietHistSnacksTxt.setText("");
        feedHistoryCommRemTxa.setText("");
    }
    
    public void ClearApproxNutriFields() {
        approxPROTxt.setText(""); 
        approxCHOStxt.setText("");
        approxFATStxt.setText("");
        approxKCALtxt.setText("");
        approxNutOthersTxt.setText("");
        typeOfDietTxa.setText("");
        currProbAffFoodTxa.setText("");
    }
    
    public void ClearCarePlanFields() {
        carePlanPrescribedDietTxt.setText(""); 
        carePlanPROTTxt.setText("");
        carePlanCHOSTxt.setText("");
        carePlanFATSTxt.setText("");
        carePlanFLUIDSTxt.setText("");
        carePlanKCALSTxt.setText("");
        carePlanOthersTxt.setText("");
        carePlanCODTxt.setText("");
        carePlanRODCbx.setSelectedItem("Oral Administration");
        carePlanRMFPTxa.setText("");
    }
    
    public void ClearPaedFamilyHistoPlanFields() {
        paedFamilyHistoryCBOTxt.setText(""); 
        paedFamilyHistoryTNOSTxa.setText("");
        paedFamilyHistMATxt.setText("");
        paedFamilyHistMAOccTxt.setText("");
        paedFamilyHistFatAgeTxt.setText("");
        paedFamilyHistFatherOccTxt.setText("");
        paedFamilyHistOPITxa.setText("");
        paedFamilyHistoryPMSCmbx.setSelectedItem("Married");
    }
    
    public void ClearPaedNutriHistoPlanFields() {
        paedNutriHistBRHTxa.setText(""); 
        paedNutriHistWAFUTxa.setText("");
        paedNutriHistUCDITxa.setText("");        
    }
    
    public void ClearAnthroNutriHistoPlanFields() {
        paedAnthAssessBTKgTxt.setText(""); 
        paedAnthAssessAWTKgTxt.setText("");
        paedAnthAssessHeightCmTxt.setText("");        
        paedAnthAssessRefWtAgeTxt.setText("");        
        paedAnthAssessWtforAgeTxt.setText("");        
        paedAnthAssessOthClBioTxa.setText("");        
        paedAnthAssessOCTxa.setText("");        
    }
    
    public void ClearPaedCarePlanFields() {
        paedNutriCarePlanTxa.setText("1.\n\n2.\n\n3.\n\n4.\n\n5.\n\n6.\n\n7");        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel adultsNutritionAssessPanel;
    private javax.swing.JButton anthClearBtn;
    private javax.swing.JLabel anthHeightLbl;
    private javax.swing.JTextField anthHeightTxt;
    private javax.swing.JTextField anthIBWtxt;
    private javax.swing.JButton anthOKbtn;
    private javax.swing.JScrollPane anthrRemarksScrollPane;
    private javax.swing.JScrollPane anthrRemarksScrollPane1;
    private javax.swing.JScrollPane anthrRemarksScrollPane2;
    private javax.swing.JTextArea anthrRemarksTxa;
    private javax.swing.JButton anthrRemoveBtn;
    private javax.swing.JLabel anthrWeightLbl;
    private javax.swing.JTextField anthrWeightTxt;
    private javax.swing.JTextField anthroBMItxt;
    private javax.swing.JScrollPane anthroMeasValueScrollPane;
    private javax.swing.JTable anthroMeasValueTable;
    private javax.swing.JPanel anthropMeasPanel;
    private javax.swing.JPanel appNutriIntakePanel;
    private javax.swing.JPanel approNutriIntakePanel;
    private javax.swing.JLabel approxCHOSLbl;
    private javax.swing.JTextField approxCHOStxt;
    private javax.swing.JButton approxClearBtn;
    private javax.swing.JLabel approxFATSLbl;
    private javax.swing.JTextField approxFATStxt;
    private javax.swing.JTextField approxKCALtxt;
    private javax.swing.JLabel approxNutOthersLbl;
    private javax.swing.JTextField approxNutOthersTxt;
    private javax.swing.JScrollPane approxNutriValueScrollPane;
    private javax.swing.JTable approxNutriValueTable;
    private javax.swing.JButton approxOKbtn;
    private javax.swing.JLabel approxPROTLbl;
    private javax.swing.JTextField approxPROTxt;
    private javax.swing.JButton approxRemoveBtn;
    private javax.swing.JScrollPane bioChemistryScrollPane;
    private javax.swing.JScrollPane bioChemistryScrollPane1;
    private javax.swing.JScrollPane bioChemistryScrollPane2;
    private javax.swing.JScrollPane bioChemistryScrollPane3;
    private javax.swing.JTextArea bioChemistryTxa;
    private javax.swing.JLabel carePlanCHOSLbl;
    private javax.swing.JTextField carePlanCHOSTxt;
    private javax.swing.JLabel carePlanCODLbl;
    private javax.swing.JTextField carePlanCODTxt;
    private javax.swing.JButton carePlanClearBtn;
    private javax.swing.JLabel carePlanFATSLbl;
    private javax.swing.JTextField carePlanFATSTxt;
    private javax.swing.JLabel carePlanFLUIDSLbl;
    private javax.swing.JTextField carePlanFLUIDSTxt;
    private javax.swing.JTextField carePlanKCALSTxt;
    private javax.swing.JButton carePlanOKbtn;
    private javax.swing.JLabel carePlanOthersLbl;
    private javax.swing.JTextField carePlanOthersTxt;
    private javax.swing.JLabel carePlanPROTLbl;
    private javax.swing.JTextField carePlanPROTTxt;
    private javax.swing.JPanel carePlanPanel;
    private javax.swing.JLabel carePlanPrescribedDietLbl;
    private javax.swing.JTextField carePlanPrescribedDietTxt;
    private javax.swing.JTextArea carePlanRMFPTxa;
    private javax.swing.JComboBox carePlanRODCbx;
    private javax.swing.JLabel carePlanRODLbl;
    private javax.swing.JButton carePlanRemovebtn;
    private javax.swing.JScrollPane carePlanValueRMFPScrollPane4;
    private javax.swing.JScrollPane carePlanValueScrollPane;
    private javax.swing.JTable carePlanValueTable;
    private javax.swing.JTextArea currProbAffFoodTxa;
    private javax.swing.JButton deseaseSearchBtn;
    private javax.swing.JPanel dieaseaseSearchPanel;
    private javax.swing.JPanel dieaseaseSearchPanel1;
    private javax.swing.JTextField dieaseaseSearchTxt;
    private javax.swing.JLabel dieseaseSearchLabel;
    private javax.swing.JTextArea dietHistAllegiesTxa;
    private javax.swing.JLabel dietHistBreakFastLbl;
    private javax.swing.JTextField dietHistBreakFastTxt;
    private javax.swing.JLabel dietHistLunchLbl;
    private javax.swing.JTextField dietHistLunchTxt;
    private javax.swing.JTextArea dietHistRestrictionTxa;
    private javax.swing.JLabel dietHistSnacksLbl;
    private javax.swing.JTextField dietHistSnacksTxt;
    private javax.swing.JLabel dietHistSupperLbl;
    private javax.swing.JTextField dietHistSupperTxt;
    private javax.swing.JPanel dietHistoryPanel;
    private javax.swing.JPanel diseaseSearchPanel;
    private javax.swing.JPanel diseaseSearchPanel1;
    private javax.swing.JPanel familyHistoryPanel;
    private javax.swing.JTextArea feedHistoryCommRemTxa;
    private javax.swing.JButton feedingClearBtn;
    private javax.swing.JPanel feedingPatternBtnPanel;
    private javax.swing.JButton feedingPatternOKbtn;
    private javax.swing.JButton feedingPatternRemoveBtn;
    private javax.swing.JScrollPane feedingPatternValueScrollPane;
    private javax.swing.JTable feedingPatternValueTable;
    private javax.swing.JPanel feedingPatternsPanel;
    private javax.swing.JPanel fillingPanel;
    private javax.swing.JPanel fillingPanel1;
    private com.afrisoftech.lib.DatePicker headerDatePicker;
    private javax.swing.JPanel inAnthroMeasPanel;
    private javax.swing.JPanel inApproxNutriIntakePanel;
    private javax.swing.JPanel inApproxNutriIntakePanel1;
    private javax.swing.JPanel inDietHistoryPanel;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JLabel nameNoLabel;
    private javax.swing.JButton nameNoSearchBtn;
    private javax.swing.JPanel nameNoSearchPanel;
    private javax.swing.JTextField nameNoTxt;
    private javax.swing.JSplitPane nutriHomeSplitPane;
    private javax.swing.JSplitPane nutriHomeSplitPane1;
    private javax.swing.JPanel nutritionAssessmentPanel;
    private javax.swing.JPanel nutritionAssessmentPanel1;
    private javax.swing.JTabbedPane nutritionAssessmentTabbedPane;
    private javax.swing.JTabbedPane nutritionAssessmentTabbedPane1;
    private javax.swing.JTabbedPane nutritionHomeTabbedPane;
    private javax.swing.JLabel nutritionImplicationLabel;
    private javax.swing.JTextField nutritionImplicationTxt;
    private javax.swing.JSplitPane nutritionSplitPane;
    private javax.swing.JSplitPane nutritionSplitPane1;
    private javax.swing.JPanel paedAmBTNPanel;
    private javax.swing.JPanel paedAmBTNPanel1;
    private javax.swing.JLabel paedAnthAssessAWTKgLbl;
    private javax.swing.JTextField paedAnthAssessAWTKgTxt;
    private javax.swing.JLabel paedAnthAssessBTKgLbl;
    private javax.swing.JTextField paedAnthAssessBTKgTxt;
    private javax.swing.JButton paedAnthAssessClearBtn;
    private javax.swing.JLabel paedAnthAssessHeightCmLbl;
    private javax.swing.JTextField paedAnthAssessHeightCmTxt;
    private javax.swing.JScrollPane paedAnthAssessOCScrollPane;
    private javax.swing.JTextArea paedAnthAssessOCTxa;
    private javax.swing.JButton paedAnthAssessOKbtn;
    private javax.swing.JScrollPane paedAnthAssessOthClBioScrollPane;
    private javax.swing.JTextArea paedAnthAssessOthClBioTxa;
    private javax.swing.JLabel paedAnthAssessRefWtAgeLbl;
    private javax.swing.JTextField paedAnthAssessRefWtAgeTxt;
    private javax.swing.JButton paedAnthAssessRemoveBtn;
    private javax.swing.JScrollPane paedAnthAssessScrollPane;
    private javax.swing.JTable paedAnthAssessValueTable;
    private javax.swing.JLabel paedAnthAssessWtforAgeLbl;
    private javax.swing.JTextField paedAnthAssessWtforAgeTxt;
    private javax.swing.JPanel paedAnthroMeasureInPanel;
    private javax.swing.JPanel paedAnthroMeasurePanel;
    private javax.swing.JPanel paedBTNPanel;
    private javax.swing.JPanel paedCarePlanInPanel;
    private javax.swing.JPanel paedCarePlanPanel;
    private javax.swing.JButton paedDeseaseSearchBtn;
    private javax.swing.JTextField paedDieaseaseSearchTxt;
    private javax.swing.JLabel paedDieseaseSearchLabel;
    private javax.swing.JTextField paedFamilyHistFatAgeTxt;
    private javax.swing.JLabel paedFamilyHistFatherLbl;
    private javax.swing.JTextField paedFamilyHistFatherOccTxt;
    private javax.swing.JTextField paedFamilyHistMAOccTxt;
    private javax.swing.JTextField paedFamilyHistMATxt;
    private javax.swing.JLabel paedFamilyHistMotherLbl;
    private javax.swing.JScrollPane paedFamilyHistOPIScrollPane;
    private javax.swing.JTextArea paedFamilyHistOPITxa;
    private javax.swing.JLabel paedFamilyHistoryCBOLbl;
    private javax.swing.JTextField paedFamilyHistoryCBOTxt;
    private javax.swing.JButton paedFamilyHistoryClearBtn;
    private javax.swing.JTable paedFamilyHistoryMeasValueTable;
    private javax.swing.JButton paedFamilyHistoryOKbtn;
    private javax.swing.JComboBox paedFamilyHistoryPMSCmbx;
    private javax.swing.JPanel paedFamilyHistoryPanel;
    private javax.swing.JButton paedFamilyHistoryRemoveBtn;
    private javax.swing.JScrollPane paedFamilyHistoryScrollPane1;
    private javax.swing.JScrollPane paedFamilyHistoryTNOSScrollPane;
    private javax.swing.JTextArea paedFamilyHistoryTNOSTxa;
    private com.afrisoftech.lib.DatePicker paedHeaderDatePicker;
    private javax.swing.JLabel paedNameNoLabel;
    private javax.swing.JButton paedNameNoSearchBtn;
    private javax.swing.JPanel paedNameNoSearchPanel;
    private javax.swing.JTextField paedNameNoTxt;
    private javax.swing.JButton paedNutriCarePlanClearBtn;
    private javax.swing.JButton paedNutriCarePlanOKbtn;
    private javax.swing.JTextArea paedNutriCarePlanTxa;
    private javax.swing.JScrollPane paedNutriHistBRHScrollPane;
    private javax.swing.JTextArea paedNutriHistBRHTxa;
    private javax.swing.JButton paedNutriHistClearBtn;
    private javax.swing.JPanel paedNutriHistInPanel;
    private javax.swing.JButton paedNutriHistOKbtn;
    private javax.swing.JPanel paedNutriHistPanel;
    private javax.swing.JButton paedNutriHistRemoveBtn;
    private javax.swing.JScrollPane paedNutriHistScrollPane;
    private javax.swing.JScrollPane paedNutriHistUCDIScrollPane;
    private javax.swing.JTextArea paedNutriHistUCDITxa;
    private javax.swing.JTable paedNutriHistValueTable;
    private javax.swing.JScrollPane paedNutriHistWAFUScrollPane;
    private javax.swing.JTextArea paedNutriHistWAFUTxa;
    private javax.swing.JPanel paedNutritionAssessPanel;
    private javax.swing.JPanel paedPatientDetailsPanel;
    private javax.swing.JTextArea paedPatientDetailsTxa;
    private javax.swing.JDialog paedPatientDiagnosisSearch;
    private javax.swing.JButton paedPatientDiagnosisSearchBtn;
    private javax.swing.JPanel paedPatientDiagnosisSearchDialogPanel;
    private javax.swing.JScrollPane paedPatientDiagnosisSearchScrollPane;
    private javax.swing.JTable paedPatientDiagnosisSearchTable;
    private javax.swing.JTextField paedPatientDiagnosisSearchTxt;
    private javax.swing.JDialog paedPatientSearch;
    private javax.swing.JPanel paedPatientSearchDialogPanel;
    private javax.swing.JPanel patientDetailsPanel;
    private javax.swing.JPanel patientDetailsPanel1;
    private javax.swing.JTextArea patientDetailsTxa;
    private javax.swing.JDialog patientDiagnosisSearch;
    private javax.swing.JButton patientDiagnosisSearchBtn;
    private javax.swing.JPanel patientDiagnosisSearchDialogPanel;
    private javax.swing.JScrollPane patientDiagnosisSearchScrollPane;
    private javax.swing.JTable patientDiagnosisSearchTable;
    private javax.swing.JTextField patientDiagnosisSearchTxt;
    private javax.swing.JButton patientPaedSearchBtn;
    private javax.swing.JScrollPane patientPaedSearchScrollPane;
    private javax.swing.JTable patientPaedSearchTable;
    private javax.swing.JDialog patientSearch;
    private javax.swing.JButton patientSearchBtn;
    private javax.swing.JPanel patientSearchDialogPanel;
    private javax.swing.JScrollPane patientSearchScrollPane;
    private javax.swing.JTable patientSearchTable;
    private javax.swing.JPanel reffDieNutrImpPanel;
    private javax.swing.JPanel reffDieNutrImpPanel1;
    private javax.swing.JComboBox refferedFromCmbx;
    private javax.swing.JLabel refferedFromLabel;
    private javax.swing.JPanel searchForPatientPanel;
    private javax.swing.JPanel searchForPatientPanel1;
    private javax.swing.JTextField searchPaedPatientNumbTxt;
    private javax.swing.JTextField searchPatientNumbTxt;
    private javax.swing.JTextArea typeOfDietTxa;
    // End of variables declaration//GEN-END:variables

    private void PrintPatientsAssessementForm() {
        com.afrisoftech.reports.NutritionAdultPatientAssessmentFormPdf.connectDB = connectDB;
            com.afrisoftech.reports.NutritionAdultPatientAssessmentFormPdf regForm = new com.afrisoftech.reports.NutritionAdultPatientAssessmentFormPdf();
            regForm.generatePdf(nameNoTxt.getText().toString(), headerDatePicker.getDate());
    }
    
    private void PrintPaedPatientsAssessementForm() {
        com.afrisoftech.reports.NutritionPaedPatientAssessmentFormPdf.connectDB = connectDB;
            com.afrisoftech.reports.NutritionPaedPatientAssessmentFormPdf regForm = new com.afrisoftech.reports.NutritionPaedPatientAssessmentFormPdf();
            regForm.generatePdf(paedNameNoTxt.getText().toString(), paedHeaderDatePicker.getDate());
    }


}
