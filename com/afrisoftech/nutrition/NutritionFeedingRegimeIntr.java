 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.nutrition;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.jdalbey.timechooser.TimeChooser;
//import test.testing;
/**
 *
 * @author wgitau@systempartners.biz
 */
public class NutritionFeedingRegimeIntr extends javax.swing.JInternalFrame {
    
    JComboBox mealTimeCmbx = new JComboBox();
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    Date date = new Date();    
    private static String ward = null;
    private String gender = null;
    private String patient_name = null;
    int years = 0, months = 0, days = 0;
    
    /**
     * Creates new form NursingCasualty
     */
    public NutritionFeedingRegimeIntr(java.sql.Connection connDb) {
        connectDB = connDb;
        
        initComponents();  
        
        oralPanel.setVisible(false);
        
        mealTimeCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] 
                { "Breakfast - (8:00am)", "Mid-morning Snack - (11am)", "Lunch - (1pm)", 
                "Mid-Afternoon Snack - (4pm)", "Supper - (7pm)", "Bed-time - (9pm)"}));

                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientSearch = new javax.swing.JDialog();
        patientSearchDialogPanel = new javax.swing.JPanel();
        searchPatientNumbTxt = new javax.swing.JTextField();
        patientSearchScrollPane = new javax.swing.JScrollPane();
        patientSearchTable = new com.afrisoftech.dbadmin.JTable();
        patientSearchBtn = new javax.swing.JButton();
        patientDiagnosisSearch = new javax.swing.JDialog();
        patientDiagnosisSearchDialogPanel = new javax.swing.JPanel();
        patientDiagnosisSearchTxt = new javax.swing.JTextField();
        patientDiagnosisSearchScrollPane = new javax.swing.JScrollPane();
        patientDiagnosisSearchTable = new com.afrisoftech.dbadmin.JTable();
        patientDiagnosisSearchBtn = new javax.swing.JButton();
        paedPatientSearch = new javax.swing.JDialog();
        paedPatientSearchDialogPanel = new javax.swing.JPanel();
        searchPaedPatientNumbTxt = new javax.swing.JTextField();
        patientPaedSearchScrollPane = new javax.swing.JScrollPane();
        patientPaedSearchTable = new com.afrisoftech.dbadmin.JTable();
        patientPaedSearchBtn = new javax.swing.JButton();
        feedingRegimeFoodSearchDialog = new javax.swing.JDialog();
        feedingSearchDialogPanel = new javax.swing.JPanel();
        searchFeedingTxt = new javax.swing.JTextField();
        feedingSearchScrollPane = new javax.swing.JScrollPane();
        feedingSearchTable = new com.afrisoftech.dbadmin.JTable();
        feedingSearchBtn = new javax.swing.JButton();
        paedFRFSearchDialog = new javax.swing.JDialog();
        paedFRFSearchPanel = new javax.swing.JPanel();
        paedFeedTxt = new javax.swing.JTextField();
        paedFRFScrollPane = new javax.swing.JScrollPane();
        paedFRFTable = new javax.swing.JTable();
        paedFRFBtn = new javax.swing.JButton();
        feedingRegimeFoodSearchDialog1 = new javax.swing.JDialog();
        feedingSearchDialogPanel1 = new javax.swing.JPanel();
        searchFeedingTxt1 = new javax.swing.JTextField();
        feedingSearchScrollPane1 = new javax.swing.JScrollPane();
        feedingSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        feedingSearchBtn1 = new javax.swing.JButton();
        nutritionHomeTabbedPane = new javax.swing.JTabbedPane();
        adultsNutritionAssessPanel = new javax.swing.JPanel();
        nutriHomeSplitPane = new javax.swing.JSplitPane();
        patientDetailsPanel = new javax.swing.JPanel();
        searchForPatientPanel = new javax.swing.JPanel();
        nameNoLabel = new javax.swing.JLabel();
        nameNoSearchPanel = new javax.swing.JPanel();
        nameNoTxt = new javax.swing.JTextField();
        nameNoSearchBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        headerDatePicker = new com.afrisoftech.lib.DatePicker();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        patientDetailsTxa = new javax.swing.JTextArea();
        reffDieNutrImpPanel = new javax.swing.JPanel();
        diseaseSearchPanel = new javax.swing.JPanel();
        dieseaseSearchLabel = new javax.swing.JLabel();
        dieaseaseSearchPanel = new javax.swing.JPanel();
        dieaseaseSearchTxt = new javax.swing.JTextField();
        deseaseSearchBtn = new javax.swing.JButton();
        nutritionAssessmentPanel = new javax.swing.JPanel();
        nutritionSplitPane = new javax.swing.JSplitPane();
        nutritionAssessmentTabbedPane = new javax.swing.JTabbedPane();
        carePlanPanel = new javax.swing.JPanel();
        inApproxNutriIntakePanel1 = new javax.swing.JPanel();
        carePlanOKbtn = new javax.swing.JButton();
        carePlanRemovebtn = new javax.swing.JButton();
        carePlanValueRMFPScrollPane4 = new javax.swing.JScrollPane();
        carePlanRMFPTxa = new javax.swing.JTextArea();
        carePlanClearBtn = new javax.swing.JButton();
        actualNutriPrePanel = new javax.swing.JPanel();
        actualPROTTxt = new javax.swing.JTextField();
        actualCHOSTxt = new javax.swing.JTextField();
        actualFATSTxt = new javax.swing.JTextField();
        actualKCALSTxt = new javax.swing.JTextField();
        nutriRequirePanel = new javax.swing.JPanel();
        carePlanPROTLbl = new javax.swing.JLabel();
        carePlanPROTTxt = new javax.swing.JTextField();
        carePlanCHOSLbl = new javax.swing.JLabel();
        carePlanCHOSTxt = new javax.swing.JTextField();
        carePlanFATSLbl = new javax.swing.JLabel();
        carePlanFATSTxt = new javax.swing.JTextField();
        carePlanFLUIDSLbl = new javax.swing.JLabel();
        carePlanFLUIDSTxt = new javax.swing.JTextField();
        carePlanKCALSTxt = new javax.swing.JTextField();
        carePlanRODLbl = new javax.swing.JLabel();
        carePlanRODTxt = new javax.swing.JTextField();
        tablePanel = new javax.swing.JPanel();
        carePlanValueScrollPane = new javax.swing.JScrollPane();
        carePlanValueTable = new javax.swing.JTable();
        oralPanel = new javax.swing.JPanel();
        oralCarePlanScrollPane = new javax.swing.JScrollPane();
        oralCTable = new javax.swing.JTable();
        fillingPanel = new javax.swing.JPanel();
        paedNutritionAssessPanel = new javax.swing.JPanel();
        paedNutriHomeSplitPane = new javax.swing.JSplitPane();
        patientDetailsPanel1 = new javax.swing.JPanel();
        searchForPatientPanel1 = new javax.swing.JPanel();
        paedNameNoLabel = new javax.swing.JLabel();
        paedNameNoSearchPanel = new javax.swing.JPanel();
        paedNameNoTxt = new javax.swing.JTextField();
        paedNameNoSearchBtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        paedHeaderDatePicker = new com.afrisoftech.lib.DatePicker();
        paedPatientDetailsPanel = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        paedPatientDetailsTxa = new javax.swing.JTextArea();
        reffDieNutrImpPanel1 = new javax.swing.JPanel();
        paedFRDietPrescrTxt = new javax.swing.JTextField();
        paedROACmbx = new javax.swing.JComboBox();
        nutritionAssessmentPanel1 = new javax.swing.JPanel();
        nutritionSplitPane1 = new javax.swing.JSplitPane();
        nutritionAssessmentTabbedPane1 = new javax.swing.JTabbedPane();
        paedFamilyHistoryPanel = new javax.swing.JPanel();
        familyHistoryPanel = new javax.swing.JPanel();
        feedingInstruPanel = new javax.swing.JPanel();
        feedingInstruScrollPane = new javax.swing.JScrollPane();
        feedingInstruTxa = new javax.swing.JTextArea();
        paedFRTablePanel = new javax.swing.JPanel();
        paedFRTableScrollPane = new javax.swing.JScrollPane();
        paedFRTable = new javax.swing.JTable();
        paedRegimeProvPanel = new javax.swing.JPanel();
        paedRegimeProvScrollPane = new javax.swing.JScrollPane();
        paedRegimeProvTxa = new javax.swing.JTextArea();
        paedButtonPanel = new javax.swing.JPanel();
        paedFRSVPbtn = new javax.swing.JButton();
        paedFRClearBtn = new javax.swing.JButton();
        paedFRRemoveBtn = new javax.swing.JButton();
        fillingPanel1 = new javax.swing.JPanel();

        patientSearch.setModal(true);
        patientSearch.setUndecorated(true);
        patientSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        searchPatientNumbTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchPatientNumbTxtCaretUpdate(evt);
            }
        });
        searchPatientNumbTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatientNumbTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientSearchDialogPanel.add(searchPatientNumbTxt, gridBagConstraints);

        patientSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientSearchTableMouseClicked(evt);
            }
        });
        patientSearchScrollPane.setViewportView(patientSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        patientSearchDialogPanel.add(patientSearchScrollPane, gridBagConstraints);

        patientSearchBtn.setText("Dispose");
        patientSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchDialogPanel.add(patientSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearch.getContentPane().add(patientSearchDialogPanel, gridBagConstraints);

        patientDiagnosisSearch.setModal(true);
        patientDiagnosisSearch.setUndecorated(true);
        patientDiagnosisSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientDiagnosisSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientDiagnosisSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        patientDiagnosisSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientDiagnosisSearchTxtCaretUpdate(evt);
            }
        });
        patientDiagnosisSearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientDiagnosisSearchTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientDiagnosisSearchDialogPanel.add(patientDiagnosisSearchTxt, gridBagConstraints);

        patientDiagnosisSearchTable.setToolTipText("Click on the target row to select the Diagnosis from the search.");
        patientDiagnosisSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientDiagnosisSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientDiagnosisSearchTableMouseClicked(evt);
            }
        });
        patientDiagnosisSearchScrollPane.setViewportView(patientDiagnosisSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        patientDiagnosisSearchDialogPanel.add(patientDiagnosisSearchScrollPane, gridBagConstraints);

        patientDiagnosisSearchBtn.setText("Dispose");
        patientDiagnosisSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientDiagnosisSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDiagnosisSearchDialogPanel.add(patientDiagnosisSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDiagnosisSearch.getContentPane().add(patientDiagnosisSearchDialogPanel, gridBagConstraints);

        paedPatientSearch.setModal(true);
        paedPatientSearch.setUndecorated(true);
        paedPatientSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        paedPatientSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paedPatientSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        searchPaedPatientNumbTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchPaedPatientNumbTxtCaretUpdate(evt);
            }
        });
        searchPaedPatientNumbTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPaedPatientNumbTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        paedPatientSearchDialogPanel.add(searchPaedPatientNumbTxt, gridBagConstraints);

        patientPaedSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientPaedSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientPaedSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientPaedSearchTableMouseClicked(evt);
            }
        });
        patientPaedSearchScrollPane.setViewportView(patientPaedSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        paedPatientSearchDialogPanel.add(patientPaedSearchScrollPane, gridBagConstraints);

        patientPaedSearchBtn.setText("Dispose");
        patientPaedSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientPaedSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientSearchDialogPanel.add(patientPaedSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientSearch.getContentPane().add(paedPatientSearchDialogPanel, gridBagConstraints);

        feedingRegimeFoodSearchDialog.setModal(true);
        feedingRegimeFoodSearchDialog.setUndecorated(true);
        feedingRegimeFoodSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        feedingSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        feedingSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        searchFeedingTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFeedingTxtCaretUpdate(evt);
            }
        });
        searchFeedingTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFeedingTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        feedingSearchDialogPanel.add(searchFeedingTxt, gridBagConstraints);

        feedingSearchTable.setToolTipText("Click on the target row to select the feed from the search.");
        feedingSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        feedingSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feedingSearchTableMouseClicked(evt);
            }
        });
        feedingSearchScrollPane.setViewportView(feedingSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        feedingSearchDialogPanel.add(feedingSearchScrollPane, gridBagConstraints);

        feedingSearchBtn.setText("Dispose");
        feedingSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedingSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        feedingSearchDialogPanel.add(feedingSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        feedingRegimeFoodSearchDialog.getContentPane().add(feedingSearchDialogPanel, gridBagConstraints);

        paedFRFSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        paedFRFSearchPanel.setLayout(new java.awt.GridBagLayout());

        paedFeedTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                paedFeedTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        paedFRFSearchPanel.add(paedFeedTxt, gridBagConstraints);

        paedFRFTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        paedFRFTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paedFRFTableMouseClicked(evt);
            }
        });
        paedFRFScrollPane.setViewportView(paedFRFTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        paedFRFSearchPanel.add(paedFRFScrollPane, gridBagConstraints);

        paedFRFBtn.setText("Dispose");
        paedFRFBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFRFBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedFRFSearchPanel.add(paedFRFBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedFRFSearchDialog.getContentPane().add(paedFRFSearchPanel, gridBagConstraints);

        feedingRegimeFoodSearchDialog1.setModal(true);
        feedingRegimeFoodSearchDialog1.setUndecorated(true);
        feedingRegimeFoodSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        feedingSearchDialogPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        feedingSearchDialogPanel1.setLayout(new java.awt.GridBagLayout());

        searchFeedingTxt1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFeedingTxt1CaretUpdate(evt);
            }
        });
        searchFeedingTxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFeedingTxt1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        feedingSearchDialogPanel1.add(searchFeedingTxt1, gridBagConstraints);

        feedingSearchTable1.setToolTipText("Click on the target row to select the feed from the search.");
        feedingSearchTable1.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = patientSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        feedingSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feedingSearchTable1MouseClicked(evt);
            }
        });
        feedingSearchScrollPane1.setViewportView(feedingSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        feedingSearchDialogPanel1.add(feedingSearchScrollPane1, gridBagConstraints);

        feedingSearchBtn1.setText("Dispose");
        feedingSearchBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedingSearchBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        feedingSearchDialogPanel1.add(feedingSearchBtn1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        feedingRegimeFoodSearchDialog1.getContentPane().add(feedingSearchDialogPanel1, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nutrition Feeding Regime Form");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        nutritionHomeTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nutritionHomeTabbedPaneMouseClicked(evt);
            }
        });

        adultsNutritionAssessPanel.setBackground(new java.awt.Color(204, 255, 204));
        adultsNutritionAssessPanel.setLayout(new java.awt.GridBagLayout());

        nutriHomeSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        nutriHomeSplitPane.setEnabled(false);
        nutriHomeSplitPane.setFocusable(false);

        patientDetailsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientDetailsPanel.setForeground(new java.awt.Color(0, 0, 204));
        patientDetailsPanel.setLayout(new java.awt.GridBagLayout());

        searchForPatientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search for the Patient Here......", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(41, 41, 213)));
        searchForPatientPanel.setLayout(new java.awt.GridBagLayout());

        nameNoLabel.setText("Patient No/Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        searchForPatientPanel.add(nameNoLabel, gridBagConstraints);

        nameNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        nameNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        nameNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nameNoSearchPanel.add(nameNoTxt, gridBagConstraints);

        nameNoSearchBtn.setToolTipText("Search");
        nameNoSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameNoSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        nameNoSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        nameNoSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nameNoSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameNoSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        nameNoSearchPanel.add(nameNoSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        searchForPatientPanel.add(nameNoSearchPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        searchForPatientPanel.add(jPanel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        searchForPatientPanel.add(headerDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        patientDetailsPanel.add(searchForPatientPanel, gridBagConstraints);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The Patient's Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(43, 43, 224)));
        jPanel18.setForeground(new java.awt.Color(0, 0, 204));
        jPanel18.setLayout(new java.awt.GridBagLayout());

        patientDetailsTxa.setEditable(false);
        patientDetailsTxa.setColumns(4);
        patientDetailsTxa.setForeground(new java.awt.Color(255, 0, 0));
        patientDetailsTxa.setLineWrap(true);
        patientDetailsTxa.setRows(3);
        patientDetailsTxa.setTabSize(5);
        patientDetailsTxa.setText("\n");
        patientDetailsTxa.setToolTipText("The Patient's Details");
        patientDetailsTxa.setWrapStyleWord(true);
        patientDetailsTxa.setAutoscrolls(false);
        patientDetailsTxa.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane19.setViewportView(patientDetailsTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        jPanel18.add(jScrollPane19, gridBagConstraints);

        reffDieNutrImpPanel.setLayout(new java.awt.GridBagLayout());

        diseaseSearchPanel.setLayout(new java.awt.GridBagLayout());

        dieseaseSearchLabel.setText("Diagnosis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        diseaseSearchPanel.add(dieseaseSearchLabel, gridBagConstraints);

        dieaseaseSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dieaseaseSearchPanel.setLayout(new java.awt.GridBagLayout());

        dieaseaseSearchTxt.setEditable(false);
        dieaseaseSearchTxt.setToolTipText("Principle Diagnosis of the Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dieaseaseSearchPanel.add(dieaseaseSearchTxt, gridBagConstraints);

        deseaseSearchBtn.setToolTipText("Search");
        deseaseSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        deseaseSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        deseaseSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        deseaseSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deseaseSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deseaseSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        dieaseaseSearchPanel.add(deseaseSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 2, 0);
        diseaseSearchPanel.add(dieaseaseSearchPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel.add(diseaseSearchPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel18.add(reffDieNutrImpPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        patientDetailsPanel.add(jPanel18, gridBagConstraints);

        nutriHomeSplitPane.setLeftComponent(patientDetailsPanel);

        nutritionAssessmentPanel.setLayout(new java.awt.GridBagLayout());

        nutritionSplitPane.setDividerLocation(1);
        nutritionSplitPane.setEnabled(false);
        nutritionSplitPane.setFocusable(false);
        nutritionSplitPane.setRequestFocusEnabled(false);

        nutritionAssessmentTabbedPane.setForeground(new java.awt.Color(0, 102, 51));
        nutritionAssessmentTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        nutritionAssessmentTabbedPane.setMinimumSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane.setPreferredSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nutritionAssessmentTabbedPaneMouseClicked(evt);
            }
        });
        nutritionAssessmentTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nutritionAssessmentTabbedPaneStateChanged(evt);
            }
        });

        carePlanPanel.setMinimumSize(new java.awt.Dimension(385, 250));
        carePlanPanel.setPreferredSize(new java.awt.Dimension(385, 250));
        carePlanPanel.setLayout(new java.awt.GridBagLayout());

        inApproxNutriIntakePanel1.setLayout(new java.awt.GridBagLayout());

        carePlanOKbtn.setText("Save & Print");
        carePlanOKbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carePlanOKbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanOKbtn, gridBagConstraints);

        carePlanRemovebtn.setText("Remove");
        carePlanRemovebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carePlanRemovebtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanRemovebtn, gridBagConstraints);

        carePlanRMFPTxa.setColumns(20);
        carePlanRMFPTxa.setRows(5);
        carePlanRMFPTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Comments/Recommendations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 16, 231)));
        carePlanValueRMFPScrollPane4.setViewportView(carePlanRMFPTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanValueRMFPScrollPane4, gridBagConstraints);

        carePlanClearBtn.setText("Clear");
        carePlanClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carePlanClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(carePlanClearBtn, gridBagConstraints);

        actualNutriPrePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actual Nutrients Prescribed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 22, 230)));
        actualNutriPrePanel.setLayout(new java.awt.GridBagLayout());

        actualPROTTxt.setEditable(false);
        actualPROTTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PROT(gms)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(53, 39, 226)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        actualNutriPrePanel.add(actualPROTTxt, gridBagConstraints);

        actualCHOSTxt.setEditable(false);
        actualCHOSTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CHOS(gms)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(31, 38, 229)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        actualNutriPrePanel.add(actualCHOSTxt, gridBagConstraints);

        actualFATSTxt.setEditable(false);
        actualFATSTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FATS(gms)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(27, 62, 231)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        actualNutriPrePanel.add(actualFATSTxt, gridBagConstraints);

        actualKCALSTxt.setEditable(false);
        actualKCALSTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total KCALS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(24, 43, 236)));
        actualKCALSTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actualKCALSTxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        actualNutriPrePanel.add(actualKCALSTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inApproxNutriIntakePanel1.add(actualNutriPrePanel, gridBagConstraints);

        nutriRequirePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient's Nutrients Requirement", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(23, 34, 232)));
        nutriRequirePanel.setLayout(new java.awt.GridBagLayout());

        carePlanPROTLbl.setText("PROT(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanPROTLbl, gridBagConstraints);

        carePlanPROTTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        nutriRequirePanel.add(carePlanPROTTxt, gridBagConstraints);

        carePlanCHOSLbl.setText("CHOS(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanCHOSLbl, gridBagConstraints);

        carePlanCHOSTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        nutriRequirePanel.add(carePlanCHOSTxt, gridBagConstraints);

        carePlanFATSLbl.setText("FATS(gms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanFATSLbl, gridBagConstraints);

        carePlanFATSTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        nutriRequirePanel.add(carePlanFATSTxt, gridBagConstraints);

        carePlanFLUIDSLbl.setText("FLUIDS(mls)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanFLUIDSLbl, gridBagConstraints);

        carePlanFLUIDSTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        nutriRequirePanel.add(carePlanFLUIDSTxt, gridBagConstraints);

        carePlanKCALSTxt.setEditable(false);
        carePlanKCALSTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total KCALS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(24, 43, 236)));
        carePlanKCALSTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carePlanKCALSTxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanKCALSTxt, gridBagConstraints);

        carePlanRODLbl.setText("Route of Administration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanRODLbl, gridBagConstraints);

        carePlanRODTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        nutriRequirePanel.add(carePlanRODTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        inApproxNutriIntakePanel1.add(nutriRequirePanel, gridBagConstraints);

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient's Nutrients Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(40, 56, 224)));
        tablePanel.setLayout(new java.awt.GridBagLayout());

        carePlanValueScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carePlanValueScrollPaneMouseClicked(evt);
            }
        });

        carePlanValueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "TIME", "FEED", "AMOUNT(m/s)", "PROTEIN", "CHOS", "FATS", "CALORIES", "COMMIT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        carePlanValueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carePlanValueTableMouseClicked(evt);
            }
        });
        carePlanValueTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                carePlanValueTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                carePlanValueTableKeyReleased(evt);
            }
        });
        carePlanValueScrollPane.setViewportView(carePlanValueTable);
        carePlanValueTable.getColumnModel().getColumn(1).setPreferredWidth(350);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        tablePanel.add(carePlanValueScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 9.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(tablePanel, gridBagConstraints);

        oralPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient's Nutrients Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(40, 56, 224)));
        oralPanel.setLayout(new java.awt.GridBagLayout());

        oralCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "MEAL", "FEED", "AMOUNT", "PROT(gm)", "CHOS(gm)", "FAT(gm)", "CALORIES(kcal)", "COMMIT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        oralCTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oralCTableMouseClicked(evt);
            }
        });
        oralCTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                oralCTableKeyReleased(evt);
            }
        });
        javax.swing.table.TableColumn teditor = this.oralCTable.getColumn("MEAL");
        teditor.setCellEditor(new javax.swing.DefaultCellEditor(mealTimeCmbx));
        oralCarePlanScrollPane.setViewportView(oralCTable);
        oralCTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        oralCTable.getColumnModel().getColumn(1).setPreferredWidth(500);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        oralPanel.add(oralCarePlanScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 9.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        inApproxNutriIntakePanel1.add(oralPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        carePlanPanel.add(inApproxNutriIntakePanel1, gridBagConstraints);

        nutritionAssessmentTabbedPane.addTab("Patient Nutrient Requirement", carePlanPanel);

        nutritionSplitPane.setRightComponent(nutritionAssessmentTabbedPane);

        fillingPanel.setLayout(new java.awt.GridBagLayout());
        nutritionSplitPane.setLeftComponent(fillingPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nutritionAssessmentPanel.add(nutritionSplitPane, gridBagConstraints);

        nutriHomeSplitPane.setRightComponent(nutritionAssessmentPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        adultsNutritionAssessPanel.add(nutriHomeSplitPane, gridBagConstraints);

        nutritionHomeTabbedPane.addTab("Adults Feeding Regime", adultsNutritionAssessPanel);

        paedNutritionAssessPanel.setBackground(new java.awt.Color(204, 255, 204));
        paedNutritionAssessPanel.setLayout(new java.awt.GridBagLayout());

        paedNutriHomeSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        paedNutriHomeSplitPane.setEnabled(false);
        paedNutriHomeSplitPane.setFocusable(false);
        paedNutriHomeSplitPane.setRequestFocusEnabled(false);

        patientDetailsPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientDetailsPanel1.setForeground(new java.awt.Color(0, 0, 204));
        patientDetailsPanel1.setLayout(new java.awt.GridBagLayout());

        searchForPatientPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Here......", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(41, 41, 213)));
        searchForPatientPanel1.setLayout(new java.awt.GridBagLayout());

        paedNameNoLabel.setText("Patient No/Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        searchForPatientPanel1.add(paedNameNoLabel, gridBagConstraints);

        paedNameNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paedNameNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        paedNameNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedNameNoSearchPanel.add(paedNameNoTxt, gridBagConstraints);

        paedNameNoSearchBtn.setToolTipText("Search");
        paedNameNoSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        paedNameNoSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        paedNameNoSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        paedNameNoSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        paedNameNoSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedNameNoSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        paedNameNoSearchPanel.add(paedNameNoSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        searchForPatientPanel1.add(paedNameNoSearchPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        searchForPatientPanel1.add(jPanel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        searchForPatientPanel1.add(paedHeaderDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        patientDetailsPanel1.add(searchForPatientPanel1, gridBagConstraints);

        paedPatientDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patients Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(43, 43, 224)));
        paedPatientDetailsPanel.setForeground(new java.awt.Color(0, 0, 204));
        paedPatientDetailsPanel.setLayout(new java.awt.GridBagLayout());

        paedPatientDetailsTxa.setEditable(false);
        paedPatientDetailsTxa.setColumns(4);
        paedPatientDetailsTxa.setForeground(new java.awt.Color(255, 0, 0));
        paedPatientDetailsTxa.setLineWrap(true);
        paedPatientDetailsTxa.setRows(3);
        paedPatientDetailsTxa.setTabSize(5);
        paedPatientDetailsTxa.setText("\n");
        paedPatientDetailsTxa.setWrapStyleWord(true);
        paedPatientDetailsTxa.setAutoscrolls(false);
        paedPatientDetailsTxa.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane20.setViewportView(paedPatientDetailsTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientDetailsPanel.add(jScrollPane20, gridBagConstraints);

        reffDieNutrImpPanel1.setLayout(new java.awt.GridBagLayout());

        paedFRDietPrescrTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Diet Prescribed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 51, 255)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel1.add(paedFRDietPrescrTxt, gridBagConstraints);

        paedROACmbx.setEditable(true);
        paedROACmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Oral Administration", "Nasogastric Feeding", "Total Parenteral Nutrition (TPN)", "Peripheral Parenteral Nutrition (PPN)", "Central Parenteral Nutrition (CPN)" }));
        paedROACmbx.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Route of Administration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 51, 255)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        reffDieNutrImpPanel1.add(paedROACmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        paedPatientDetailsPanel.add(reffDieNutrImpPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        patientDetailsPanel1.add(paedPatientDetailsPanel, gridBagConstraints);

        paedNutriHomeSplitPane.setLeftComponent(patientDetailsPanel1);

        nutritionAssessmentPanel1.setLayout(new java.awt.GridBagLayout());

        nutritionSplitPane1.setDividerLocation(1);
        nutritionSplitPane1.setEnabled(false);
        nutritionSplitPane1.setFocusable(false);
        nutritionSplitPane1.setRequestFocusEnabled(false);

        nutritionAssessmentTabbedPane1.setForeground(new java.awt.Color(0, 102, 51));
        nutritionAssessmentTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        nutritionAssessmentTabbedPane1.setMinimumSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane1.setPreferredSize(new java.awt.Dimension(400, 300));
        nutritionAssessmentTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nutritionAssessmentTabbedPane1MouseClicked(evt);
            }
        });
        nutritionAssessmentTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nutritionAssessmentTabbedPane1StateChanged(evt);
            }
        });

        paedFamilyHistoryPanel.setLayout(new java.awt.GridBagLayout());

        familyHistoryPanel.setLayout(new java.awt.GridBagLayout());

        feedingInstruPanel.setLayout(new java.awt.GridBagLayout());

        feedingInstruTxa.setColumns(20);
        feedingInstruTxa.setRows(5);
        feedingInstruTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feeding Instructions:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 51, 204)));
        feedingInstruScrollPane.setViewportView(feedingInstruTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        feedingInstruPanel.add(feedingInstruScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        familyHistoryPanel.add(feedingInstruPanel, gridBagConstraints);

        paedFRTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feeding Regime Table for Paediatrics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 51, 204)));
        paedFRTablePanel.setLayout(new java.awt.GridBagLayout());

        paedFRTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "TIME", "TYPE OF FEED", "AMOUNT RECOMMENDED (MIs/gm)", "COMMIT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        paedFRTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paedFRTableMouseClicked(evt);
            }
        });
        paedFRTableScrollPane.setViewportView(paedFRTable);
        paedFRTable.getColumnModel().getColumn(1).setPreferredWidth(500);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        paedFRTablePanel.add(paedFRTableScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        familyHistoryPanel.add(paedFRTablePanel, gridBagConstraints);

        paedRegimeProvPanel.setLayout(new java.awt.GridBagLayout());

        paedRegimeProvTxa.setColumns(20);
        paedRegimeProvTxa.setRows(5);
        paedRegimeProvTxa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "This Regime Provides", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 51, 204)));
        paedRegimeProvScrollPane.setViewportView(paedRegimeProvTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        paedRegimeProvPanel.add(paedRegimeProvScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        familyHistoryPanel.add(paedRegimeProvPanel, gridBagConstraints);

        paedButtonPanel.setLayout(new java.awt.GridBagLayout());

        paedFRSVPbtn.setText("Save & Print");
        paedFRSVPbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFRSVPbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        paedButtonPanel.add(paedFRSVPbtn, gridBagConstraints);

        paedFRClearBtn.setText("Clear");
        paedFRClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFRClearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        paedButtonPanel.add(paedFRClearBtn, gridBagConstraints);

        paedFRRemoveBtn.setText("Remove");
        paedFRRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paedFRRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        paedButtonPanel.add(paedFRRemoveBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        familyHistoryPanel.add(paedButtonPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedFamilyHistoryPanel.add(familyHistoryPanel, gridBagConstraints);

        nutritionAssessmentTabbedPane1.addTab("Family History", paedFamilyHistoryPanel);

        nutritionSplitPane1.setRightComponent(nutritionAssessmentTabbedPane1);

        fillingPanel1.setLayout(new java.awt.GridBagLayout());
        nutritionSplitPane1.setLeftComponent(fillingPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nutritionAssessmentPanel1.add(nutritionSplitPane1, gridBagConstraints);

        paedNutriHomeSplitPane.setRightComponent(nutritionAssessmentPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paedNutritionAssessPanel.add(paedNutriHomeSplitPane, gridBagConstraints);

        nutritionHomeTabbedPane.addTab("Paediatrics Feeding Regime", paedNutritionAssessPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(nutritionHomeTabbedPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   

    

    private String getAge(int yr, int month, int day) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy MM dd");
        int dateParts[] = {Calendar.YEAR, Calendar.MONTH, Calendar.DAY_OF_MONTH};
        Calendar today = Calendar.getInstance();
        Calendar birthday = Calendar.getInstance();
        birthday.set(yr, month, day); //months are 0-based  
        if (today.before(birthday)) {
            System.out.println("birthday invalid - date after today, exiting");
            System.exit(0);
        }
        int diff[] = new int[3];
        for (int i = 2; i >= 0; i--) {
            while (!sdf.format(birthday.getTime()).split(" ")[i].equals(sdf.format(today.getTime()).split(" ")[i])) {
                birthday.add(dateParts[i], 1);
                diff[i]++;
            }
        }
        String difference = "" + (diff[0] + " yrs : " + diff[1]) + " mths : " + diff[2] + " days";
        years = diff[0];
        months = diff[1];
        days = diff[2];
        System.out.println(years + " " + months + " " + days);
        return difference;
    }

    private void nameNoSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameNoSearchBtnActionPerformed
        patientSearchButtonClicked();
    }//GEN-LAST:event_nameNoSearchBtnActionPerformed
               

    private void patientSearchButtonClicked() {

        System.out.println("Showing dialog");
        
        java.awt.Point point = this.nameNoTxt.getLocationOnScreen();

        patientSearch.setSize(400, 200);

        patientSearch.setLocation(point);

        patientSearch.setVisible(true);

    }
    
    private void patientPaedSearchButtonClicked() {

        System.out.println("Showing dialog");
        
        java.awt.Point point = this.paedNameNoTxt.getLocationOnScreen();

        paedPatientSearch.setSize(400, 200);

        paedPatientSearch.setLocation(point);

        paedPatientSearch.setVisible(true);

    }
    
    private void patientDiagnosisSearchButtonClicked() {

        System.out.println("Showing Diagnosis Search Dialog");
        
        java.awt.Point point = this.dieaseaseSearchTxt.getLocationOnScreen();

        patientDiagnosisSearch.setSize(400, 200);

        patientDiagnosisSearch.setLocation(point);

        patientDiagnosisSearch.setVisible(true);

    }    
    
    
    private void feedingSearchButtonClicked() {        
               
        System.out.println("Showing Feeding Others Feed Search Dialog");
        
        java.awt.Point point = this.carePlanValueScrollPane.getLocationOnScreen();
        
        feedingRegimeFoodSearchDialog1.setSize(400, 200);

        feedingRegimeFoodSearchDialog1.setLocation(point);

        feedingRegimeFoodSearchDialog1.setVisible(true);

    }
    
    private void feedingOralSearchButtonClicked() {
        
        System.out.println("Showing Feeding Oral Feed Search Dialog");
            
        java.awt.Point point = this.oralCarePlanScrollPane.getLocationOnScreen();                
            
        feedingRegimeFoodSearchDialog.setSize(400, 200);

        feedingRegimeFoodSearchDialog.setLocation(point);

        feedingRegimeFoodSearchDialog.setVisible(true);

    }
    
    private void feedingPaedSearchButtonClicked() {

        System.out.println("Showing Feeding Search Dialog");
        
        java.awt.Point point = this.paedFRTableScrollPane.getLocationOnScreen();

        paedFRFSearchDialog.setSize(400, 200);

        paedFRFSearchDialog.setLocation(point);

        paedFRFSearchDialog.setVisible(true);

    }
    private void searchPatientNumbTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchPatientNumbTxtCaretUpdate
        if (searchPatientNumbTxt.getCaretPosition() < 3) {
            System.out.println("Nothing...");
        } else {
            patientDetailsTxa.setText("");

            patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT patient_no, patient_name FROM hp_admission "
                    + "WHERE patient_no ILIKE '%"+searchPatientNumbTxt.getText()+"%' "
                    + "OR patient_name ILIKE '%"+searchPatientNumbTxt.getText()+"%'"
                    + "AND discharge = false ORDER BY patient_no"));

            patientSearchTable.setShowHorizontalLines(false);
            patientSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            patientSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            patientSearchScrollPane.setViewportView(patientSearchTable);
        }
        
    }//GEN-LAST:event_searchPatientNumbTxtCaretUpdate
    private String populateBioData(String patient_num) {
        String text = null, height = "Unknown", weight = "Unknown", dateD = "Not Set", diagnosis = "Unknown";
        try {
                connectDB.setAutoCommit(false);

                //About to Get the Patient Details
                java.sql.Statement stm = connectDB.createStatement();
                java.sql.ResultSet rse = stm.executeQuery(
                        "SELECT height, weight, "
                        + "date_part('day', now()::date) ||'-'||date_part('month', now()::date) ||'-'||date_part('year', now()::date), "
                        + "diagnosis FROM nutrition.nutr_patient_antro_measures "
                        + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' ");

                while (rse.next()) {

                    //Getting the user's Gender
                    height = rse.getObject(1).toString().trim().toLowerCase(); 
                    weight = rse.getObject(2).toString().trim().toLowerCase(); 
                    dateD = rse.getObject(3).toString().trim().toLowerCase(); 
                    diagnosis = rse.getObject(4).toString().trim(); 
                }
                
                dieaseaseSearchTxt.setText(diagnosis);
                
                if (dieaseaseSearchTxt.getText().equals("")) {
                    deseaseSearchBtn.setEnabled(true);
                } else {
                    deseaseSearchBtn.setEnabled(false);
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (final Exception es) {
                System.out.println(es);

            }
        
        
        try {
            connectDB.setAutoCommit(false);
            
            //About to Get the Patient Details
            
            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.ResultSet rse12 = stm12.executeQuery(
                    "SELECT patient_no, patient_name, gender, reffered_from,"
                    + " date_admitted, ward, diagnosis1, diagnosis2, diagnosis3, pat_age FROM hp_admission "
                    + "WHERE patient_no='" + patient_num + "' "
                    + "AND discharge = false ");
            
            while (rse12.next()) {
                
                ///Getting the user's Details;

                text = "OP/IP No. ".concat(rse12.getObject(1).toString()) + 
                        "\nName ".concat(rse12.getObject(2).toString()) + 
                        "\nAge: ".concat(rse12.getObject(10).toString()) + 
                        "     WT: ".concat(weight +" Kgs"+
                        "     HT: ".concat(height +" m"+
                        "\nDate : ".concat(dateD)));
                
                gender = rse12.getObject(3).toString();
                patient_name = rse12.getObject(2).toString();
                ward = rse12.getObject(6).toString();

                String title = ward + "                                 (" + rse12.getObject(2).toString().concat("  ---  ").
                        concat(patient_num).concat(")");
                
                
                                 
                
                this.setTitle(title);
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }
        
        String prot = "Unspecified", chos = "Unspecified", fats = "Unspecified", fluids = "Unspecified";
        String kcals = "Unspecified", route_of_administration = "Unspecified"; 
        
        try {
                connectDB.setAutoCommit(false);

                //About to Get the Patient Details
                java.sql.Statement stm2 = connectDB.createStatement();
                java.sql.ResultSet rse2 = stm2.executeQuery(
                        "SELECT prot, chos, fats, fluids, kcals, route_of_administration "
                        + "FROM nutrition.nutr_patient_care_plan "
                        + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' ");

                while (rse2.next()) {

                    //Getting the user's Gender
                    prot = rse2.getObject(1).toString(); 
                    chos = rse2.getObject(2).toString(); 
                    fats = rse2.getObject(3).toString(); 
                    fluids = rse2.getObject(4).toString(); 
                    kcals = rse2.getObject(5).toString(); 
                    route_of_administration = rse2.getObject(6).toString(); 
                }
                
                carePlanPROTTxt.setText(prot);
                carePlanCHOSTxt.setText(chos);
                carePlanFATSTxt.setText(fats);
                carePlanFLUIDSTxt.setText(fluids);
                carePlanKCALSTxt.setText(kcals);
                carePlanRODTxt.setText(route_of_administration);
                
                if (carePlanRODTxt.getText().equals("Oral Administration")) {
                    tablePanel.setVisible(false);
                    oralPanel.setVisible(true);
                } else {
                    oralPanel.setVisible(false);
                    tablePanel.setVisible(true);
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (final Exception es) {
                System.out.println(es);

            }
        
        
        return text;
    }
    
    private String populatePaedBioData(String patient_num) {
        String text = null, birth_wt = "Unknown", adm_wt = "Unknown", dateD = "Not Set";
        try {
                connectDB.setAutoCommit(false);

                //About to Get the Patient Details
                java.sql.Statement stm = connectDB.createStatement();
                java.sql.ResultSet rse = stm.executeQuery(
                        "SELECT birth_wt, adm_wt, "
                        + "date_part('day', now()::date) ||'-'||date_part('month', now()::date) ||'-'||date_part('year', now()::date) "
                        + "FROM nutrition.nutr_paed_anthro_assessement "
                        + "WHERE patient_no='" + paedNameNoTxt.getText().toString().trim() + "' ");

                while (rse.next()) {

                    //Getting the user's Gender
                    birth_wt = rse.getObject(1).toString().trim().toLowerCase(); 
                    adm_wt = rse.getObject(2).toString().trim().toLowerCase(); 
                    dateD = rse.getObject(3).toString().trim().toLowerCase(); 
                }
                
                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (final Exception es) {
                System.out.println(es);

            }
        
        
        try {
            connectDB.setAutoCommit(false);
            
            //About to Get the Patient Details
            
            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.ResultSet rse12 = stm12.executeQuery(
                    "SELECT patient_no, patient_name, gender, reffered_from,"
                    + " date_admitted, ward, diagnosis1, diagnosis2, diagnosis3, pat_age FROM hp_admission "
                    + "WHERE patient_no='" + paedNameNoTxt.getText().toString().trim() + "' "
                    + "AND discharge = false ");
            
            while (rse12.next()) {
                
                ///Getting the user's Details;
                gender = rse12.getObject(3).toString();
                patient_name = rse12.getObject(2).toString();
                ward = rse12.getObject(6).toString();

                text = "Patient's Name ".concat(rse12.getObject(2).toString()) + 
                        "\nIP No. ".concat(rse12.getObject(1).toString()) + 
                        "\nDOA. ".concat(rse12.getObject(5).toString()) + 
                        "\nAge: ".concat(rse12.getObject(10).toString()) + 
                        "     BWT: ".concat(birth_wt +" Kg"+
                        "     CWT: ".concat(adm_wt +" Kg"+
                        "\nSex : ".concat(gender)+
                        "\nWD/Unit : ".concat(ward)+
                        "\nDate : ".concat(dateD)));                
                

                String title = ward + "                                 (" + rse12.getObject(2).toString().concat("  ---  ").
                        concat(paedNameNoTxt.getText().toString().trim()).concat(")");
                
                
                                 
                
                this.setTitle(title);
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }     
        
        return text;
    }
    
    private void patientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseClicked

        nameNoTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString());
        String title = "                           (" + patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0)
                .toString().concat("    ").
                concat(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 1).toString()).concat(")");
        this.setTitle(title);

        patientDetailsTxa.setForeground(Color.BLUE);
        patientDetailsTxa.setText(populateBioData(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString()));
        
        
        patientSearch.dispose();
    }//GEN-LAST:event_patientSearchTableMouseClicked

    private void patientSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSearchBtnActionPerformed
        this.patientSearch.dispose();
    }//GEN-LAST:event_patientSearchBtnActionPerformed
     
    
    
    

        

        
    private void searchPatientNumbTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatientNumbTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchPatientNumbTxtActionPerformed
    
    private void nutritionAssessmentTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPaneStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionAssessmentTabbedPaneStateChanged

    private void nutritionAssessmentTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPaneMouseClicked
        
    }//GEN-LAST:event_nutritionAssessmentTabbedPaneMouseClicked

    private void deseaseSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deseaseSearchBtnActionPerformed
        System.out.println("About to Search the Patient's Diagnosis");
        if (nameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient First!!!", "Missing Patient Number", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Searching the Patient's Diagnosis");
            patientDiagnosisSearchButtonClicked();            
        }
    }//GEN-LAST:event_deseaseSearchBtnActionPerformed

    private void paedNameNoSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedNameNoSearchBtnActionPerformed
        patientPaedSearchButtonClicked();
    }//GEN-LAST:event_paedNameNoSearchBtnActionPerformed

    private void patientDiagnosisSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchTxtCaretUpdate
        if (patientDiagnosisSearchTxt.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {        
            patientDiagnosisSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT code, disease_name FROM hp_diseases  "
                    + "WHERE code ILIKE '%"+patientDiagnosisSearchTxt.getText()+"%' "
                    + "OR disease_name ILIKE '%"+patientDiagnosisSearchTxt.getText()+"%'"
                    + " ORDER BY disease_name"));

            patientDiagnosisSearchTable.setShowHorizontalLines(false);
            patientDiagnosisSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            patientDiagnosisSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            patientDiagnosisSearchScrollPane.setViewportView(patientDiagnosisSearchTable);
        }
    }//GEN-LAST:event_patientDiagnosisSearchTxtCaretUpdate

    private void patientDiagnosisSearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientDiagnosisSearchTxtActionPerformed

    private void patientDiagnosisSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchTableMouseClicked
        dieaseaseSearchTxt.setText(patientDiagnosisSearchTable.getValueAt(patientDiagnosisSearchTable.getSelectedRow(), 1).toString());
        
        dieaseaseSearchTxt.setForeground(Color.BLUE);
        patientDiagnosisSearch.dispose();
    }//GEN-LAST:event_patientDiagnosisSearchTableMouseClicked

    private void patientDiagnosisSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientDiagnosisSearchBtnActionPerformed
        this.patientDiagnosisSearch.dispose();
    }//GEN-LAST:event_patientDiagnosisSearchBtnActionPerformed

    private void searchPaedPatientNumbTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchPaedPatientNumbTxtCaretUpdate
        if (searchPaedPatientNumbTxt.getCaretPosition() < 3) {
            System.out.println("Nothing...");
        } else {
            paedPatientDetailsTxa.setText("");

            patientPaedSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT patient_no, patient_name FROM hp_admission "
                    + "WHERE patient_no ILIKE '%"+searchPaedPatientNumbTxt.getText()+"%' "
                    + "OR patient_name ILIKE '%"+searchPaedPatientNumbTxt.getText()+"%'"
                    + "AND discharge = false ORDER BY patient_no"));

            patientPaedSearchTable.setShowHorizontalLines(false);
            patientPaedSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            patientPaedSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            patientPaedSearchScrollPane.setViewportView(patientPaedSearchTable);
        }
    }//GEN-LAST:event_searchPaedPatientNumbTxtCaretUpdate

    private void searchPaedPatientNumbTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPaedPatientNumbTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchPaedPatientNumbTxtActionPerformed

    private void patientPaedSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientPaedSearchTableMouseClicked
        paedNameNoTxt.setText(patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 0).toString());
        String title = "                           (" + patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 0)
                .toString().concat("    ").
                concat(patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 1).toString()).concat(")");
        this.setTitle(title);

        paedPatientDetailsTxa.setForeground(Color.BLUE);
        paedPatientDetailsTxa.setText(populatePaedBioData(patientPaedSearchTable.getValueAt(patientPaedSearchTable.getSelectedRow(), 0).toString()));        
              
        paedPatientSearch.dispose();
    }//GEN-LAST:event_patientPaedSearchTableMouseClicked

    private void patientPaedSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientPaedSearchBtnActionPerformed
        this.paedPatientSearch.dispose();
    }//GEN-LAST:event_patientPaedSearchBtnActionPerformed

    private void nutritionHomeTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nutritionHomeTabbedPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionHomeTabbedPaneMouseClicked

    private void carePlanClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carePlanClearBtnActionPerformed
        ClearCarePlanFields();
    }//GEN-LAST:event_carePlanClearBtnActionPerformed

    private void carePlanRemovebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carePlanRemovebtnActionPerformed
        Date date = new Date();
        SimpleDateFormat simpDate;

        simpDate = new SimpleDateFormat("kk:mm:ss");
        System.out.println(simpDate.format(date));
        
        nameNoLabel.setForeground(Color.BLACK);
        if (nameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient",
                JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            nameNoLabel.setForeground(Color.red);
        } else {
            
            if (oralCarePlanScrollPane.isShowing()) {
                    int rows2Delete = oralCTable.getSelectedRowCount();

                    int[] selectedRows = oralCTable.getSelectedRows();

                    if (rows2Delete < 1) {

                        System.out.println("No row/s selected.");

                        java.awt.Toolkit.getDefaultToolkit().beep();
                        javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

                    } else {

                        if (rows2Delete > 1) {
                            System.out.println("Many rows selected.");

                            JOptionPane.showMessageDialog(carePlanPanel, "You have to delete one row at a time.",
                                        "Delete One Row.", JOptionPane.INFORMATION_MESSAGE);

        //                    for (int k = 0; k < carePlanValueTable.getRowCount(); k++) {
        //                        for (int r = 0; r < carePlanValueTable.getColumnCount(); r++) {
        //                            carePlanValueTable.setValueAt(null, k, r);
        //                        }
        //                    }

                        } else {
                            System.out.println("One row selected.");

                            if (oralCTable.getValueAt(oralCTable.getSelectedRow(), 0) == null 
                                      || oralCTable.getValueAt(oralCTable.getSelectedRow(), 1) == null
                                      || oralCTable.getValueAt(oralCTable.getSelectedRow(), 2) == null
                                      || oralCTable.getValueAt(oralCTable.getSelectedRow(), 3) == null
                                      || oralCTable.getValueAt(oralCTable.getSelectedRow(), 4) == null
                                      || oralCTable.getValueAt(oralCTable.getSelectedRow(), 5) == null
                                      || oralCTable.getValueAt(oralCTable.getSelectedRow(), 6) == null) {

                                  JOptionPane.showMessageDialog(carePlanPanel, "Some values in the - (Selected Row) are missing.", 
                                          "Missing Values.", JOptionPane.ERROR_MESSAGE);
                                  oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);

                              } else {

                                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)
                                oralCTable.getModel();


                                try {
                                    connectDB.setAutoCommit(false);

                                    int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?",
                                        "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);

                                    if (a == 0) {

                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_patient_oral_feeding_regime"
                                            + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"' "
                                            + " AND meal = '"+oralCTable.getValueAt(oralCTable.getSelectedRow(), 0).toString()+"'"
                                            + " AND feed = '"+oralCTable.getValueAt(oralCTable.getSelectedRow(), 1).toString()+"'"
                                            + " AND t_prot = '"+oralCTable.getValueAt(oralCTable.getSelectedRow(), 3).toString()+"'"
                                            + " AND t_cho = '"+oralCTable.getValueAt(oralCTable.getSelectedRow(), 4).toString()+"'"
                                            + " AND t_cal = '"+oralCTable.getValueAt(oralCTable.getSelectedRow(), 6).toString()+"' "
                                            + " AND date = '"+headerDatePicker.getDate().toLocaleString()+"'");

                                        pstmt.executeUpdate();
                                        connectDB.commit();
                                        connectDB.setAutoCommit(true);

                                        oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);  



                                        Double t_prot = 0.00, t_cho = 0.00, t_fats = 0.00, t_cal = 0.00;
                                        String tprot = "0.00", tcho = "0.00", tfats = "0.00", tcal = "0.00";

                                        try {
                                                connectDB.setAutoCommit(false);

                                                //About to Get the Patient Details
                                                java.sql.Statement stm25 = connectDB.createStatement();
                                                java.sql.ResultSet rse25 = stm25.executeQuery(
                                                        "SELECT t_prot, t_cho, t_fats, t_cal "
                                                        + "FROM nutrition.nutr_patient_feeding_regime "
                                                        + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' "
                                                        + "AND date = '"+headerDatePicker.getDate().toLocaleString().trim()+"' "
                                                        + "AND time BETWEEN '"+oralCTable.getValueAt(0, 0).toString().toString()+"' "
                                                        + "AND '"+date+"' ");

                                                while (rse25.next()) {

                                                    //Getting the user's Gender
                                                    tprot = rse25.getObject(1).toString(); 
                                                    tcho = rse25.getObject(2).toString();  
                                                    tfats = rse25.getObject(3).toString(); 
                                                    tcal = rse25.getObject(4).toString(); 

                                                    t_prot += Double.valueOf(tprot);
                                                    t_cho += Double.valueOf(tcho);
                                                    t_fats += Double.valueOf(tfats);
                                                    t_cal += Double.valueOf(tcal);
                                                }

                                                actualPROTTxt.setText(Double.toString(t_prot));
                                                actualCHOSTxt.setText(Double.toString(t_cho));
                                                actualFATSTxt.setText(Double.toString(t_fats));
                                                actualKCALSTxt.setText(Double.toString(t_cal));


                                                connectDB.commit();
                                                connectDB.setAutoCommit(true);
                                            } catch (final Exception es) {
                                                System.out.println(es);

                                            }        

                                        defTableModel.removeRow(oralCTable.getSelectedRow());

                                        System.out.print("\nDelete success.");
                                        JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and "
                                            + "removed successfully. ",
                                            "Delete success.", JOptionPane.INFORMATION_MESSAGE);

                                    } else {
                                        JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.",
                                            "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                                    }


                            } catch (java.lang.Exception sq) {

                                try {
                                    connectDB.rollback();
                                } catch (java.sql.SQLException sql) {
                                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                }
                                System.out.println("Ati What? ---> "+sq.getMessage());
                                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }

                            }                    

                    }
                }
            } else {
                int rows2Delete = carePlanValueTable.getSelectedRowCount();

                int[] selectedRows = carePlanValueTable.getSelectedRows();

                if (rows2Delete < 1) {

                    System.out.println("No row/s selected.");

                    java.awt.Toolkit.getDefaultToolkit().beep();
                    javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

                } else {

                    if (rows2Delete > 1) {
                        System.out.println("Many rows selected.");

                        JOptionPane.showMessageDialog(carePlanPanel, "You have to delete one row at a time.",
                                    "Delete One Row.", JOptionPane.INFORMATION_MESSAGE);

    //                    for (int k = 0; k < carePlanValueTable.getRowCount(); k++) {
    //                        for (int r = 0; r < carePlanValueTable.getColumnCount(); r++) {
    //                            carePlanValueTable.setValueAt(null, k, r);
    //                        }
    //                    }

                    } else {
                        System.out.println("One row selected.");

                        if (carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 0) == null 
                                  || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 1) == null
                                  || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2) == null
                                  || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 3) == null
                                  || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 4) == null
                                  || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 5) == null
                                  || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 6) == null) {

                              JOptionPane.showMessageDialog(carePlanPanel, "Some values in the - (Selected Row) are missing.", 
                                      "Missing Values.", JOptionPane.ERROR_MESSAGE);
                              carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);

                          } else {

                            javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)
                            carePlanValueTable.getModel();


                            try {
                                connectDB.setAutoCommit(false);

                                int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?",
                                    "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);

                                if (a == 0) {

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_patient_feeding_regime"
                                        + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"' "
                                        + " AND time = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 0).toString()+"'"
                                        + " AND feed = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 1).toString()+"'"
                                        + " AND t_prot = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 3).toString()+"'"
                                        + " AND t_cho = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 4).toString()+"'"
                                        + " AND t_cal = '"+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 6).toString()+"' "
                                        + " AND date = '"+headerDatePicker.getDate().toLocaleString()+"'");

                                    pstmt.executeUpdate();
                                    connectDB.commit();
                                    connectDB.setAutoCommit(true);

                                    carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);  



                                    Double t_prot = 0.00, t_cho = 0.00, t_fats = 0.00, t_cal = 0.00;
                                    String tprot = "0.00", tcho = "0.00", tfats = "0.00", tcal = "0.00";

                                    try {
                                            connectDB.setAutoCommit(false);

                                            //About to Get the Patient Details
                                            java.sql.Statement stm25 = connectDB.createStatement();
                                            java.sql.ResultSet rse25 = stm25.executeQuery(
                                                    "SELECT t_prot, t_cho, t_fats, t_cal "
                                                    + "FROM nutrition.nutr_patient_feeding_regime "
                                                    + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' "
                                                    + "AND date = '"+headerDatePicker.getDate().toLocaleString().trim()+"' "
                                                    + "AND time BETWEEN '"+carePlanValueTable.getValueAt(0, 0).toString().toString()+"' "
                                                    + "AND '"+date+"' ");

                                            while (rse25.next()) {

                                                //Getting the user's Gender
                                                tprot = rse25.getObject(1).toString(); 
                                                tcho = rse25.getObject(2).toString();  
                                                tfats = rse25.getObject(3).toString(); 
                                                tcal = rse25.getObject(4).toString(); 

                                                t_prot += Double.valueOf(tprot);
                                                t_cho += Double.valueOf(tcho);
                                                t_fats += Double.valueOf(tfats);
                                                t_cal += Double.valueOf(tcal);
                                            }

                                            actualPROTTxt.setText(Double.toString(t_prot));
                                            actualCHOSTxt.setText(Double.toString(t_cho));
                                            actualFATSTxt.setText(Double.toString(t_fats));
                                            actualKCALSTxt.setText(Double.toString(t_cal));


                                            connectDB.commit();
                                            connectDB.setAutoCommit(true);
                                        } catch (final Exception es) {
                                            System.out.println(es);

                                        }        

                                    defTableModel.removeRow(carePlanValueTable.getSelectedRow());

                                    System.out.print("\nDelete success.");
                                    JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and "
                                        + "removed successfully. ",
                                        "Delete success.", JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.",
                                        "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                                }


                        } catch (java.lang.Exception sq) {

                            try {
                                connectDB.rollback();
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            System.out.println("Ati What? ---> "+sq.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }

                        }                    

                }
            }
            }
            
        }
    }//GEN-LAST:event_carePlanRemovebtnActionPerformed

    private void carePlanOKbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carePlanOKbtnActionPerformed
        nameNoLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK);
        carePlanCHOSLbl.setForeground(Color.BLACK);
        carePlanFATSLbl.setForeground(Color.BLACK);
        carePlanFLUIDSLbl.setForeground(Color.BLACK);
                

        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
            || carePlanKCALSTxt.getText().equals("") || carePlanFLUIDSTxt.getText().equals("") 
            || carePlanRMFPTxa.getText().equals("") || actualKCALSTxt.getText().equals("")) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.",
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient's Principle Diagnosis.",
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanFLUIDSTxt.getText().equals("")) {
                carePlanFLUIDSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, if any the 'FLUIDS' Field.",
                    "\nMissing Entries Noted - FLUIDS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill, the KCALS field by clicking on it.",
                    "\nMissing Entries Noted - KCALS", JOptionPane.INFORMATION_MESSAGE);
            } else if (actualKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the patient's nutrient table and commit the values to proceed.",
                    "\nMissing Entries Noted - Patient Nutrient Table", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanRMFPTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Please fill the (Remarks and Future Plan) field. ",
                    "Missing Entries Noted - Remarks and Future Plan.", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ",
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            if ((Double.valueOf(carePlanPROTTxt.getText().toString()) - Double.valueOf(actualPROTTxt.getText().toString())) < 0.00 
                    || (Double.valueOf(carePlanCHOSTxt.getText().toString()) - Double.valueOf(actualCHOSTxt.getText().toString())) < 0.00
                    || (Double.valueOf(carePlanFATSTxt.getText().toString()) - Double.valueOf(actualFATSTxt.getText().toString())) < 0.00
                    || (Double.valueOf(carePlanKCALSTxt.getText().toString()) - Double.valueOf(actualKCALSTxt.getText().toString())) < 0.00) {
                
                JOptionPane.showMessageDialog(carePlanPanel, "The Actual Nutrient Prescribed  Values should not exceed those Recommended. "
                        + "\nPlease recheck and calculate.",
                    "Nutrient Values.", JOptionPane.ERROR_MESSAGE);  
                
                
                
            } else {
                
                System.out.print("About to insert the values.!!!");
            
                String prot = "0.00", chos = "0.00", fats = "0.00", kcals = "0.00";

                try {
                        connectDB.setAutoCommit(false);

                        //About to Get the Patient Details
                        System.out.println("About to Get the Patient Details \n");

                        java.sql.Statement stm2 = connectDB.createStatement();
                        java.sql.ResultSet rse2 = stm2.executeQuery(
                                "SELECT prot, chos, fats, kcals "
                                + "FROM nutrition.nutr_patient_care_plan "
                                + "WHERE patient_no ILIKE '" + nameNoTxt.getText().toString().trim() + "' ");

                        System.out.println("Just before the Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                        while (rse2.next()) {

                            //Getting the user's Gender
                            prot = rse2.getObject(1).toString(); 
                            chos = rse2.getObject(2).toString();  
                            fats = rse2.getObject(3).toString(); 
                            kcals = rse2.getObject(4).toString(); 

                            System.out.println("Withing Loop .\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                        }

                        System.out.println("Outside Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);                



                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                } catch (final Exception es) {
                    System.out.println(es);

                }

                try {
                        connectDB.setAutoCommit(false);

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE nutrition.nutr_patient_care_plan"
                                + " SET prot = '"+(Double.valueOf(prot) - (Double.valueOf(actualPROTTxt.getText().toString())))+"'"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND prot = '"+prot+"'");

                            pstmt.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nProt Update success.");

                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("UPDATE nutrition.nutr_patient_care_plan"
                                + " SET chos = '"+(Double.valueOf(chos) - (Double.valueOf(actualCHOSTxt.getText().toString())))+"'"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND chos = '"+chos+"'");

                            pstmt1.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nChos Update success.");

                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("UPDATE nutrition.nutr_patient_care_plan"
                                + " SET fats = '"+(Double.valueOf(fats) - (Double.valueOf(actualFATSTxt.getText().toString())))+"'"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND prot = '"+fats+"'");

                            pstmt2.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nFats Update success.");

                        java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE nutrition.nutr_patient_care_plan"
                                + " SET kcals = '"+(Double.valueOf(kcals) - (Double.valueOf(actualKCALSTxt.getText().toString())))+"'"
                                + " WHERE patient_no = '"+nameNoTxt.getText().toString().trim()+"'"
                                + " AND kcals = '"+kcals+"'");

                            pstmt3.executeUpdate();
                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            System.out.print("\nKcals Update success.");
                            JOptionPane.showMessageDialog(carePlanPanel, "The data saved successfully. ", 
                                "Save success.", JOptionPane.INFORMATION_MESSAGE);
        
                            PrintPatientsRegimeForm();
                            

                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                
            }

        }
    }//GEN-LAST:event_carePlanOKbtnActionPerformed

    private void carePlanKCALSTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carePlanKCALSTxtMouseClicked
        nameNoLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK);
        carePlanCHOSLbl.setForeground(Color.BLACK);
        carePlanFATSLbl.setForeground(Color.BLACK);
        carePlanFLUIDSLbl.setForeground(Color.BLACK);

        if (nameNoTxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", "Empty Patient Number", JOptionPane.INFORMATION_MESSAGE);
            nameNoLabel.setForeground(Color.red);
        } else {
            if (carePlanPROTTxt.getText().equals("") || carePlanCHOSTxt.getText().equals("") || carePlanFATSTxt.getText().equals("")) {
                java.awt.Toolkit.getDefaultToolkit().beep();

                if (carePlanPROTTxt.getText().equals("")) {
                    carePlanPROTLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that PROT is filled.",
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                } else if (carePlanCHOSTxt.getText().equals("")) {
                    carePlanCHOSLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that CHOS is filled.",
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                } else if (carePlanFATSTxt.getText().equals("")) {
                    carePlanFATSLbl.setForeground(Color.red);
                    JOptionPane.showMessageDialog(carePlanPanel, "Ensure that FATS is filled.",
                        "Empty Filleds Noted", JOptionPane.INFORMATION_MESSAGE);
                }

            } else {
                if (carePlanPROTTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$") && carePlanCHOSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                    && carePlanFATSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {

                    double p = 0.00, c = 0.00, f= 0.00, r = 0.00;
                    p = Double.valueOf(carePlanPROTTxt.getText().toString());
                    c = Double.valueOf(carePlanCHOSTxt.getText().toString());
                    f = Double.valueOf(carePlanFATSTxt.getText().toString());

                    r = ((p*4)+(c*4)+(f*9));

                    carePlanKCALSTxt.setText(Double.toString(Math.round(r)));

                    System.out.println("PROT - "+p);
                    System.out.println("CHOS - "+c);
                    System.out.println("FATS - "+f);
                    System.out.println("Results - "+r);
                } else {
                    java.awt.Toolkit.getDefaultToolkit().beep();

                    if (!carePlanPROTTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        carePlanPROTLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at PROT(gms) - "
                            +carePlanPROTTxt.getText()+"! ",
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else if (!carePlanCHOSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        carePlanCHOSLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at CHOS(gms) - "
                            +carePlanCHOSTxt.getText()+"! ",
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else if (!carePlanFATSTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                        carePlanFATSLbl.setForeground(Color.red);
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted at FATS(gms) - "
                            +carePlanFATSTxt.getText()+"! ",
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(carePlanPanel, "Unrecognized Value has been noted! ",
                            "Unrecognized Values Noted", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_carePlanKCALSTxtMouseClicked

    private void actualKCALSTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualKCALSTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_actualKCALSTxtMouseClicked

    private void carePlanValueScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carePlanValueScrollPaneMouseClicked
        
    }//GEN-LAST:event_carePlanValueScrollPaneMouseClicked

    private void carePlanValueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carePlanValueTableMouseClicked
        Date date = new Date();
        SimpleDateFormat simpDate;

        simpDate = new SimpleDateFormat("kk:mm:ss");
        System.out.println(simpDate.format(date));
        
        nameNoLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK); 
        carePlanCHOSLbl.setForeground(Color.BLACK); 
        carePlanFATSLbl.setForeground(Color.BLACK); 
        carePlanFLUIDSLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || carePlanPROTTxt.getText().equals("") || carePlanCHOSTxt.getText().equals("") 
                 || carePlanKCALSTxt.getText().equals("") || carePlanFLUIDSTxt.getText().equals("") 
                 || carePlanFATSTxt.getText().equals("")  || carePlanRODTxt.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the Patient's Diagnosis will be populated.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanPROTTxt.getText().equals("")) {
                carePlanPROTLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'PROTS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanCHOSTxt.getText().equals("")) {
                carePlanCHOSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'CHOS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanFATSTxt.getText().equals("")) {
                carePlanFATSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FATS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanFLUIDSTxt.getText().equals("")) {
                carePlanFLUIDSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FLUIDS' Field will be populated.", 
                    "\nMissing Entries Noted - FLUIDS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'KCALS' Field will be populated.", 
                    "\nMissing Entries Noted - KCALS", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
              if (carePlanValueTable.getSelectedColumn() == 0) {
                  System.out.println("About to show the time chooser.");
                  TimeChooser dlg = new TimeChooser(new testing(), true);
                  dlg.setLocation(400, 350);
                  dlg.setVisible(true);
                  
                  carePlanValueTable.setValueAt(dlg.getHHMM(), carePlanValueTable.getSelectedRow(), 0);
                  System.out.println("Time should have been set");
              } else if (carePlanValueTable.getSelectedColumn() == 1) {
                  System.out.println("About to set the feed.");
                  
                  feedingSearchButtonClicked();
                  
                  
              } else if (carePlanValueTable.getSelectedColumn() == 7) {
                  if (carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 7) == Boolean.TRUE) {
                      System.out.println("TRUE");
                      
                      if (carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 0) == null 
                              || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 1) == null
                              || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2) == null
                              || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 3) == null
                              || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 4) == null
                              || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 5) == null
                              || carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 6) == null) {
                          
                          JOptionPane.showMessageDialog(carePlanPanel, "Some values in the - (Selected Row) are missing.", 
                                  "Missing Values.", JOptionPane.ERROR_MESSAGE);
                          carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);
                          
                      } else {
                          if ( carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 3).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                              && carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 4).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                              && carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 5).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                              && carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 6).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                              
                              System.out.print("About to insert the values.!!!");

                          int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to commit the selected row?", 
                                    "Data Commiting.", JOptionPane.YES_NO_CANCEL_OPTION);

                            if (a == 0) {
                                
                                try {
                                    connectDB.setAutoCommit(false);

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_patient_feeding_regime "
                                            + "(patient_no, date, diagnosis, time, feed, amount, t_prot, t_cho, t_fats, t_cal) "
                                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                                        pstmt.setString(1, nameNoTxt.getText().toString().trim());
                                        pstmt.setString(2, headerDatePicker.getDate().toLocaleString().trim());
                                        pstmt.setString(3, dieaseaseSearchTxt.getText().toString().trim());
                                        pstmt.setString(4, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 0).toString().toString().trim());
                                        pstmt.setString(5, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 1).toString().toString().trim());
                                        pstmt.setString(6, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2).toString().toString().trim());
                                        pstmt.setString(7, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 3).toString().toString().trim());
                                        pstmt.setString(8, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 4).toString().toString().trim());
                                        pstmt.setString(9, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 5).toString().toString().trim());
                                        pstmt.setString(10, carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 6).toString().toString().trim());

                                        pstmt.executeUpdate();
                                        connectDB.commit();
                                        connectDB.setAutoCommit(true);
                                        
                                        

                                        System.out.print("\nSuccess!!! Data committed successfully.");
                                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been committed successfully. ", 
                                            "Success!!! Data committed successfully.", JOptionPane.INFORMATION_MESSAGE);
                                        
                                        Double t_prot = 0.00, t_cho = 0.00, t_fats = 0.00, t_cal = 0.00;
                                        String tprot = "0.00", tcho = "0.00", tfats = "0.00", tcal = "0.00";
                                        
                                        try {
                                                connectDB.setAutoCommit(false);

                                                //About to Get the Patient Details
                                                java.sql.Statement stm2 = connectDB.createStatement();
                                                java.sql.ResultSet rse2 = stm2.executeQuery(
                                                        "SELECT t_prot, t_cho, t_fats, t_cal "
                                                        + "FROM nutrition.nutr_patient_feeding_regime "
                                                        + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' "
                                                        + "AND date = '"+headerDatePicker.getDate().toLocaleString().trim()+"' "
                                                        + "AND time BETWEEN '"+carePlanValueTable.getValueAt(0, 0).toString().toString()+"' "
                                                        + "AND '"+date+"' ");

                                                while (rse2.next()) {

                                                    //Getting the user's Gender
                                                    tprot = rse2.getObject(1).toString(); 
                                                    tcho = rse2.getObject(2).toString();  
                                                    tfats = rse2.getObject(3).toString(); 
                                                    tcal = rse2.getObject(4).toString(); 
                                                    
                                                    t_prot += Double.valueOf(tprot);
                                                    t_cho += Double.valueOf(tcho);
                                                    t_fats += Double.valueOf(tfats);
                                                    t_cal += Double.valueOf(tcal);
                                                }
                                                
                                                actualPROTTxt.setText(Double.toString(t_prot));
                                                actualCHOSTxt.setText(Double.toString(t_cho));
                                                actualFATSTxt.setText(Double.toString(t_fats));
                                                actualKCALSTxt.setText(Double.toString(t_cal));


                                                connectDB.commit();
                                                connectDB.setAutoCommit(true);
                                            } catch (final Exception es) {
                                                System.out.println(es);

                                            }
                                
                                } catch (java.lang.Exception sq) {

                                    try {
                                        connectDB.rollback();
                                    } catch (java.sql.SQLException sql) {
                                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    }
                                    System.out.println(sq.getMessage());
                                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                }
                                
                            } else {
                                JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been committed.", 
                                    "Nothing Committed.", JOptionPane.INFORMATION_MESSAGE);
                                carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);
                            }
                              
                          } else {
                              JOptionPane.showMessageDialog(carePlanPanel, "Some values noted that not legitimate.", 
                                      "Illegitimate Value.", JOptionPane.ERROR_MESSAGE);
                              carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);
                          }
                            
                      }

                  }                  
              }
        }
    }//GEN-LAST:event_carePlanValueTableMouseClicked

    private void searchFeedingTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFeedingTxtCaretUpdate
        if (searchFeedingTxt.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {        
            feedingSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT food, serving_size, grams_per_serv FROM nutrition.nutr_patient_foodexchange_list  "
                    + "WHERE food ILIKE '%"+searchFeedingTxt.getText().toString()+"%' "));

            feedingSearchTable.setShowHorizontalLines(false);
            feedingSearchTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            feedingSearchTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            feedingSearchTable.getColumnModel().getColumn(2).setPreferredWidth(300);
            feedingSearchScrollPane.setViewportView(feedingSearchTable);
        }
    }//GEN-LAST:event_searchFeedingTxtCaretUpdate

    private void searchFeedingTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFeedingTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFeedingTxtActionPerformed

    private void feedingSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feedingSearchTableMouseClicked
       System.out.println("Into Oral Care Plan Value Scroll Pane \n");
           
        oralCTable.setValueAt(feedingSearchTable.getValueAt(feedingSearchTable.getSelectedRow(), 0).toString().trim(), oralCTable.getSelectedRow(), 1);
        oralCTable.setValueAt(feedingSearchTable.getValueAt(feedingSearchTable.getSelectedRow(), 1).toString().trim(), oralCTable.getSelectedRow(), 2);

        String tprot = "0.00", tcho = "0.00", tfats = "0.00", tcal = "0.00";
        try {
                connectDB.setAutoCommit(false);

                //About to Get the Patient Details
                System.out.println("About to Get the Patient Details \n");
                System.out.println("Before entering Loop --> Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);

                java.sql.Statement stm2 = connectDB.createStatement();
                java.sql.ResultSet rse2 = stm2.executeQuery(
                        "SELECT proteins, carbohydrates, fats, calories "
                        + "FROM nutrition.nutr_patient_foodexchange_list "
                        + "WHERE food ILIKE '" + feedingSearchTable.getValueAt(feedingSearchTable.getSelectedRow(), 0).toString() + "' ");

                System.out.println("Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);

                while (rse2.next()) {

                    //Getting the user's Gender
                    tprot = rse2.getObject(1).toString(); 
                    tcho = rse2.getObject(2).toString();  
                    tfats = rse2.getObject(3).toString(); 
                    tcal = rse2.getObject(4).toString(); 

                    System.out.println("Withing Loop --> Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);
                }

                System.out.println("Outside Loop --> Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);


            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }

        oralCTable.setValueAt(tprot.trim(), oralCTable.getSelectedRow(), 3);
        oralCTable.setValueAt(tcho.trim(), oralCTable.getSelectedRow(), 4);
        oralCTable.setValueAt(tfats.trim(), oralCTable.getSelectedRow(), 5);
        oralCTable.setValueAt(tcal.trim(), oralCTable.getSelectedRow(), 6);


        System.out.println("About to Dispose \n");

        this.feedingRegimeFoodSearchDialog.dispose();

        System.out.println("Disposed \n");
        
    }//GEN-LAST:event_feedingSearchTableMouseClicked

    private void feedingSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedingSearchBtnActionPerformed
        this.feedingRegimeFoodSearchDialog.dispose();
    }//GEN-LAST:event_feedingSearchBtnActionPerformed

    private void carePlanValueTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_carePlanValueTableKeyPressed
        
    }//GEN-LAST:event_carePlanValueTableKeyPressed

    private void carePlanValueTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_carePlanValueTableKeyReleased
        nameNoLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK); 
        carePlanCHOSLbl.setForeground(Color.BLACK); 
        carePlanFATSLbl.setForeground(Color.BLACK); 
        carePlanFLUIDSLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || carePlanPROTTxt.getText().equals("") || carePlanCHOSTxt.getText().equals("") 
                 || carePlanKCALSTxt.getText().equals("") || carePlanFLUIDSTxt.getText().equals("") 
                 || carePlanFATSTxt.getText().equals("")  || carePlanRODTxt.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            carePlanValueTable.setValueAt(false, carePlanValueTable.getSelectedRow(), 7);
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the Patient's Diagnosis will be populated.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanPROTTxt.getText().equals("")) {
                carePlanPROTLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'PROTS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanCHOSTxt.getText().equals("")) {
                carePlanCHOSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'CHOS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanFATSTxt.getText().equals("")) {
                carePlanFATSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FATS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanFLUIDSTxt.getText().equals("")) {
                carePlanFLUIDSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FLUIDS' Field will be populated.", 
                    "\nMissing Entries Noted - FLUIDS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'KCALS' Field will be populated.", 
                    "\nMissing Entries Noted - KCALS", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
              System.out.println("Code reached Here...");
              if (carePlanValueTable.getSelectedColumn() == 2) {
                  if (carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2) == null) {
                      JOptionPane.showMessageDialog(carePlanPanel, "Empty field noted at amount in the table.", "Empty Field noted.", JOptionPane.ERROR_MESSAGE);
                      
                  } else {
                      String a = carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2).toString().substring(0, 5);
                      String b = a.replaceAll("[a-zA-Z]+","");
                      
                      System.out.println("Amount - "+carePlanValueTable.getValueAt(carePlanValueTable.getSelectedRow(), 2).toString());
                      System.out.println("Substringed Amount - "+a);
                      System.out.println("Substringed Amount without Letters - "+b);
                      
                      Double c = Math.round(Double.valueOf(b.trim())*100.00)/100.00;
                      
                      System.out.println("Rounded value - "+c);
                      
                      Double prot = 0.00;
                      Double chos = 0.00;
                      Double fats = 0.00;
                      Double kcals = 0.00;
                      
                      try {
                            connectDB.setAutoCommit(false);

                            //About to Get the Patient Details
                            System.out.println("About to Get the Patient Details \n");
                            System.out.println("Before entering Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);

                            java.sql.Statement stm2 = connectDB.createStatement();
                            java.sql.ResultSet rse2 = stm2.executeQuery(
                                    "SELECT proteins, carbohydrates, fats, calories "
                                    + "FROM nutrition.nutr_patient_foodexchange_list "
                                    + "WHERE food ILIKE '" + feedingSearchTable1.getValueAt(feedingSearchTable1.getSelectedRow(), 0).toString() + "' ");

                            System.out.println("Just before the Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                            while (rse2.next()) {

                                //Getting the user's Gender
                                prot = Double.valueOf(rse2.getObject(1).toString()); 
                                chos = Double.valueOf(rse2.getObject(2).toString());  
                                fats = Double.valueOf(rse2.getObject(3).toString()); 
                                kcals = Double.valueOf(rse2.getObject(4).toString()); 

                                System.out.println("Withing Loop .\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                            }

                            System.out.println("Outside Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                            

                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                    } catch (final Exception es) {
                        System.out.println(es);

                    }
                      
                      System.out.println("After assignment\nPROT - "+prot+"\nCHOS- "+chos+"\nFATS - "+fats+"\nKCALS - "+kcals);
                      
                      prot = c*prot;
                      chos = c*chos;
                      fats = c*fats;
                      kcals = c*kcals;
                      
                      carePlanValueTable.setValueAt(Math.round(prot*100.0)/100.0, carePlanValueTable.getSelectedRow(), 3);
                      carePlanValueTable.setValueAt(Math.round(chos*100.0)/100.0, carePlanValueTable.getSelectedRow(), 4);
                      carePlanValueTable.setValueAt(Math.round(fats*100.0)/100.0, carePlanValueTable.getSelectedRow(), 5);
                      carePlanValueTable.setValueAt(Math.round(kcals*100.0)/100.0, carePlanValueTable.getSelectedRow(), 6);
                      
                      System.out.println("After multiplication\nPROT - "+prot+"\nCHOS- "+chos+"\nFATS - "+fats+"\nKCALS - "+kcals);
                      
                      
                  }
                  
              } else {
                  System.out.println("Not Column 2.");
              }
        }
    }//GEN-LAST:event_carePlanValueTableKeyReleased

    private void nutritionAssessmentTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPane1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionAssessmentTabbedPane1StateChanged

    private void nutritionAssessmentTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nutritionAssessmentTabbedPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_nutritionAssessmentTabbedPane1MouseClicked

    private void paedFRTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paedFRTableMouseClicked
        Date date = new Date();
        SimpleDateFormat simpDate;

        simpDate = new SimpleDateFormat("kk:mm:ss");
        System.out.println(simpDate.format(date));
        
        paedNameNoTxt.setForeground(Color.BLACK);
        
        if (paedNameNoTxt.getText().equals("") || paedFRDietPrescrTxt.getText().equals("")
                 || feedingInstruTxa.getText().equals("") || feedingInstruTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            paedFRTable.setValueAt(false, paedFRTable.getSelectedRow(), 3);
           
            if (paedNameNoTxt.getText().equals("")) {
                paedNameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedFRDietPrescrTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Patient's Prescribed Diet field.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (feedingInstruTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the feeding instructions field for the patient.", 
                    "\nMissing Entries Noted - Feeding Instructions", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
              if (paedFRTable.getSelectedColumn() == 0) {
                  System.out.println("About to show the time chooser.");
                  TimeChooser dlg = new TimeChooser(new testing(), true);
                  dlg.setLocation(400, 350);
                  dlg.setVisible(true);
                  
                  paedFRTable.setValueAt(dlg.getHHMM(), paedFRTable.getSelectedRow(), 0);
                  System.out.println("Time should have been set");
              } else if (paedFRTable.getSelectedColumn() == 1) {
                  System.out.println("About to set the feed.");
                  
                  feedingPaedSearchButtonClicked();
                  
                  
              } else if (paedFRTable.getSelectedColumn() == 3) {
                  if (paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 3) == Boolean.TRUE) {
                      System.out.println("TRUE");
                      
                      if (paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 0) == null 
                              || paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 1) == null
                              || paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 2) == null) {
                          
                          JOptionPane.showMessageDialog(carePlanPanel, "Some values in the - (Selected Row) are missing.", 
                                  "Missing Values.", JOptionPane.ERROR_MESSAGE);
                          paedFRTable.setValueAt(false, paedFRTable.getSelectedRow(), 3);
                          
                      } else {
                           
                          System.out.print("About to insert the values.!!!");

                          int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to commit the selected row?", 
                                    "Data Commiting.", JOptionPane.YES_NO_CANCEL_OPTION);

                            if (a == 0) {
                                
                                try {
                                    connectDB.setAutoCommit(false);

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_paed_feeding_regime_tbl "
                                            + "(patient_no, date, time, feed, amount) "
                                            + " VALUES(?, ?, ?, ?, ?)");

                                        pstmt.setString(1, paedNameNoTxt.getText().toString().trim());
                                        pstmt.setString(2, paedHeaderDatePicker.getDate().toLocaleString().trim());
                                        pstmt.setString(3, paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 0).toString().toString().trim());
                                        pstmt.setString(4, paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 1).toString().toString().trim());
                                        pstmt.setString(5, paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 2).toString().toString().trim());

                                        pstmt.executeUpdate();
                                        connectDB.commit();
                                        connectDB.setAutoCommit(true);                                        
                                        

                                        System.out.print("\nSuccess!!! Data committed successfully.");
                                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been committed successfully. ", 
                                            "Success!!! Data committed successfully.", JOptionPane.INFORMATION_MESSAGE);
                                        
                                        
                                
                                } catch (java.lang.Exception sq) {

                                    try {
                                        connectDB.rollback();
                                    } catch (java.sql.SQLException sql) {
                                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    }
                                    System.out.println(sq.getMessage());
                                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                }
                                
                            } else {
                                JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been committed.", 
                                    "Nothing Committed.", JOptionPane.INFORMATION_MESSAGE);
                                paedFRTable.setValueAt(false, paedFRTable.getSelectedRow(), 3);
                            }
                                                      
                      }

                  }                  
              }
        }
    }//GEN-LAST:event_paedFRTableMouseClicked

    private void paedFeedTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_paedFeedTxtCaretUpdate
        if (paedFeedTxt.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {        
            paedFRFTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT food, serving_size, grams_per_serv FROM nutrition.nutr_patient_foodexchange_list  "
                    + "WHERE food ILIKE '%"+paedFeedTxt.getText().toString()+"%' "));

            paedFRFTable.setShowHorizontalLines(false);
            paedFRFTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            paedFRFTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            paedFRFTable.getColumnModel().getColumn(2).setPreferredWidth(300);
            paedFRFScrollPane.setViewportView(paedFRFTable);
        }
    }//GEN-LAST:event_paedFeedTxtCaretUpdate

    private void paedFRFTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paedFRFTableMouseClicked
        paedFRTable.setValueAt(paedFRFTable.getValueAt(paedFRFTable.getSelectedRow(), 0).toString().trim(), paedFRTable.getSelectedRow(), 1);
        paedFRTable.setValueAt(paedFRFTable.getValueAt(paedFRFTable.getSelectedRow(), 2).toString().trim(), paedFRTable.getSelectedRow(), 2);        
        
        paedFRFSearchDialog.dispose();
    }//GEN-LAST:event_paedFRFTableMouseClicked

    private void paedFRSVPbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFRSVPbtnActionPerformed
        paedNameNoTxt.setForeground(Color.BLACK);
        
        
        if (paedNameNoTxt.getText().equals("") || paedFRDietPrescrTxt.getText().equals("")
                 || feedingInstruTxa.getText().equals("") || feedingInstruTxa.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            paedFRTable.setValueAt(false, paedFRTable.getSelectedRow(), 3);
           
            if (paedNameNoTxt.getText().equals("")) {
                paedNameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedFRDietPrescrTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the Patient's Prescribed Diet field.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (feedingInstruTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Fill the feeding instructions field for the patient.", 
                    "Missing Entries Noted - Feeding Instructions", JOptionPane.INFORMATION_MESSAGE);
            }  else if (paedRegimeProvTxa.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Enter some information on what this Regime Provides for the patient.", 
                    "Missing Entries Noted - This Regime Provides", JOptionPane.INFORMATION_MESSAGE);
            }  else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
            System.out.print("About to insert the values.!!!");
                
                try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_paed_patient_feeding_regime "
                            + "(patient_no, date, diet_prescribed, route_of_adm, feed_instr, regime_pro) "
                            + " VALUES(?, ?, ?, ?, ?, ?)");
                    
                        pstmt.setString(1, paedNameNoTxt.getText().toString().trim());
                        pstmt.setString(2, paedHeaderDatePicker.getDate().toLocaleString().trim());
                        pstmt.setString(3, paedFRDietPrescrTxt.getText().toString().trim());
                        pstmt.setString(4, paedROACmbx.getSelectedItem().toString().trim());
                        pstmt.setString(5, feedingInstruTxa.getText().toString().trim());
                        pstmt.setString(6, paedRegimeProvTxa.getText().toString().trim());

                        pstmt.executeUpdate();
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        
                        System.out.print("\nSuccess!!! Data saved successfully");
                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been saved successfully. ", 
                            "Success!!! Data saved successfully", JOptionPane.INFORMATION_MESSAGE);
                        
                        PrintPaedPatientsRegimeForm();
                    
                } catch (java.lang.Exception sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }

        }
    }//GEN-LAST:event_paedFRSVPbtnActionPerformed

    private void paedFRClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFRClearBtnActionPerformed
        ClearPaedPlanFields();
    }//GEN-LAST:event_paedFRClearBtnActionPerformed

    private void paedFRRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFRRemoveBtnActionPerformed
        Date date = new Date();
        SimpleDateFormat simpDate;

        simpDate = new SimpleDateFormat("kk:mm:ss");
        System.out.println(simpDate.format(date));
        
        paedNameNoLabel.setForeground(Color.BLACK);
        if (paedNameNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(carePlanPanel, "Search for the patient first", "Search for the Patient",
                JOptionPane.INFORMATION_MESSAGE);
            java.awt.Toolkit.getDefaultToolkit().beep();
            paedNameNoLabel.setForeground(Color.red);
        } else {
            int rows2Delete = paedFRTable.getSelectedRowCount();

            int[] selectedRows = paedFRTable.getSelectedRows();

            if (rows2Delete < 1) {

                System.out.println("No row/s selected.");

                java.awt.Toolkit.getDefaultToolkit().beep();
                javax.swing.JOptionPane.showMessageDialog(this, "There are no Selected rows to delete!");

            } else {

                if (rows2Delete > 1) {
                    System.out.println("Many rows selected.");
                    
                    JOptionPane.showMessageDialog(carePlanPanel, "You have to delete one row at a time.",
                                "Delete One Row.", JOptionPane.INFORMATION_MESSAGE);

//                    for (int k = 0; k < carePlanValueTable.getRowCount(); k++) {
//                        for (int r = 0; r < carePlanValueTable.getColumnCount(); r++) {
//                            carePlanValueTable.setValueAt(null, k, r);
//                        }
//                    }

                } else {
                    System.out.println("One row selected.");
                    
                    if (paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 0) == null 
                              || paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 1) == null
                              || paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 2) == null) {
                          
                          JOptionPane.showMessageDialog(carePlanPanel, "Some values in the - (Selected Row) are missing.", 
                                  "Missing Values.", JOptionPane.ERROR_MESSAGE);
                          paedFRTable.setValueAt(false, paedFRTable.getSelectedRow(), 3);
                          
                      } else {
                       
                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)
                        paedFRTable.getModel();
                                

                        try {
                            connectDB.setAutoCommit(false);

                            int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to delete and remove the selected row?",
                                "Delete and Remove.", JOptionPane.YES_NO_CANCEL_OPTION);
                            
                            if (a == 0) {

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM nutrition.nutr_paed_feeding_regime_tbl"
                                    + " WHERE patient_no = '"+paedNameNoTxt.getText().toString().trim()+"' "
                                    + " AND time = '"+paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 0).toString().trim()+"'"
                                    + " AND feed = '"+paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 1).toString().trim()+"'"
                                    + " AND amount = '"+paedFRTable.getValueAt(paedFRTable.getSelectedRow(), 2).toString().trim()+"'"
                                    + " AND date = '"+paedHeaderDatePicker.getDate().toLocaleString()+"'");

                                pstmt.executeUpdate();
                                connectDB.commit();
                                connectDB.setAutoCommit(true);

                                paedFRTable.setValueAt(false, paedFRTable.getSelectedRow(), 3);  

                                defTableModel.removeRow(paedFRTable.getSelectedRow());

                                System.out.print("\nDelete success.");
                                JOptionPane.showMessageDialog(carePlanPanel, "The Selected row has been deleted and "
                                    + "removed successfully. ",
                                    "Delete success.", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been deleted or removed.",
                                    "Nothing Removed.", JOptionPane.INFORMATION_MESSAGE);
                            }


                    } catch (java.lang.Exception sq) {

                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                        
                    }                    

            }
        }
        }
    }//GEN-LAST:event_paedFRRemoveBtnActionPerformed

    private void paedFRFBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paedFRFBtnActionPerformed
        this.paedFRFSearchDialog.dispose();
    }//GEN-LAST:event_paedFRFBtnActionPerformed

    private void oralCTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_oralCTableMouseClicked
        System.out.println("Column clicked..."+oralCTable.getSelectedColumn());
        Date date = new Date();
        SimpleDateFormat simpDate;

        simpDate = new SimpleDateFormat("kk:mm:ss");
        System.out.println(simpDate.format(date));
        
        nameNoLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK); 
        carePlanCHOSLbl.setForeground(Color.BLACK); 
        carePlanFATSLbl.setForeground(Color.BLACK); 
        carePlanFLUIDSLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || carePlanPROTTxt.getText().equals("") || carePlanCHOSTxt.getText().equals("") 
                 || carePlanKCALSTxt.getText().equals("") || carePlanFLUIDSTxt.getText().equals("") 
                 || carePlanFATSTxt.getText().equals("")  || carePlanRODTxt.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the Patient's Diagnosis will be populated.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanPROTTxt.getText().equals("")) {
                carePlanPROTLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'PROTS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanCHOSTxt.getText().equals("")) {
                carePlanCHOSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'CHOS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanFATSTxt.getText().equals("")) {
                carePlanFATSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FATS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanFLUIDSTxt.getText().equals("")) {
                carePlanFLUIDSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FLUIDS' Field will be populated.", 
                    "\nMissing Entries Noted - FLUIDS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'KCALS' Field will be populated.", 
                    "\nMissing Entries Noted - KCALS", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
              if (oralCTable.getSelectedColumn() == 0) {
                  System.out.println("Column 1 Selected.");                  
                  
              } else if (oralCTable.getSelectedColumn() == 1) {
                  System.out.println("About to display the feed dialog.");
                  
                  feedingOralSearchButtonClicked();
                  
                  
              } else if (oralCTable.getSelectedColumn() == 7) {
                  if (oralCTable.getValueAt(oralCTable.getSelectedRow(), 7) == Boolean.TRUE) {
                      System.out.println("TRUE");
                      
                      if (oralCTable.getValueAt(oralCTable.getSelectedRow(), 0) == null 
                              || oralCTable.getValueAt(oralCTable.getSelectedRow(), 1) == null
                              || oralCTable.getValueAt(oralCTable.getSelectedRow(), 2) == null
                              || oralCTable.getValueAt(oralCTable.getSelectedRow(), 3) == null
                              || oralCTable.getValueAt(oralCTable.getSelectedRow(), 4) == null
                              || oralCTable.getValueAt(oralCTable.getSelectedRow(), 5) == null
                              || oralCTable.getValueAt(oralCTable.getSelectedRow(), 6) == null) {
                          
                          JOptionPane.showMessageDialog(carePlanPanel, "Some values in the - (Selected Row) are missing.", 
                                  "Missing Values.", JOptionPane.ERROR_MESSAGE);
                          oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);
                          
                      } else {
                          if ( oralCTable.getValueAt(oralCTable.getSelectedRow(), 3).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                              && oralCTable.getValueAt(oralCTable.getSelectedRow(), 4).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                              && oralCTable.getValueAt(oralCTable.getSelectedRow(), 5).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")
                              && oralCTable.getValueAt(oralCTable.getSelectedRow(), 6).toString().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                              
                              System.out.print("About to insert the values.!!! Into Oral Feed.");

                          int a = JOptionPane.showConfirmDialog(carePlanPanel, "Do you want to commit the selected row?", 
                                    "Data Commiting.", JOptionPane.YES_NO_CANCEL_OPTION);

                            if (a == 0) {
                                
                                try {
                                    connectDB.setAutoCommit(false);

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO nutrition.nutr_patient_oral_feeding_regime "
                                            + "(patient_no, diagnosis, meal, feed, amount, t_prot, t_cho, t_fats, t_cal, date, t_time) "
                                            + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                                        pstmt.setString(1, nameNoTxt.getText().toString().trim());
                                        pstmt.setString(2, dieaseaseSearchTxt.getText().toString().trim());
                                        pstmt.setString(3, oralCTable.getValueAt(oralCTable.getSelectedRow(), 0).toString().toString().trim());
                                        pstmt.setString(4, oralCTable.getValueAt(oralCTable.getSelectedRow(), 1).toString().toString().trim());
                                        pstmt.setString(5, oralCTable.getValueAt(oralCTable.getSelectedRow(), 2).toString().toString().trim());
                                        pstmt.setString(6, oralCTable.getValueAt(oralCTable.getSelectedRow(), 3).toString().toString().trim());
                                        pstmt.setString(7, oralCTable.getValueAt(oralCTable.getSelectedRow(), 4).toString().toString().trim());
                                        pstmt.setString(8, oralCTable.getValueAt(oralCTable.getSelectedRow(), 5).toString().toString().trim());
                                        pstmt.setString(9, oralCTable.getValueAt(oralCTable.getSelectedRow(), 6).toString().toString().trim());
                                        pstmt.setString(10, headerDatePicker.getDate().toLocaleString().trim());
                                        pstmt.setString(11, date.toLocaleString());

                                        pstmt.executeUpdate();
                                        connectDB.commit();
                                        connectDB.setAutoCommit(true);

                                        System.out.print("\nSuccess!!! Data committed successfully.");
                                        JOptionPane.showMessageDialog(carePlanPanel, "Data has been committed successfully. ", 
                                            "Success!!! Data committed successfully.", JOptionPane.INFORMATION_MESSAGE);
                                        
                                        Double t_prot = 0.00, t_cho = 0.00, t_fats = 0.00, t_cal = 0.00;
                                        String tprot = "0.00", tcho = "0.00", tfats = "0.00", tcal = "0.00";
                                        
                                        try {
                                                connectDB.setAutoCommit(false);

                                                //About to Get the Patient Details
                                                java.sql.Statement stm2 = connectDB.createStatement();
                                                java.sql.ResultSet rse2 = stm2.executeQuery(
                                                        "SELECT t_prot, t_cho, t_fats, t_cal "
                                                        + "FROM nutrition.nutr_patient_oral_feeding_regime "
                                                        + "WHERE patient_no='" + nameNoTxt.getText().toString().trim() + "' "
                                                        + "AND date = '"+headerDatePicker.getDate().toLocaleString().trim()+"' "
                                                        + "AND meal = '"+oralCTable.getValueAt(0, 0).toString().trim()+"' "
                                                        + "AND feed = '"+oralCTable.getValueAt(0, 1).toString().trim()+"' "
                                                        + "AND amount = '"+oralCTable.getValueAt(0, 2).toString().trim()+"' ");

                                                while (rse2.next()) {

                                                    //Getting the user's Gender
                                                    tprot = rse2.getObject(1).toString(); 
                                                    tcho = rse2.getObject(2).toString();  
                                                    tfats = rse2.getObject(3).toString(); 
                                                    tcal = rse2.getObject(4).toString(); 
                                                    
                                                    t_prot += Double.valueOf(tprot);
                                                    t_cho += Double.valueOf(tcho);
                                                    t_fats += Double.valueOf(tfats);
                                                    t_cal += Double.valueOf(tcal);
                                                }
                                                
                                                actualPROTTxt.setText(Double.toString(t_prot));
                                                actualCHOSTxt.setText(Double.toString(t_cho));
                                                actualFATSTxt.setText(Double.toString(t_fats));
                                                actualKCALSTxt.setText(Double.toString(t_cal));


                                                connectDB.commit();
                                                connectDB.setAutoCommit(true);
                                            } catch (final Exception es) {
                                                System.out.println(es);

                                            }
                                
                                } catch (java.lang.Exception sq) {

                                    try {
                                        connectDB.rollback();
                                    } catch (java.sql.SQLException sql) {
                                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    }
                                    System.out.println(sq.getMessage());
                                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);
                                }
                                
                            } else {
                                JOptionPane.showMessageDialog(carePlanPanel, "Nothing has been committed.", 
                                    "Nothing Committed.", JOptionPane.INFORMATION_MESSAGE);
                                
                                oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);
                            }
                              
                          } else {
                              JOptionPane.showMessageDialog(carePlanPanel, "Some values noted that are not legitimate.", 
                                      "Illegitimate Value.", JOptionPane.ERROR_MESSAGE);
                              
                              oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);
                          }
                            
                      }

                  }                  
              }
        }
    }//GEN-LAST:event_oralCTableMouseClicked

    private void oralCTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_oralCTableKeyReleased
        nameNoLabel.setForeground(Color.BLACK);
        dieseaseSearchLabel.setForeground(Color.BLACK);
        carePlanPROTLbl.setForeground(Color.BLACK); 
        carePlanCHOSLbl.setForeground(Color.BLACK); 
        carePlanFATSLbl.setForeground(Color.BLACK); 
        carePlanFLUIDSLbl.setForeground(Color.BLACK); 
        
        if (nameNoTxt.getText().equals("") || dieaseaseSearchTxt.getText().equals("")
                 || carePlanPROTTxt.getText().equals("") || carePlanCHOSTxt.getText().equals("") 
                 || carePlanKCALSTxt.getText().equals("") || carePlanFLUIDSTxt.getText().equals("") 
                 || carePlanFATSTxt.getText().equals("")  || carePlanRODTxt.getText().equals("")) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            oralCTable.setValueAt(false, oralCTable.getSelectedRow(), 7);
            
            if (nameNoTxt.getText().equals("")) {
                nameNoLabel.setForeground(Color.red);                
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (dieaseaseSearchTxt.getText().equals("")) {
                dieseaseSearchLabel.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the Patient's Diagnosis will be populated.", 
                    "Missing Entries Noted", JOptionPane.INFORMATION_MESSAGE);
            }  else if (carePlanPROTTxt.getText().equals("")) {
                carePlanPROTLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'PROTS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanCHOSTxt.getText().equals("")) {
                carePlanCHOSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'CHOS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            }   else if (carePlanFATSTxt.getText().equals("")) {
                carePlanFATSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FATS' Field will be populated.", 
                    "\nMissing Entries Noted - PROTS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanFLUIDSTxt.getText().equals("")) {
                carePlanFLUIDSLbl.setForeground(Color.red);
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'FLUIDS' Field will be populated.", 
                    "\nMissing Entries Noted - FLUIDS", JOptionPane.INFORMATION_MESSAGE);
            } else if (carePlanKCALSTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(carePlanPanel, "Search for the Patient and the 'KCALS' Field will be populated.", 
                    "\nMissing Entries Noted - KCALS", JOptionPane.INFORMATION_MESSAGE);
            } else {
                System.out.print("Sorry man Unknown Error!!!");
                JOptionPane.showMessageDialog(carePlanPanel, "Contact the Administrator -- Possible missing entries. Unknown Error!!!. ", 
                    "Unknown Error!!!", JOptionPane.ERROR_MESSAGE);
            }
        
        } else {
              System.out.println("Code reached Here...");
              if (oralCTable.getSelectedColumn() == 2) {
                  if (oralCTable.getValueAt(oralCTable.getSelectedRow(), 2) == null) {
                      JOptionPane.showMessageDialog(carePlanPanel, "Empty field noted at Amount in the table.", "Empty Field noted.", JOptionPane.ERROR_MESSAGE);
                      
                  } else {
                      String a = oralCTable.getValueAt(oralCTable.getSelectedRow(), 2).toString().substring(0, 5);
                      String b = a.replaceAll("[a-zA-Z]+","");
                      
                      System.out.println("Amount - "+oralCTable.getValueAt(oralCTable.getSelectedRow(), 2).toString());
                      System.out.println("Substringed Amount - "+a);
                      System.out.println("Substringed Amount without Letters - "+b);
                      
                      Double c = Math.round(Double.valueOf(b.trim())*100.00)/100.00;
                      
                      System.out.println("Rounded value - "+c);
                      
                      Double prot = 0.00;
                      Double chos = 0.00;
                      Double fats = 0.00;
                      Double kcals = 0.00;
                      
                      try {
                            connectDB.setAutoCommit(false);

                            //About to Get the Patient Details
                            System.out.println("About to Get the Patient Details \n");
                            System.out.println("Before entering Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);

                            java.sql.Statement stm2 = connectDB.createStatement();
                            java.sql.ResultSet rse2 = stm2.executeQuery(
                                    "SELECT proteins, carbohydrates, fats, calories "
                                    + "FROM nutrition.nutr_patient_foodexchange_list "
                                    + "WHERE food ILIKE '" + feedingSearchTable.getValueAt(feedingSearchTable.getSelectedRow(), 0).toString() + "' ");

                            System.out.println("Just before the Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                            while (rse2.next()) {

                                //Getting the user's Gender
                                prot = Double.valueOf(rse2.getObject(1).toString()); 
                                chos = Double.valueOf(rse2.getObject(2).toString());  
                                fats = Double.valueOf(rse2.getObject(3).toString()); 
                                kcals = Double.valueOf(rse2.getObject(4).toString()); 

                                System.out.println("Withing Loop .\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                            }

                            System.out.println("Outside Loop.\nProt - "+prot+"\nCarbo - "+chos+"\nFats - "+fats+"\nCalories - "+kcals);
                            

                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                    } catch (final Exception es) {
                        System.out.println(es);

                    }
                      
                      System.out.println("After assignment\nPROT - "+prot+"\nCHOS- "+chos+"\nFATS - "+fats+"\nKCALS - "+kcals);
                      
                      prot = c*prot;
                      chos = c*chos;
                      fats = c*fats;
                      kcals = c*kcals;
                      
                      oralCTable.setValueAt(Math.round(prot*100.0)/100.0, oralCTable.getSelectedRow(), 3);
                      oralCTable.setValueAt(Math.round(chos*100.0)/100.0, oralCTable.getSelectedRow(), 4);
                      oralCTable.setValueAt(Math.round(fats*100.0)/100.0, oralCTable.getSelectedRow(), 5);
                      oralCTable.setValueAt(Math.round(kcals*100.0)/100.0, oralCTable.getSelectedRow(), 6);
                      
                      System.out.println("After multiplication\nPROT - "+prot+"\nCHOS- "+chos+"\nFATS - "+fats+"\nKCALS - "+kcals);
                      
                      
                  }
                  
              } else {
                  System.out.println("Not Column 2.");
              }
        }
    }//GEN-LAST:event_oralCTableKeyReleased

    private void searchFeedingTxt1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFeedingTxt1CaretUpdate
        if (searchFeedingTxt1.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {        
            feedingSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, 
                    "SELECT food, serving_size, grams_per_serv FROM nutrition.nutr_patient_foodexchange_list  "
                    + "WHERE food ILIKE '%"+searchFeedingTxt1.getText().toString()+"%' "));

            feedingSearchTable1.setShowHorizontalLines(false);
            feedingSearchTable1.getColumnModel().getColumn(0).setPreferredWidth(350);
            feedingSearchTable1.getColumnModel().getColumn(1).setPreferredWidth(350);
            feedingSearchTable1.getColumnModel().getColumn(2).setPreferredWidth(300);
            feedingSearchScrollPane1.setViewportView(feedingSearchTable1);
        }
    }//GEN-LAST:event_searchFeedingTxt1CaretUpdate

    private void searchFeedingTxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFeedingTxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFeedingTxt1ActionPerformed

    private void feedingSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feedingSearchTable1MouseClicked
        System.out.println("Into Care Plan Value Scroll Pane \n");
            
        carePlanValueTable.setValueAt(feedingSearchTable1.getValueAt(feedingSearchTable1.getSelectedRow(), 0).toString().trim(), carePlanValueTable.getSelectedRow(), 1);
        carePlanValueTable.setValueAt(feedingSearchTable1.getValueAt(feedingSearchTable1.getSelectedRow(), 1).toString().trim(), carePlanValueTable.getSelectedRow(), 2);

        String tprot = "0.00", tcho = "0.00", tfats = "0.00", tcal = "0.00";
        try {
                connectDB.setAutoCommit(false);

                //About to Get the Patient Details
                System.out.println("About to Get the Patient Details \n");
                System.out.println("Before entering Loop --> Prot - "+tprot+"\n Carbo - "+tcho+"\nFats - "+tfats+"\nCalories - "+tcal);

                java.sql.Statement stm2 = connectDB.createStatement();
                java.sql.ResultSet rse2 = stm2.executeQuery(
                        "SELECT proteins, carbohydrates, fats, calories "
                        + "FROM nutrition.nutr_patient_foodexchange_list "
                        + "WHERE food ILIKE '" + feedingSearchTable1.getValueAt(feedingSearchTable1.getSelectedRow(), 0).toString() + "' ");

                System.out.println("Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);

                while (rse2.next()) {

                    //Getting the user's Gender
                    tprot = rse2.getObject(1).toString(); 
                    tcho = rse2.getObject(2).toString();  
                    tfats = rse2.getObject(3).toString(); 
                    tcal = rse2.getObject(4).toString(); 

                    System.out.println("Withing Loop --> Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);
                }

                System.out.println("Outside Loop --> Prot - "+tprot+", Carbo - "+tcho+", Fats - "+tfats+", Calories - "+tcal);


            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }

        carePlanValueTable.setValueAt(tprot.trim(), carePlanValueTable.getSelectedRow(), 3);
        carePlanValueTable.setValueAt(tcho.trim(), carePlanValueTable.getSelectedRow(), 4);
        carePlanValueTable.setValueAt(tfats.trim(), carePlanValueTable.getSelectedRow(), 5);
        carePlanValueTable.setValueAt(tcal.trim(), carePlanValueTable.getSelectedRow(), 6);


        this.feedingRegimeFoodSearchDialog1.dispose();
    }//GEN-LAST:event_feedingSearchTable1MouseClicked

    private void feedingSearchBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedingSearchBtn1ActionPerformed
        this.feedingRegimeFoodSearchDialog1.dispose();
    }//GEN-LAST:event_feedingSearchBtn1ActionPerformed
    
    
    public void ClearCarePlanFields() {
        nameNoTxt.setText("");
        patientDetailsTxa.setText("");
        dieaseaseSearchTxt.setText("");
        carePlanPROTTxt.setText("");
        carePlanCHOSTxt.setText("");
        carePlanFATSTxt.setText("");
        carePlanFLUIDSTxt.setText("");
        carePlanKCALSTxt.setText("");
        carePlanRODTxt.setText("");
        carePlanRMFPTxa.setText("");
        
        if (oralCarePlanScrollPane.isShowing()) {
            for (int k = 0; k < oralCTable.getRowCount(); k++) {
                for (int r = 0; r < oralCTable.getColumnCount(); r++) {
                    oralCTable.setValueAt(null, k, r);
                }
            }
        } else {
            for (int k = 0; k < carePlanValueTable.getRowCount(); k++) {
                for (int r = 0; r < carePlanValueTable.getColumnCount(); r++) {
                    carePlanValueTable.setValueAt(null, k, r);
                }
            }
        }
            
        
        carePlanRMFPTxa.setText("");
        actualPROTTxt.setText("");
        actualCHOSTxt.setText("");
        actualFATSTxt.setText("");
        actualKCALSTxt.setText("");
        
    }    
    
    public void ClearPaedPlanFields() {
        paedNameNoTxt.setText("");
        paedFRDietPrescrTxt.setText("");
        paedROACmbx.setSelectedItem("Oral Administration");
        feedingInstruTxa.setText("");
        
        for (int k = 0; k < paedFRTable.getRowCount(); k++) {
            for (int r = 0; r < paedFRTable.getColumnCount(); r++) {
                paedFRTable.setValueAt(null, k, r);
            }
        }
        
        paedRegimeProvTxa.setText("");        
    }    
   
    
    private void PrintPatientsRegimeForm() {
        
        if (oralCarePlanScrollPane.isShowing()) {
            com.afrisoftech.reports.NutritionAdultPatientOralRegimeFormPdf.connectDB = connectDB;
                com.afrisoftech.reports.NutritionAdultPatientOralRegimeFormPdf regForm = new com.afrisoftech.reports.NutritionAdultPatientOralRegimeFormPdf();
                regForm.generatePdf(nameNoTxt.getText().toString(), headerDatePicker.getDate().toLocaleString(), carePlanRMFPTxa.getText().toString(),
                        carePlanPROTTxt.getText().toString(), carePlanCHOSTxt.getText().toString(), carePlanFATSTxt.getText().toString(), 
                        carePlanFLUIDSTxt.getText().toString(), carePlanKCALSTxt.getText().toString());
        } else {
            com.afrisoftech.reports.NutritionAdultPatientRegimeFormPdf.connectDB = connectDB;
                com.afrisoftech.reports.NutritionAdultPatientRegimeFormPdf regForm = new com.afrisoftech.reports.NutritionAdultPatientRegimeFormPdf();
                regForm.generatePdf(nameNoTxt.getText().toString(), headerDatePicker.getDate().toLocaleString(), carePlanRMFPTxa.getText().toString(),
                        carePlanPROTTxt.getText().toString(), carePlanCHOSTxt.getText().toString(), carePlanFATSTxt.getText().toString(), 
                        carePlanFLUIDSTxt.getText().toString(), carePlanKCALSTxt.getText().toString());
        
        }
    }
    
    private void PrintPaedPatientsRegimeForm() {
        com.afrisoftech.reports.NutritionPaedPatientRegimeFormPdf.connectDB = connectDB;
            com.afrisoftech.reports.NutritionPaedPatientRegimeFormPdf regForm = new com.afrisoftech.reports.NutritionPaedPatientRegimeFormPdf();
            regForm.generatePdf(paedNameNoTxt.getText().toString(), paedHeaderDatePicker.getDate().toLocaleString());
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actualCHOSTxt;
    private javax.swing.JTextField actualFATSTxt;
    private javax.swing.JTextField actualKCALSTxt;
    private javax.swing.JPanel actualNutriPrePanel;
    private javax.swing.JTextField actualPROTTxt;
    private javax.swing.JPanel adultsNutritionAssessPanel;
    private javax.swing.JLabel carePlanCHOSLbl;
    private javax.swing.JTextField carePlanCHOSTxt;
    private javax.swing.JButton carePlanClearBtn;
    private javax.swing.JLabel carePlanFATSLbl;
    private javax.swing.JTextField carePlanFATSTxt;
    private javax.swing.JLabel carePlanFLUIDSLbl;
    private javax.swing.JTextField carePlanFLUIDSTxt;
    private javax.swing.JTextField carePlanKCALSTxt;
    private javax.swing.JButton carePlanOKbtn;
    private javax.swing.JLabel carePlanPROTLbl;
    private javax.swing.JTextField carePlanPROTTxt;
    private javax.swing.JPanel carePlanPanel;
    private javax.swing.JTextArea carePlanRMFPTxa;
    private javax.swing.JLabel carePlanRODLbl;
    private javax.swing.JTextField carePlanRODTxt;
    private javax.swing.JButton carePlanRemovebtn;
    private javax.swing.JScrollPane carePlanValueRMFPScrollPane4;
    private javax.swing.JScrollPane carePlanValueScrollPane;
    private javax.swing.JTable carePlanValueTable;
    private javax.swing.JButton deseaseSearchBtn;
    private javax.swing.JPanel dieaseaseSearchPanel;
    private javax.swing.JTextField dieaseaseSearchTxt;
    private javax.swing.JLabel dieseaseSearchLabel;
    private javax.swing.JPanel diseaseSearchPanel;
    private javax.swing.JPanel familyHistoryPanel;
    private javax.swing.JPanel feedingInstruPanel;
    private javax.swing.JScrollPane feedingInstruScrollPane;
    private javax.swing.JTextArea feedingInstruTxa;
    private javax.swing.JDialog feedingRegimeFoodSearchDialog;
    private javax.swing.JDialog feedingRegimeFoodSearchDialog1;
    private javax.swing.JButton feedingSearchBtn;
    private javax.swing.JButton feedingSearchBtn1;
    private javax.swing.JPanel feedingSearchDialogPanel;
    private javax.swing.JPanel feedingSearchDialogPanel1;
    private javax.swing.JScrollPane feedingSearchScrollPane;
    private javax.swing.JScrollPane feedingSearchScrollPane1;
    private javax.swing.JTable feedingSearchTable;
    private javax.swing.JTable feedingSearchTable1;
    private javax.swing.JPanel fillingPanel;
    private javax.swing.JPanel fillingPanel1;
    private com.afrisoftech.lib.DatePicker headerDatePicker;
    private javax.swing.JPanel inApproxNutriIntakePanel1;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JLabel nameNoLabel;
    private javax.swing.JButton nameNoSearchBtn;
    private javax.swing.JPanel nameNoSearchPanel;
    private javax.swing.JTextField nameNoTxt;
    private javax.swing.JSplitPane nutriHomeSplitPane;
    private javax.swing.JPanel nutriRequirePanel;
    private javax.swing.JPanel nutritionAssessmentPanel;
    private javax.swing.JPanel nutritionAssessmentPanel1;
    private javax.swing.JTabbedPane nutritionAssessmentTabbedPane;
    private javax.swing.JTabbedPane nutritionAssessmentTabbedPane1;
    private javax.swing.JTabbedPane nutritionHomeTabbedPane;
    private javax.swing.JSplitPane nutritionSplitPane;
    private javax.swing.JSplitPane nutritionSplitPane1;
    private javax.swing.JTable oralCTable;
    private javax.swing.JScrollPane oralCarePlanScrollPane;
    private javax.swing.JPanel oralPanel;
    private javax.swing.JPanel paedButtonPanel;
    private javax.swing.JButton paedFRClearBtn;
    private javax.swing.JTextField paedFRDietPrescrTxt;
    private javax.swing.JButton paedFRFBtn;
    private javax.swing.JScrollPane paedFRFScrollPane;
    private javax.swing.JDialog paedFRFSearchDialog;
    private javax.swing.JPanel paedFRFSearchPanel;
    private javax.swing.JTable paedFRFTable;
    private javax.swing.JButton paedFRRemoveBtn;
    private javax.swing.JButton paedFRSVPbtn;
    private javax.swing.JTable paedFRTable;
    private javax.swing.JPanel paedFRTablePanel;
    private javax.swing.JScrollPane paedFRTableScrollPane;
    private javax.swing.JPanel paedFamilyHistoryPanel;
    private javax.swing.JTextField paedFeedTxt;
    private com.afrisoftech.lib.DatePicker paedHeaderDatePicker;
    private javax.swing.JLabel paedNameNoLabel;
    private javax.swing.JButton paedNameNoSearchBtn;
    private javax.swing.JPanel paedNameNoSearchPanel;
    private javax.swing.JTextField paedNameNoTxt;
    private javax.swing.JSplitPane paedNutriHomeSplitPane;
    private javax.swing.JPanel paedNutritionAssessPanel;
    private javax.swing.JPanel paedPatientDetailsPanel;
    private javax.swing.JTextArea paedPatientDetailsTxa;
    private javax.swing.JDialog paedPatientSearch;
    private javax.swing.JPanel paedPatientSearchDialogPanel;
    private javax.swing.JComboBox paedROACmbx;
    private javax.swing.JPanel paedRegimeProvPanel;
    private javax.swing.JScrollPane paedRegimeProvScrollPane;
    private javax.swing.JTextArea paedRegimeProvTxa;
    private javax.swing.JPanel patientDetailsPanel;
    private javax.swing.JPanel patientDetailsPanel1;
    private javax.swing.JTextArea patientDetailsTxa;
    private javax.swing.JDialog patientDiagnosisSearch;
    private javax.swing.JButton patientDiagnosisSearchBtn;
    private javax.swing.JPanel patientDiagnosisSearchDialogPanel;
    private javax.swing.JScrollPane patientDiagnosisSearchScrollPane;
    private javax.swing.JTable patientDiagnosisSearchTable;
    private javax.swing.JTextField patientDiagnosisSearchTxt;
    private javax.swing.JButton patientPaedSearchBtn;
    private javax.swing.JScrollPane patientPaedSearchScrollPane;
    private javax.swing.JTable patientPaedSearchTable;
    private javax.swing.JDialog patientSearch;
    private javax.swing.JButton patientSearchBtn;
    private javax.swing.JPanel patientSearchDialogPanel;
    private javax.swing.JScrollPane patientSearchScrollPane;
    private javax.swing.JTable patientSearchTable;
    private javax.swing.JPanel reffDieNutrImpPanel;
    private javax.swing.JPanel reffDieNutrImpPanel1;
    private javax.swing.JTextField searchFeedingTxt;
    private javax.swing.JTextField searchFeedingTxt1;
    private javax.swing.JPanel searchForPatientPanel;
    private javax.swing.JPanel searchForPatientPanel1;
    private javax.swing.JTextField searchPaedPatientNumbTxt;
    private javax.swing.JTextField searchPatientNumbTxt;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables

    private void PrintPatientsAssessementForm() {
        com.afrisoftech.reports.NutritionAdultPatientAssessmentFormPdf.connectDB = connectDB;
            com.afrisoftech.reports.NutritionAdultPatientAssessmentFormPdf regForm = new com.afrisoftech.reports.NutritionAdultPatientAssessmentFormPdf();
            regForm.generatePdf(nameNoTxt.getText().toString(), headerDatePicker.getDate());
    }
    
    private void PrintPaedPatientsAssessementForm() {
        com.afrisoftech.reports.NutritionPaedPatientAssessmentFormPdf.connectDB = connectDB;
            com.afrisoftech.reports.NutritionPaedPatientAssessmentFormPdf regForm = new com.afrisoftech.reports.NutritionPaedPatientAssessmentFormPdf();
            regForm.generatePdf(paedNameNoTxt.getText().toString(), paedHeaderDatePicker.getDate());
    }


}
