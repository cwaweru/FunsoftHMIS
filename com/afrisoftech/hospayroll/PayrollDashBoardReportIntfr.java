/*
 * ReportIntfr.java
 *
 * Created on July 6, 2008, 4:40 PM
 */
package com.afrisoftech.hospayroll;

import biz.systempartners.reports.*;
import java.sql.SQLException;
//import org.openide.util.Exceptions;
//import org.openide.util.Exceptions;

/**
 *
 * @author Charles Waweru <cwaweru@systempartners.biz>
 */
public class PayrollDashBoardReportIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    String bank = "";

    /**
     * Creates new form ReportIntfr
     */
    public PayrollDashBoardReportIntfr(java.sql.Connection connDb) {
        connectDB = connDb;
        initComponents();
        //  loadReport();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        cashSalesPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        export2SpreadSheetBtn = new javax.swing.JButton();
        beginDatePicker = new com.afrisoftech.lib.DatePicker();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        beginDateLbl = new javax.swing.JLabel();
        endDateLbl = new javax.swing.JLabel();
        printBtn = new javax.swing.JButton();
        openReportBtn = new javax.swing.JButton();
        saveReportBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        GradeCbx = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        dptCbx = new javax.swing.JComboBox<>();
        reportBodyPanel = new javax.swing.JPanel();
        reportBodyJscrollPane = new javax.swing.JScrollPane();
        reportBodyTable = new com.afrisoftech.dbadmin.JXTable();
        buttonPanel = new javax.swing.JPanel();
        closeBtn = new javax.swing.JButton();
        reloadReportBtn = new javax.swing.JButton();
        spaceLable = new javax.swing.JLabel();
        totalsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        progressStatusShiftsTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        headerPanel1 = new javax.swing.JPanel();
        export2SpreadSheetBtn1 = new javax.swing.JButton();
        beginDatePicker1 = new com.afrisoftech.lib.DatePicker();
        endDatePicker1 = new com.afrisoftech.lib.DatePicker();
        beginDateLbl1 = new javax.swing.JLabel();
        endDateLbl1 = new javax.swing.JLabel();
        openReportBtn1 = new javax.swing.JButton();
        employeeGroupLbl = new javax.swing.JLabel();
        directorsteCmbx = new javax.swing.JComboBox();
        compCbx = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        reportBodyJscrollPane1 = new javax.swing.JScrollPane();
        reportBodyTable1 = new com.afrisoftech.dbadmin.JXTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Funsoft Payroll DashBoard & Analysis");
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        cashSalesPanel.setLayout(new java.awt.GridBagLayout());

        headerPanel.setLayout(new java.awt.GridBagLayout());

        export2SpreadSheetBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Appointments.png"))); // NOI18N
        export2SpreadSheetBtn.setMnemonic('x');
        export2SpreadSheetBtn.setText("Export report ...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(export2SpreadSheetBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(beginDatePicker, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(endDatePicker, gridBagConstraints);

        beginDateLbl.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(beginDateLbl, gridBagConstraints);

        endDateLbl.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(endDateLbl, gridBagConstraints);

        printBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Devices & Hardware/Printer 4.png"))); // NOI18N
        printBtn.setMnemonic('p');
        printBtn.setText("Print ...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(printBtn, gridBagConstraints);

        openReportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Desktop.png"))); // NOI18N
        openReportBtn.setMnemonic('o');
        openReportBtn.setText("Open Report ...");
        openReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReportBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(openReportBtn, gridBagConstraints);

        saveReportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Globe 4.png"))); // NOI18N
        saveReportBtn.setMnemonic('s');
        saveReportBtn.setText("Save Report ...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(saveReportBtn, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT company_name from payroll_comsetup order by company_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        headerPanel.add(jComboBox1, gridBagConstraints);

        jLabel1.setText("Grade");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(jLabel1, gridBagConstraints);

        GradeCbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union select DISTINCT employee_grade from master_file order by 1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        headerPanel.add(GradeCbx, gridBagConstraints);

        jLabel2.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(jLabel2, gridBagConstraints);

        dptCbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union select DISTINCT department from master_file order by 1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        headerPanel.add(dptCbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        cashSalesPanel.add(headerPanel, gridBagConstraints);

        reportBodyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()));
        reportBodyPanel.setLayout(new java.awt.GridBagLayout());

        reportBodyTable.setForeground(new java.awt.Color(0, 0, 255));
        reportBodyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        reportBodyJscrollPane.setViewportView(reportBodyTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportBodyPanel.add(reportBodyJscrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        cashSalesPanel.add(reportBodyPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        closeBtn.setMnemonic('l');
        closeBtn.setText("Close Reporter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeBtn, gridBagConstraints);

        reloadReportBtn.setMnemonic('r');
        reloadReportBtn.setText("Reload report");
        reloadReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadReportBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(reloadReportBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(spaceLable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        cashSalesPanel.add(buttonPanel, gridBagConstraints);

        totalsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        totalsPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("Progress status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        totalsPanel.add(jLabel3, gridBagConstraints);

        progressStatusShiftsTxt.setEditable(false);
        progressStatusShiftsTxt.setForeground(new java.awt.Color(0, 255, 0));
        progressStatusShiftsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 50.0;
        gridBagConstraints.weighty = 1.0;
        totalsPanel.add(progressStatusShiftsTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        cashSalesPanel.add(totalsPanel, gridBagConstraints);

        jTabbedPane1.addTab("Payroll Analysis", cashSalesPanel);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        headerPanel1.setLayout(new java.awt.GridBagLayout());

        export2SpreadSheetBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Appointments.png"))); // NOI18N
        export2SpreadSheetBtn1.setMnemonic('x');
        export2SpreadSheetBtn1.setText("Load Summary Report ...");
        export2SpreadSheetBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export2SpreadSheetBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel1.add(export2SpreadSheetBtn1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel1.add(beginDatePicker1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel1.add(endDatePicker1, gridBagConstraints);

        beginDateLbl1.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        headerPanel1.add(beginDateLbl1, gridBagConstraints);

        endDateLbl1.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        headerPanel1.add(endDateLbl1, gridBagConstraints);

        openReportBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Desktop.png"))); // NOI18N
        openReportBtn1.setMnemonic('o');
        openReportBtn1.setText("Load Detailed Report ...");
        openReportBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReportBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel1.add(openReportBtn1, gridBagConstraints);

        employeeGroupLbl.setText("Directorate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        headerPanel1.add(employeeGroupLbl, gridBagConstraints);

        directorsteCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT description FROM pb_sub_activities where payroll_directorate = true ORDER BY 1 ASC")
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        headerPanel1.add(directorsteCmbx, gridBagConstraints);

        compCbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT company_name from payroll_comsetup order by company_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 40);
        headerPanel1.add(compCbx, gridBagConstraints);

        jLabel4.setText("Company");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        headerPanel1.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(headerPanel1, gridBagConstraints);

        reportBodyTable1.setForeground(new java.awt.Color(0, 0, 255));
        reportBodyTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        reportBodyJscrollPane1.setViewportView(reportBodyTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel1.add(reportBodyJscrollPane1, gridBagConstraints);

        jTabbedPane1.addTab("Directorate Analysis", jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 1087, 455);
    }// </editor-fold>//GEN-END:initComponents

    private void openReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReportBtnActionPerformed

        loadReport();
        // TODO add your handling code here:
    }//GEN-LAST:event_openReportBtnActionPerformed

    private void reloadReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadReportBtnActionPerformed

        loadReport();

        // TODO add your handling code here:
    }//GEN-LAST:event_reloadReportBtnActionPerformed

    private void openReportBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReportBtn1ActionPerformed
        loadDirectorateReport();
        // TODO add your handling code here:
    }//GEN-LAST:event_openReportBtn1ActionPerformed

    private void export2SpreadSheetBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export2SpreadSheetBtn1ActionPerformed
        loadDirectorateSummaryReport();  // TODO add your handling code here:
    }//GEN-LAST:event_export2SpreadSheetBtn1ActionPerformed

    private void loadDirectorateSummaryReport() {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        bank = compCbx.getSelectedItem().toString();

        String dir = "";
        java.lang.Object[] earningsArray = getListofEarningsDirectorate();

        java.util.Vector rowVector = new java.util.Vector(1);

        java.util.Vector columnVector = new java.util.Vector(1);

        columnVector.addElement("Directorate");

        //columnVector.addElement("Staff Name");
        ///if (directorsteCmbx.getSelectedItem().toString().equals("-")) columnVector.addElement("Directorate");
        columnVector.addElement("Department");
        columnVector.addElement("Gross Pay");
        columnVector.addElement("NSSF COMPANY");

        columnVector.addElement("PENSION COMPANY");
        columnVector.addElement("TOTAL");

        Double grandearningstotal = 0.00;
        Double grandnssfTotal = 0.00;
        Double grandpensionTotal = 0.00;
        Double grandtotalEmoluments = 0.00;

//        for (int i = 0; i < staffNoArray.length; i++) {
//            System.err.println("Working on staff "+staffNoArray[i].toString() );
        try {
            java.sql.Statement stmtC = connectDB.createStatement();
            java.sql.ResultSet rsetC = null;
            if (directorsteCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                rsetC = stmtC.executeQuery("SELECT DISTINCT master_file.directorate FROM posting,master_file WHERE  master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");

            } else {
                rsetC = stmtC.executeQuery("SELECT DISTINCT master_file.directorate FROM posting,master_file WHERE master_file.directorate = '" + directorsteCmbx.getSelectedItem().toString() + "'  AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");
            }
            while (rsetC.next()) {
                dir = rsetC.getString(1);
                java.util.Vector valuesVector = new java.util.Vector(1);
                valuesVector.addElement(dir);
                valuesVector.addElement("");
                valuesVector.addElement("");
                valuesVector.addElement("");
                valuesVector.addElement("");
                valuesVector.addElement("");
                rowVector.addElement(valuesVector);

                Double earningstotal = 0.00;
                Double nssfTotal = 0.00;
                Double pensionTotal = 0.00;
                Double totalEmoluments = 0.00;

                java.sql.Statement stmtCheck = connectDB.createStatement();
                java.sql.ResultSet rsetCheck = stmtCheck.executeQuery("SELECT DISTINCT master_file.department FROM posting,master_file WHERE master_file.directorate = '" + dir + "'  AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");
                while (rsetCheck.next()) {
                    Double Emoluments = 0.00;
                    java.util.Vector valuesVector1 = new java.util.Vector(1);
                    valuesVector1.addElement("");
                    valuesVector1.addElement(rsetCheck.getString(1));

                    java.sql.PreparedStatement pstmt;
                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no IN (SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE \n" +
                    " master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "'  AND posting.company_name ilike '"+bank+"' AND upper(department) =  '" + rsetCheck.getString(1) + "' AND directorate = '" + dir + "' ) AND   allowance_deduction ilike 'earning%' and company_name ilike '"+bank+"'  AND date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' ");
                    java.sql.ResultSet rset = pstmt.executeQuery();
                    while (rset.next()) {
                        valuesVector1.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(rset.getDouble(1)));
                        earningstotal = earningstotal + rset.getDouble(1);
                        Emoluments = Emoluments + rset.getDouble(1);
                    }

                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no IN (SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE \n" +
                    " master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "'  AND posting.company_name ilike '"+bank+"' AND upper(department) =  '" + rsetCheck.getString(1) + "' AND directorate = '" + dir + "' ) AND  description ILIKE 'N.S.S.F' AND date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' ");
                    rset = pstmt.executeQuery();
                    while (rset.next()) {
                        valuesVector1.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(rset.getDouble(1)));
                        nssfTotal = nssfTotal + rset.getDouble(1);
                        Emoluments = Emoluments + rset.getDouble(1);
                    }

                    pstmt = connectDB.prepareStatement("SELECT sum(amount)*2 FROM posting WHERE staff_no IN (SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE \n" +
                    " master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "'  AND posting.company_name ilike '"+bank+"' AND upper(department) =  '" + rsetCheck.getString(1) + "' AND directorate = '" + dir + "' ) AND   description ILIKE 'Pension Contr. self' AND date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' ");
                    rset = pstmt.executeQuery();
                    while (rset.next()) {
                        valuesVector1.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(rset.getDouble(1)));
                        pensionTotal = pensionTotal + rset.getDouble(1);
                        Emoluments = Emoluments + rset.getDouble(1);
                    }

                    valuesVector1.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(Emoluments));
                    totalEmoluments = totalEmoluments + Emoluments;
                    rowVector.addElement(valuesVector1);

                }
                java.util.Vector valuesVector2 = new java.util.Vector(1);
                valuesVector2.addElement("");
                valuesVector2.addElement("TOTAL");
                grandearningstotal=grandearningstotal+earningstotal;
                grandnssfTotal = grandnssfTotal + nssfTotal;
                grandpensionTotal =grandpensionTotal+pensionTotal;
                grandtotalEmoluments =grandtotalEmoluments +totalEmoluments;
                
                
                valuesVector2.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(earningstotal));
                valuesVector2.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(nssfTotal));
                valuesVector2.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(pensionTotal));
                valuesVector2.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalEmoluments));
                rowVector.addElement(valuesVector2);

                java.util.Vector valuesVector3 = new java.util.Vector(1);
                valuesVector3.addElement("");
                valuesVector3.addElement("");
                valuesVector3.addElement("");
                valuesVector3.addElement("");
                valuesVector3.addElement("");
                valuesVector3.addElement("");
                rowVector.addElement(valuesVector3);

            }

            java.util.Vector valuesVector4 = new java.util.Vector(1);
            valuesVector4.addElement("GRAND TOTAL");
            valuesVector4.addElement("");
            valuesVector4.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(grandearningstotal));
            valuesVector4.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(grandnssfTotal));
            valuesVector4.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(grandpensionTotal));
            valuesVector4.addElement(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(grandtotalEmoluments));
            rowVector.addElement(valuesVector4);

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        reportBodyTable1.setModel(new javax.swing.table.DefaultTableModel(rowVector, columnVector));

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    }

    private void loadDirectorateReport() {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        bank = compCbx.getSelectedItem().toString();
        java.lang.Object[] staffNoArray = getListofStaffInDirectorate();
        java.lang.Object[] earningsArray = getListofEarningsDirectorate();

        java.util.Vector rowVector = new java.util.Vector(1);

        java.util.Vector columnVector = new java.util.Vector(1);

        columnVector.addElement("Staff No.");

        columnVector.addElement("Staff Name");
        if (directorsteCmbx.getSelectedItem().toString().equals("-")) {
            columnVector.addElement("Directorate");
        }
        columnVector.addElement("Department");
        columnVector.addElement("Gross Pay");
        columnVector.addElement("NSSF COMPANY");

        columnVector.addElement("PENSION COMPANY");
        columnVector.addElement("TOTAL");
        
        double grandeaenings = 0.00;
        double grandnssf = 0.00;
        double grandpension = 0.00;
        double grandemoluments = 0.00;
        for (int i = 0; i < staffNoArray.length; i++) {
            System.err.println("Working on staff " + staffNoArray[i].toString());
            Double earningstotal = 0.00;
            Double totalEmoluments = 0.00;
            java.util.Vector valuesVector = new java.util.Vector(1);
            valuesVector.addElement(staffNoArray[i]);
            valuesVector.addElement(getStaffNameDirectorate(connectDB, staffNoArray[i].toString()));
            if (directorsteCmbx.getSelectedItem().toString().equals("-")) {
                valuesVector.addElement(getStaffDirectorate(connectDB, staffNoArray[i].toString()));
            }
            valuesVector.addElement(getStaffDepartment(connectDB, staffNoArray[i].toString()));

            for (int j = 0; j < earningsArray.length; j++) {
                java.sql.PreparedStatement pstmt;
                try {
                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no = ? AND description = ? AND date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' ");
                    pstmt.setObject(1, staffNoArray[i]);
                    pstmt.setObject(2, earningsArray[j]);
                    java.sql.ResultSet rset = pstmt.executeQuery();

                    while (rset.next()) {
                        // valuesVector.addElement(rset.getDouble(1));
                        earningstotal = earningstotal + rset.getDouble(1);
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }
            valuesVector.addElement(earningstotal);
            grandeaenings = grandeaenings + earningstotal ;
            totalEmoluments = totalEmoluments + earningstotal;

            try {
                java.sql.Statement st3A = connectDB.createStatement();
                java.sql.ResultSet rset1As = null;

                rset1As = st3A.executeQuery("select sum(amount) from posting where date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' and staff_no = '" + staffNoArray[i] + "' AND description ILIKE 'N.S.S.F' and company_name ilike '" + bank + "' ");

                while (rset1As.next()) {
                    valuesVector.addElement(rset1As.getDouble(1));
                    grandnssf = grandnssf +rset1As.getDouble(1);
                    totalEmoluments = totalEmoluments + rset1As.getDouble(1);
                }

                rset1As = st3A.executeQuery("select sum(amount)*2 from posting where date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' and staff_no = '" + staffNoArray[i] + "' AND description ILIKE 'Pension Contr. self' and company_name ilike '" + bank + "' ");

                while (rset1As.next()) {
                    valuesVector.addElement(rset1As.getDouble(1));
                    grandpension = grandpension +rset1As.getDouble(1);
                    totalEmoluments = totalEmoluments + rset1As.getDouble(1);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            valuesVector.addElement(totalEmoluments);
            grandemoluments = grandemoluments+totalEmoluments;
            rowVector.addElement(valuesVector);
        }
        
        java.util.Vector valuesVector1 = new java.util.Vector(1);
        valuesVector1.addElement("GrandTotal");
        valuesVector1.addElement("");
        valuesVector1.addElement("");
         if (directorsteCmbx.getSelectedItem().toString().equals("-")) {
             valuesVector1.addElement("");
         }
         
         valuesVector1.addElement(grandeaenings);
         valuesVector1.addElement(grandnssf);
         valuesVector1.addElement(grandpension);
         valuesVector1.addElement(grandemoluments);
        
        rowVector.addElement(valuesVector1);

        reportBodyTable1.setModel(new javax.swing.table.DefaultTableModel(rowVector, columnVector));

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    }

    private void loadReport() {

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        bank = jComboBox1.getSelectedItem().toString();
        java.lang.Object[] earningsArray = getListofEarnings();
        java.lang.Object[] nonCashBenefitArray = getListofnonCashBenefit();
        java.lang.Object[] reliefArray = getListofreliefs();
        java.lang.Object[] deductionsArray = getListofDeductions();
        java.lang.Object[] balancesArray = getListofBalances();

        java.lang.Object[] staffNoArray = getListofStaff();

        java.lang.Object paymodeArray[] = this.getListofRevenuePaymodes();

        java.util.Vector rowVector = new java.util.Vector(1);

        java.util.Vector columnVector = new java.util.Vector(1);

        columnVector.addElement("Staff No.");

        columnVector.addElement("Staff Name");
        columnVector.addElement("Scale");
        columnVector.addElement("Designation");

        columnVector.addElement("Department");
        columnVector.addElement("Directorate");
        columnVector.addElement("ID No");
        columnVector.addElement("KRA PIN");
        columnVector.addElement("NSSF No");
        columnVector.addElement("NHIF No");

        for (int j = 0; j < earningsArray.length; j++) {
            columnVector.addElement(earningsArray[j]);
        }
        columnVector.addElement("Gross Earning");

        columnVector.addElement("Non Cash Benefits");

        for (int j = 0; j < nonCashBenefitArray.length; j++) {
            columnVector.addElement(nonCashBenefitArray[j]);
        }

        columnVector.addElement("Total Non Cash Benefits");
        columnVector.addElement("Total Taxable Amount");

        columnVector.addElement("Less Relief");

        for (int j = 0; j < reliefArray.length; j++) {
            columnVector.addElement(reliefArray[j]);
        }

        columnVector.addElement("Total Non Taxable Amount");
        columnVector.addElement("Net Taxable Amount");

        columnVector.addElement("Tax Charged");
        columnVector.addElement("Personal Relief");
        columnVector.addElement("Insurance Relief");
        columnVector.addElement("PAYE");
        columnVector.addElement("DEDUCTIONS");
        for (int j = 0; j < deductionsArray.length; j++) {
            columnVector.addElement(deductionsArray[j]);
        }
        columnVector.addElement("Total Deductions");
        columnVector.addElement("Net Pay");

        columnVector.addElement("Information");
        columnVector.addElement("Pension(Company)");
        columnVector.addElement("NSSF (Company)");
        columnVector.addElement("Balances");

        for (int j = 0; j < balancesArray.length; j++) {
            columnVector.addElement(balancesArray[j] + " Bal.");
        }

        // Detail for revenue streams
        for (int i = 0; i < staffNoArray.length; i++) {

            Double earningstotal = 0.00;
            Double noncashBenefittotal = 0.00;
            Double nontaxabletotal = 0.00;
            Double deductionstotal = 0.00;

            //Earnings ------
            java.util.Vector valuesVector = new java.util.Vector(1);
            valuesVector.addElement(staffNoArray[i]);
            valuesVector.addElement(getStaffName(connectDB, staffNoArray[i].toString()));

            valuesVector.addElement(getStaffScale(connectDB, staffNoArray[i].toString()));
            valuesVector.addElement(getStaffDes(connectDB, staffNoArray[i].toString()));
            valuesVector.addElement(getStaffDepartment(connectDB, staffNoArray[i].toString()));
            valuesVector.addElement(getStaffDirectorate(connectDB, staffNoArray[i].toString()));

            valuesVector.addElement(getStaffIDNo(connectDB, staffNoArray[i].toString()));
            valuesVector.addElement(getStaffPinNo(connectDB, staffNoArray[i].toString()));

            valuesVector.addElement(getStaffNssf(connectDB, staffNoArray[i].toString()));
            valuesVector.addElement(getStaffNhif(connectDB, staffNoArray[i].toString()));

            for (int j = 0; j < earningsArray.length; j++) {
                java.sql.PreparedStatement pstmt;
                try {
                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no = ? AND description = ? AND date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ");
                    pstmt.setObject(1, staffNoArray[i]);
                    pstmt.setObject(2, earningsArray[j]);
                    java.sql.ResultSet rset = pstmt.executeQuery();

                    while (rset.next()) {
                        valuesVector.addElement(rset.getDouble(1));
                        earningstotal = earningstotal + rset.getDouble(1);
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }
            valuesVector.addElement(earningstotal);

            valuesVector.addElement("");

            for (int j = 0; j < nonCashBenefitArray.length; j++) {
                java.sql.PreparedStatement pstmt;
                try {
                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no = ? AND description = ? AND date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ");
                    pstmt.setObject(1, staffNoArray[i]);
                    pstmt.setObject(2, nonCashBenefitArray[j]);
                    java.sql.ResultSet rset = pstmt.executeQuery();

                    while (rset.next()) {
                        valuesVector.addElement(rset.getDouble(1));
                        noncashBenefittotal = noncashBenefittotal + rset.getDouble(1);
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }

            valuesVector.addElement(noncashBenefittotal);
            valuesVector.addElement(noncashBenefittotal + earningstotal);

            valuesVector.addElement("");

            for (int j = 0; j < reliefArray.length; j++) {
                java.sql.PreparedStatement pstmt;
                try {
                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no = ? AND description = ? AND date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ");
                    pstmt.setObject(1, staffNoArray[i]);
                    pstmt.setObject(2, reliefArray[j]);
                    java.sql.ResultSet rset = pstmt.executeQuery();

                    while (rset.next()) {
                        valuesVector.addElement(rset.getDouble(1));
                        nontaxabletotal = nontaxabletotal + rset.getDouble(1);
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }

            valuesVector.addElement(nontaxabletotal);
            valuesVector.addElement(noncashBenefittotal + earningstotal - nontaxabletotal);

            try {
                java.sql.Statement st14 = connectDB.createStatement();
                java.sql.ResultSet rset14 = st14.executeQuery("select sum(tx.amount) from posting tx where  staff_no = '" + staffNoArray[i] + "'  AND tx.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND (tx.description ILIKE 'PAYE%' OR tx.description ILIKE 'Monthly Personal Relief%' OR tx.description ILIKE 'P.A.Y.E%') and company_name ilike '" + bank + "'");
                while (rset14.next()) {
                    valuesVector.addElement(rset14.getDouble(1));

                }

                rset14 = st14.executeQuery("select sum(tx.amount) from posting tx where  staff_no = '" + staffNoArray[i] + "'  AND tx.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND (tx.description ILIKE 'Monthly Personal Relief%' ) and company_name ilike '" + bank + "'");
                while (rset14.next()) {
                    valuesVector.addElement(rset14.getDouble(1));

                }
                
                rset14 = st14.executeQuery("select sum(tx.amount) from posting tx where  staff_no = '" + staffNoArray[i] + "'  AND tx.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND (tx.description ILIKE 'Insurance Relief' ) and company_name ilike '" + bank + "'");
                while (rset14.next()) {
                    valuesVector.addElement(rset14.getDouble(1));

                }

                rset14 = st14.executeQuery("select sum(tx.amount) from posting tx where  staff_no = '" + staffNoArray[i] + "'  AND tx.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND (tx.description ILIKE 'PAYE%' OR  tx.description ILIKE 'P.A.Y.E%') and company_name ilike '" + bank + "'");
                while (rset14.next()) {
                    valuesVector.addElement(rset14.getDouble(1));

                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }

            valuesVector.addElement("");

            for (int j = 0; j < deductionsArray.length; j++) {
                java.sql.PreparedStatement pstmt;
                try {
                    pstmt = connectDB.prepareStatement("SELECT sum(amount) FROM posting WHERE staff_no = ? AND description = ? AND date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ");
                    pstmt.setObject(1, staffNoArray[i]);
                    pstmt.setObject(2, deductionsArray[j]);
                    java.sql.ResultSet rset = pstmt.executeQuery();

                    while (rset.next()) {
                        valuesVector.addElement(rset.getDouble(1));
                        deductionstotal = deductionstotal + rset.getDouble(1);
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }

            valuesVector.addElement(deductionstotal);

            try {
                java.sql.Statement st19 = connectDB.createStatement();
                java.sql.ResultSet rset19 = st19.executeQuery("select sum(amount) from net_pay_view dv where dv.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' and staff_no = '" + staffNoArray[i] + "' and company_name ilike '" + bank + "'");
                while (rset19.next()) {
                    valuesVector.addElement(rset19.getDouble(1));
                }

                valuesVector.addElement("");

                java.sql.Statement st3A = connectDB.createStatement();
                java.sql.ResultSet rset1As = st3A.executeQuery("select sum(amount)*2 from posting where date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' and staff_no = '" + staffNoArray[i] + "' AND description ILIKE 'Pension Contr. self' and company_name ilike '" + bank + "' ");

                while (rset1As.next()) {
                    valuesVector.addElement(rset1As.getDouble(1));
                }

                rset1As = st3A.executeQuery("select sum(amount) from posting where date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' and staff_no = '" + staffNoArray[i] + "' AND description ILIKE 'N.S.S.F' and company_name ilike '" + bank + "' ");

                while (rset1As.next()) {
                    valuesVector.addElement(rset1As.getDouble(1));
                }

                valuesVector.addElement("");

                for (int j = 0; j < balancesArray.length; j++) {
                    rset1As = st3A.executeQuery("SELECT date, staff_no, staff_name, amount, month_deduction, deducted_amount, "
                            + "CASE WHEN ((( SELECT deductions_allowances.balance_category  FROM deductions_allowances "
                            + "WHERE deductions_allowances.description::text =  payroll_balances2.sacco_name::text))::text) = 'TOTAL'::text "
                            + "THEN amount+deducted_amount   ELSE amount-deducted_amount END  as   balance, sacco_name , "
                            + "CASE WHEN ((( SELECT deductions_allowances.balance_category  FROM deductions_allowances "
                            + "WHERE deductions_allowances.description::text = payroll_balances2.sacco_name::text))::text) = 'TOTAL'::text "
                            + "THEN 'added'   ELSE 'lesss' END  as   outcome FROM payroll_balances2 where upper(sacco_name) = upper('" + balancesArray[j] + "') AND  staff_no='" + staffNoArray[i] + "' AND  sacco_name not ilike 'Staff Welfare' AND  sacco_name not ilike 'UNION DUE'");

                    Double bal_ = 0.00;
                    while (rset1As.next()) {

                        Double ded_ = 0.00;

                        bal_ = rset1As.getDouble(4);

                        java.sql.Statement st4c = connectDB.createStatement();
                        java.sql.ResultSet rset4 = st4c.executeQuery("SELECT sum(posting.amount) AS sum   FROM posting   "
                                + "  WHERE posting.staff_no = '" + staffNoArray[i] + "' AND posting.description "
                                + "=  '" + rset1As.getString(8) + "' AND posting.date <= '" + endDatePicker.getDate() + "' AND  posting.date>'2018-02-28' ");
                        while (rset4.next()) {
                            ded_ = rset4.getDouble(1);
                        }
                        if (rset1As.getString(9).equalsIgnoreCase("lesss")) {
                            bal_ = bal_ - ded_;
                        } else {
                            bal_ = bal_ + ded_;
                        }

                    }
                    valuesVector.addElement(bal_);

                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }

            rowVector.addElement(valuesVector);

        }

        reportBodyTable.setModel(new javax.swing.table.DefaultTableModel(rowVector, columnVector));

        // totalCreditSalesTxt1.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(reportBodyTable1, 5)));
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    private String getStaffName(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT staff_name FROM posting WHERE staff_no = ? AND date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffNameDirectorate(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT staff_name FROM posting WHERE staff_no = ? AND date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffScale(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT employee_grade FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffNhif(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT nhif_no FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffNssf(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT nssf_no FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffPinNo(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT pin_no FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffIDNo(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT id_no FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffDirectorate(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT directorate FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffDepartment(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT department FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    private String getStaffDes(java.sql.Connection connDB, String glCode) {
        String staffName = "";
        try {
            java.sql.PreparedStatement pstmt = connDB.prepareStatement("SELECT DISTINCT official_desgnation FROM master_file WHERE employee_no = ?  ");
            pstmt.setString(1, glCode);
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                staffName = rset.getString(1);
            }

            //activityDescription=glCode;
        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        if (staffName.length() > 1) {
            return staffName;
        } else {
            return "-";
        }
        //return activityDescription;
    }

    public java.lang.Object[] getListofEarningsDirectorate() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT description,(SELECT code from deductions_allowances where upper(posting.description)=upper(deductions_allowances.description) )  FROM posting where date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND allowance_deduction ilike 'earning%' and company_name ilike '" + bank + "' order by 2    ");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofEarnings() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT description,(SELECT code from deductions_allowances where upper(posting.description)=upper(deductions_allowances.description) )  FROM posting where date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND allowance_deduction ilike 'earning%' and company_name ilike '" + bank + "' order by 2    ");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofreliefs() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT description FROM posting where date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND allowance_deduction ilike 'less%' and company_name ilike '" + bank + "' order by description   ");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofBalances() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT  sacco_name FROM payroll_balances2 where company_name='" + bank + "' AND  sacco_name not ilike 'Staff Welfare' AND  sacco_name not ilike 'UNION DUE' ");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofDeductions() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT description FROM deduction_summary where date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' and company_name ilike '" + bank + "' order by description  ");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofnonCashBenefit() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT description FROM posting where date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND allowance_deduction ilike 'non%' and company_name ilike '" + bank + "' order by description    ");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

//    public java.lang.Object[] getListofCostCentres() {
//
//        java.lang.Object[] listofStaffNos = null;
//
//        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);
//
//        try {
//
//            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
//            java.sql.PreparedStatement stmtCostCentres = connectDB.prepareStatement("SELECT DISTINCT (SELECT ward FROM hp_admission WHERE hp_admission.patient_no = ac_ledger.patient_no AND ac_ledger.date > hp_admission.date_admitted LIMIT 1) FROM ac_ledger WHERE date BETWEEN '" + beginDatePicker6.getDate() + "' AND '" + endDatePicker6.getDate() + "' AND (SELECT ward FROM hp_admission WHERE hp_admission.patient_no = ac_ledger.patient_no AND ac_ledger.date > hp_admission.date_admitted LIMIT 1) not ilike '%mortuary%' AND (SELECT ward FROM hp_admission WHERE hp_admission.patient_no = ac_ledger.patient_no AND ac_ledger.date > hp_admission.date_admitted LIMIT 1) not ilike '%abscond%' ORDER BY 1");
//
//            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
//            java.sql.ResultSet rSetCostCentres = stmtCostCentres.executeQuery();
//
//            while (rSetCostCentres.next()) {
//
//                listStaffNoVector.addElement(rSetCostCentres.getObject(1));
//
//            }
//
//        } catch (java.sql.SQLException sqlExec) {
//            sqlExec.printStackTrace();
//            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
//
//        }
//
//        listofStaffNos = listStaffNoVector.toArray();
//        System.out.println("Done list of Staff Nos ...");
//        return listofStaffNos;
//    }
    public java.lang.Object[] getListofStaff() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = null;

            if (!dptCbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                stmtShifts = connectDB.prepareStatement("SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE master_file.department = '" + dptCbx.getSelectedItem().toString() + "' AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");
            } else if (!GradeCbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                stmtShifts = connectDB.prepareStatement("SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE master_file.employee_grade = '" + GradeCbx.getSelectedItem().toString() + "' AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");

            } else {
                stmtShifts = connectDB.prepareStatement("SELECT DISTINCT staff_no FROM posting WHERE date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND company_name ilike '" + bank + "' ORDER BY 1");

            }

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofStaffInDirectorate() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = null;

            if (directorsteCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                stmtShifts = connectDB.prepareStatement("SELECT DISTINCT posting.staff_no,master_file.directorate FROM posting,master_file WHERE  master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 2,1");

            } else {
                stmtShifts = connectDB.prepareStatement("SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE master_file.directorate = '" + directorsteCmbx.getSelectedItem().toString() + "' AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");

            }

            System.err.println("SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE master_file.directorate = '" + directorsteCmbx.getSelectedItem().toString() + "' AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofStaffInDept(String dept, String dir) {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = null;

            stmtShifts = connectDB.prepareStatement("SELECT DISTINCT posting.staff_no FROM posting,master_file WHERE master_file.directorate = '" + dir + "' AND master_file.department = '" + dept + "' AND master_file.employee_no = posting.staff_no  AND  posting.date BETWEEN '" + beginDatePicker1.getDate() + "' AND '" + endDatePicker1.getDate() + "' AND posting.company_name ilike '" + bank + "' ORDER BY 1");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }

    public java.lang.Object[] getListofRevenuePaymodes() {

        java.lang.Object[] listofStaffNos = null;

        java.util.Vector listStaffNoVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.PreparedStatement stmtShifts = connectDB.prepareStatement("SELECT DISTINCT payment_mode FROM ac_cash_collection WHERE date BETWEEN '" + beginDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND transaction_type not ilike 'BANKING' ORDER BY 1");

            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT patient_no FROM hp_patient_card WHERE date::date BETWEEN '"+beginDate+"' AND '"+endDate+"' AND payment_mode = 'Scheme' AND isurer = '"+memNo+"' order by patient_no");
            java.sql.ResultSet rSetShifts = stmtShifts.executeQuery();

            while (rSetShifts.next()) {

                listStaffNoVector.addElement(rSetShifts.getObject(1));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> GradeCbx;
    private javax.swing.JLabel beginDateLbl;
    private javax.swing.JLabel beginDateLbl1;
    private com.afrisoftech.lib.DatePicker beginDatePicker;
    private com.afrisoftech.lib.DatePicker beginDatePicker1;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel cashSalesPanel;
    private javax.swing.JButton closeBtn;
    private javax.swing.JComboBox<String> compCbx;
    private javax.swing.JComboBox directorsteCmbx;
    private javax.swing.JComboBox<String> dptCbx;
    private javax.swing.JLabel employeeGroupLbl;
    private javax.swing.JLabel endDateLbl;
    private javax.swing.JLabel endDateLbl1;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private com.afrisoftech.lib.DatePicker endDatePicker1;
    private javax.swing.JButton export2SpreadSheetBtn;
    private javax.swing.JButton export2SpreadSheetBtn1;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel headerPanel1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton openReportBtn;
    private javax.swing.JButton openReportBtn1;
    private javax.swing.JButton printBtn;
    private javax.swing.JTextField progressStatusShiftsTxt;
    private javax.swing.JButton reloadReportBtn;
    public static javax.swing.JScrollPane reportBodyJscrollPane;
    public static javax.swing.JScrollPane reportBodyJscrollPane1;
    public static javax.swing.JPanel reportBodyPanel;
    public static javax.swing.JTable reportBodyTable;
    public static javax.swing.JTable reportBodyTable1;
    private javax.swing.JButton saveReportBtn;
    private javax.swing.JLabel spaceLable;
    private javax.swing.JPanel totalsPanel;
    // End of variables declaration//GEN-END:variables

}
