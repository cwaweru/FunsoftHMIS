 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.nursing;

/**
 *
 * @author wgitau@systempartners.biz
 */
public class NursingSystemicAssessmentIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private final String ward;
    private final String patientNO;
    private final java.lang.String type;
    private final String patientType;

    /**
     * Creates new form NursingCasualty
     */
    public NursingSystemicAssessmentIntfr(java.sql.Connection connDb, java.lang.String typee, java.lang.String wardd, java.lang.String patNO, java.lang.String patYPE) {
        connectDB = connDb;
        patientNO = patNO;
        ward = wardd;
        patientType = patYPE;
        type = typee;
        this.setTitle(ward);
        System.out.println("the ward is this one " + ward);
        initComponents();
        this.setTitle(ward);
        LoadTable();

    }

    public void LoadTable() {
        switch (type) {
            case "out":
                occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT patient_no AS Patient_No, name AS Name,comments as Patient_Visist,age,gender,urgency\n"
                        + "From  hp_patient_visit   \n"
                        + " where date::date>='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "'  and hp_patient_visit.clinic='" + ward + "'   AND discharge is null ORDER BY 1"
                ));
                occupyno.setText("No of Patients in " + ward + " is :" + occupancytable.getRowCount());
                break;
            case "in":
                occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name, bed_no, wing, date_admitted, admission_no FROM hp_admission  where discharge=false and ward='" + ward + "' and check_out=false;"));
                occupyno.setText("No of Patients in " + ward + " is :" + occupancytable.getRowCount());
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientSearch = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton522 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        occpancygroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        stool = new javax.swing.ButtonGroup();
        packRdbgroupBtn = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        okupybtnngrp = new javax.swing.ButtonGroup();
        underground = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        header = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel93 = new javax.swing.JLabel();
        jPanel44 = new javax.swing.JPanel();
        nameNoTxt = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        headerDatePicker = new com.afrisoftech.lib.DatePicker();
        jPanel2 = new javax.swing.JPanel();
        systemicAssesmentTAB = new javax.swing.JTabbedPane();
        occupancy = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane11 = new javax.swing.JScrollPane();
        occupancytable = new com.afrisoftech.dbadmin.JTable();
        occupyno = new javax.swing.JLabel();
        currentOccupRbtn = new javax.swing.JCheckBox();
        nursedischarge = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        vitalSignsTable = new com.afrisoftech.dbadmin.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        neurologicalTable = new com.afrisoftech.dbadmin.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        respiratoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel48 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        cadiovascularTable = new com.afrisoftech.dbadmin.JTable();
        jPanel49 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        gastrointestinalTable = new com.afrisoftech.dbadmin.JTable();
        genitolurinarypanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        genitourinaryTable = new com.afrisoftech.dbadmin.JTable();
        genitolurinarypanel1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        musculoskeletalTable = new com.afrisoftech.dbadmin.JTable();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        integumentaryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cardexTable = new com.afrisoftech.dbadmin.JTable();
        jPanel65 = new javax.swing.JPanel();
        jScrollPane31 = new javax.swing.JScrollPane();
        implementedCareTable = new com.afrisoftech.dbadmin.JTable();
        Accumulatives = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTable6 = new com.afrisoftech.dbadmin.JTable();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTable7 = new com.afrisoftech.dbadmin.JTable();
        jPanel16 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationchart =   new com.afrisoftech.dbadmin.JTable();
        jPanel57 = new javax.swing.JPanel();
        jScrollPane29 = new javax.swing.JScrollPane();
        medReport = new com.afrisoftech.dbadmin.JTable();
        completlyAdm = new javax.swing.JRadioButton();
        currentlyAdmt = new javax.swing.JRadioButton();
        timeAdministered = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jPanel6 = new javax.swing.JPanel();
        tabbedpaneAll = new javax.swing.JTabbedPane();
        globalpane = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        firstpageHistoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        neurohistoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel60 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        gynaehistoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel79 = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        endocrinehistoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel90 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        surgeryhistoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel100 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        medicationhistoryTable = new com.afrisoftech.dbadmin.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        preoopTable = new com.afrisoftech.dbadmin.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        pdfreportTable = new com.afrisoftech.dbadmin.JTable();

        patientSearch.setModal(true);
        patientSearch.setUndecorated(true);
        patientSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        jTextField113.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField113ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton522.setText("Dispose");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearch.getContentPane().add(jSearchPanel2, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("General Nursing");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        underground.setBackground(new java.awt.Color(204, 255, 204));
        underground.setLayout(new java.awt.GridBagLayout());

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setOneTouchExpandable(true);

        header.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        header.setForeground(new java.awt.Color(0, 0, 204));
        header.setLayout(new java.awt.GridBagLayout());

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Here......", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel93.setText("Patient No/Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel17.add(jLabel93, gridBagConstraints);

        jPanel44.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel44.setLayout(new java.awt.GridBagLayout());

        nameNoTxt.setEditable(false);
        nameNoTxt.setText(patientNO);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel44.add(nameNoTxt, gridBagConstraints);

        searchButton4.setToolTipText("Search");
        searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton4.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel44.add(searchButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel17.add(jPanel44, gridBagConstraints);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel17.add(jPanel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel17.add(headerDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        header.add(jPanel17, gridBagConstraints);

        jSplitPane3.setLeftComponent(header);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        systemicAssesmentTAB.setBackground(new java.awt.Color(204, 204, 255));
        systemicAssesmentTAB.setForeground(new java.awt.Color(0, 102, 0));
        systemicAssesmentTAB.setFont(new java.awt.Font("Arial Black", 0, 15)); // NOI18N
        systemicAssesmentTAB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                systemicAssesmentTABMouseClicked(evt);
            }
        });

        occupancy.setLayout(new java.awt.GridBagLayout());

        jPanel39.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel39.add(jSeparator3, gridBagConstraints);

        occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, patient_name, bed_no, wing, date_admitted, admission_no FROM hp_admission where discharge=false and ward='"+ward+"' "));
        occupancytable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                occupancytableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(occupancytable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel39.add(jScrollPane11, gridBagConstraints);

        occupyno.setText("SHOW NO OF TRAN,REC/OCC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel39.add(occupyno, gridBagConstraints);

        currentOccupRbtn.setText("Occupancy");
        currentOccupRbtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                currentOccupRbtnItemStateChanged(evt);
            }
        });
        currentOccupRbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentOccupRbtnMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel39.add(currentOccupRbtn, gridBagConstraints);

        nursedischarge.setText("Nurse Discharge");
        nursedischarge.setEnabled(false);
        nursedischarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nursedischargeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        jPanel39.add(nursedischarge, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupancy.add(jPanel39, gridBagConstraints);

        systemicAssesmentTAB.addTab("Occupancy", occupancy);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        vitalSignsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(vitalSignsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        systemicAssesmentTAB.addTab("VITAL SIGNS", jPanel1);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel14.setLayout(new java.awt.GridBagLayout());

        neurologicalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        neurologicalTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(neurologicalTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel14.add(jScrollPane3, gridBagConstraints);

        jTabbedPane1.addTab("Neurological Observations", jPanel14);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        respiratoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(respiratoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jScrollPane5, gridBagConstraints);

        jTabbedPane1.addTab("Respiratory", jPanel8);

        jPanel48.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadiovascular", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel48.setLayout(new java.awt.GridBagLayout());

        cadiovascularTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(cadiovascularTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel48.add(jScrollPane6, gridBagConstraints);

        jTabbedPane1.addTab("Cadiovascular", jPanel48);

        jPanel49.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gastrointestinal", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel49.setLayout(new java.awt.GridBagLayout());

        gastrointestinalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(gastrointestinalTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel49.add(jScrollPane7, gridBagConstraints);

        jTabbedPane1.addTab("Gastro-intestinal", jPanel49);

        genitolurinarypanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gento-Urinary System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        genitolurinarypanel.setLayout(new java.awt.GridBagLayout());

        genitourinaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(genitourinaryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        genitolurinarypanel.add(jScrollPane8, gridBagConstraints);

        jTabbedPane1.addTab("Genito-Urinary System", genitolurinarypanel);

        genitolurinarypanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extremities", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        genitolurinarypanel1.setLayout(new java.awt.GridBagLayout());

        musculoskeletalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(musculoskeletalTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        genitolurinarypanel1.add(jScrollPane9, gridBagConstraints);

        jTabbedPane1.addTab("MusculoSkeletal", genitolurinarypanel1);

        jPanel28.setMinimumSize(new java.awt.Dimension(576, 386));
        jPanel28.setName(""); // NOI18N
        jPanel28.setPreferredSize(new java.awt.Dimension(576, 386));
        jPanel28.setLayout(new java.awt.GridBagLayout());

        integumentaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(integumentaryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel28.add(jScrollPane10, gridBagConstraints);

        jTabbedPane1.addTab("Integumentary", jPanel28);

        systemicAssesmentTAB.addTab("SYSTEMIC ASSESSMENT", jTabbedPane1);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        cardexTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(cardexTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane4, gridBagConstraints);

        systemicAssesmentTAB.addTab("CARDEX", jPanel3);

        jPanel65.setLayout(new java.awt.GridBagLayout());

        implementedCareTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane31.setViewportView(implementedCareTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel65.add(jScrollPane31, gridBagConstraints);

        systemicAssesmentTAB.addTab("IMPLEMENTED NURSING CARE", jPanel65);

        Accumulatives.setBackground(new java.awt.Color(240, 242, 241));
        Accumulatives.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 51, 255))); // NOI18N
        Accumulatives.setToolTipText("");
        Accumulatives.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        Accumulatives.setLayout(new java.awt.GridBagLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Monitor Intakes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jScrollPane22.setViewportView(jTable6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jScrollPane22, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        Accumulatives.add(jPanel13, gridBagConstraints);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Monitor Outputs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel19.setLayout(new java.awt.GridBagLayout());

        jScrollPane23.setViewportView(jTable7);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel19.add(jScrollPane23, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        Accumulatives.add(jPanel19, gridBagConstraints);

        systemicAssesmentTAB.addTab("Cumulative Fluid Intake/Output", Accumulatives);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jTabbedPane4.setForeground(new java.awt.Color(0, 0, 204));
        jTabbedPane4.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane4.setMinimumSize(new java.awt.Dimension(200, 212));
        jTabbedPane4.setPreferredSize(new java.awt.Dimension(200, 290));
        jTabbedPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane4MouseClicked(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(375, 100));

        observationchart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        observationchart.setEnabled(false);
        jScrollPane1.setViewportView(observationchart);

        jTabbedPane4.addTab("OBSERVATION CHART", jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 6.0;
        gridBagConstraints.weighty = 1.0;
        jPanel16.add(jTabbedPane4, gridBagConstraints);

        systemicAssesmentTAB.addTab("Blood Symptoms", jPanel16);

        jPanel57.setLayout(new java.awt.GridBagLayout());

        medReport.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT drug_code, date_prescribed, drug, dosage, route, frequency, no_of_days, doctor FROM nursing.medication_administration where patient_no='"+nameNoTxt.getText()+"'"));
        medReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medReportMouseClicked(evt);
            }
        });
        jScrollPane29.setViewportView(medReport);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 8.0;
        gridBagConstraints.weighty = 1.0;
        jPanel57.add(jScrollPane29, gridBagConstraints);

        completlyAdm.setText("Drugs completely Administerd ");
        completlyAdm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                completlyAdmItemStateChanged(evt);
            }
        });
        completlyAdm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completlyAdmActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel57.add(completlyAdm, gridBagConstraints);

        currentlyAdmt.setText("Drugs currently under medication");
        currentlyAdmt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                currentlyAdmtItemStateChanged(evt);
            }
        });
        currentlyAdmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentlyAdmtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel57.add(currentlyAdmt, gridBagConstraints);

        timeAdministered.setText("Times Administered");
        timeAdministered.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timeAdministeredItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel57.add(timeAdministered, gridBagConstraints);

        systemicAssesmentTAB.addTab("Medication Report", jPanel57);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jScrollPane12, gridBagConstraints);

        systemicAssesmentTAB.addTab("ITEMS BILLED", jPanel4);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        tabbedpaneAll.setBackground(new java.awt.Color(255, 255, 255));
        tabbedpaneAll.setForeground(new java.awt.Color(204, 0, 0));
        tabbedpaneAll.setFont(new java.awt.Font("Droid Serif", 1, 13)); // NOI18N
        tabbedpaneAll.setMinimumSize(new java.awt.Dimension(831, 568));
        tabbedpaneAll.setPreferredSize(new java.awt.Dimension(831, 568));

        globalpane.setLayout(new java.awt.GridBagLayout());

        firstpageHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(firstpageHistoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        globalpane.add(jScrollPane13, gridBagConstraints);

        tabbedpaneAll.addTab("General History", globalpane);

        jPanel15.setLayout(new java.awt.GridBagLayout());

        neurohistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane18.setViewportView(neurohistoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel15.add(jScrollPane18, gridBagConstraints);

        tabbedpaneAll.addTab("Respiratory/Cardiac/Neuro", jPanel15);

        jPanel60.setLayout(new java.awt.GridBagLayout());

        gynaehistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane19.setViewportView(gynaehistoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel60.add(jScrollPane19, gridBagConstraints);

        tabbedpaneAll.addTab("Gastric/Renal/Gynae", jPanel60);

        jPanel79.setLayout(new java.awt.GridBagLayout());

        endocrinehistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane20.setViewportView(endocrinehistoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel79.add(jScrollPane20, gridBagConstraints);

        tabbedpaneAll.addTab("Muscular S/Endocrine", jPanel79);

        jPanel90.setLayout(new java.awt.GridBagLayout());

        surgeryhistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(surgeryhistoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel90.add(jScrollPane14, gridBagConstraints);

        tabbedpaneAll.addTab("Blood/past surgery", jPanel90);

        jPanel100.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 153))); // NOI18N
        jPanel100.setLayout(new java.awt.GridBagLayout());

        medicationhistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug Name", "Strength", "Tablets per Day", "Number at Each Time"
            }
        ));
        jScrollPane17.setViewportView(medicationhistoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 8.0;
        gridBagConstraints.weighty = 1.0;
        jPanel100.add(jScrollPane17, gridBagConstraints);

        tabbedpaneAll.addTab("Current Medication", jPanel100);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(tabbedpaneAll, gridBagConstraints);

        systemicAssesmentTAB.addTab("Patient History", jPanel6);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        preoopTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(preoopTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jScrollPane15, gridBagConstraints);

        systemicAssesmentTAB.addTab("Pre-Operative", jPanel7);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        pdfreportTable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        pdfreportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"VITAL SIGNS", "NEUROLOGICAL", "FLUID INPUT-OUTPUT"},
                {"CARDEX", "RESPIRATORY", "BLOOD TRANSFUSION"},
                {"CARE PLAN", "CADIOVASCULAR", "MEDICATION"},
                {null, "GASTRO-INTESTINAL", "PRE-OPERATIVE"},
                {null, "GENITO-URINARY", null},
                {null, "MUSCULO-SKELETAL", null},
                {null, "INTEGUMENTARY", null}
            },
            new String [] {
                "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pdfreportTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pdfreportTableMouseClicked(evt);
            }
        });
        jScrollPane16.setViewportView(pdfreportTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jScrollPane16, gridBagConstraints);

        systemicAssesmentTAB.addTab("Nursing Reports", jPanel9);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(systemicAssesmentTAB, gridBagConstraints);

        jSplitPane3.setRightComponent(jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        underground.add(jSplitPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(underground, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed

    }//GEN-LAST:event_searchButton4ActionPerformed


    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate

    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked

// Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed
        this.patientSearch.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton522ActionPerformed

    private void jTextField113ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField113ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField113ActionPerformed

    private void systemicAssesmentTABMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_systemicAssesmentTABMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        if (this.systemicAssesmentTAB.getSelectedIndex() == 1) {
            System.out.println("Select\n"
                    + "  hp_signs_record.date,\n"
                    + "   concat(hp_signs_record.\"temp\",' Celsius') as Temp,\n"
                    + "  hp_signs_record.weight,\n"
                    + "  hp_signs_record.height,\n"
                    + "  hp_signs_record.bmi,\n"
                    + "  concat(hp_signs_record.diastolic,' mmhg') as Diastolic,\n"
                    + "   concat(hp_signs_record.systolic,' mmhg') as Systolic,\n"
                    + " concat( hp_signs_record.pulse,' b/min') as Pulse_Rate,\n"
                    + " concat( hp_signs_record.pulse_oximetry,' b/min') as Pulse_Oximetry,\n"
                    + "  concat(hp_signs_record.pulse_regularity,' b/min') as Pulse_Reqularity,\n"
                    + "   concat( hp_signs_record.resp,' b/min') as Resp,\n"
                    + "  hp_signs_record.rbs,\n"
                    + "  hp_signs_record.blood_group,\n"
                    + "  hp_signs_record.rhesus,\n"
                    + "  hp_signs_record.urinary,\n"
                    + "  hp_signs_record.type_of_pain,\n"
                    + "  hp_signs_record.pain_scale,\n"
                    + "  hp_signs_record.lung_sounds,\n"
                    + "  hp_signs_record.comments  "
                    + "From\n"
                    + "  hp_signs_record   \n"
                    + "  where     hp_signs_record.patient_no='" + nameNoTxt.getText() + "' "
                    + "   and hp_signs_record.date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1'  ");
            this.vitalSignsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "Select\n"
                    + "  hp_signs_record.date,\n"
                    + "   concat(hp_signs_record.\"temp\",' Celsius') as Temp,\n"
                    + "  hp_signs_record.weight,\n"
                    + "  hp_signs_record.height,\n"
                    + "  hp_signs_record.bmi,\n"
                    + "  concat(hp_signs_record.diastolic,' mmhg') as Diastolic,\n"
                    + "   concat(hp_signs_record.systolic,' mmhg') as Systolic,\n"
                    + " concat( hp_signs_record.pulse,' b/min') as Pulse_Rate,\n"
                    + " concat( hp_signs_record.pulse_oximetry,' b/min') as Pulse_Oximetry,\n"
                    + "  concat(hp_signs_record.pulse_regularity,' b/min') as Pulse_Reqularity,\n"
                    + "   concat( hp_signs_record.resp,' b/min') as Resp,\n"
                    + "  hp_signs_record.rbs,\n"
                    + "  hp_signs_record.blood_group,\n"
                    + "  hp_signs_record.rhesus,\n"
                    + "  hp_signs_record.urinary,\n"
                    + "  hp_signs_record.type_of_pain,\n"
                    + "  hp_signs_record.pain_scale,\n"
                    + "  hp_signs_record.lung_sounds,\n"
                    + "  hp_signs_record.comments  From\n"
                    + "  hp_signs_record "
                    + "  where     hp_signs_record.patient_no='" + nameNoTxt.getText() + "' "
                    + "   and hp_signs_record.date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1'  "));
        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 2) {
            this.neurologicalTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, visit_id, eye_open, best_mortal_response, best_verbal, \n"
                    + "       right_eye_size, left_eye_size, left_eye_size_reaction, right_eye_size_reaction, \n"
                    + "       right_arm, left_arm, right_leg, left_leg, corneal, seizure_activity, \n"
                    + "       gag, babinski, breathing_pattern, transaction_date, server_date, \n"
                    + "       total_glascow_coma\n"
                    + "  FROM nursing.neurological_observations where   "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"));

        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 3) {
            this.cardexTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "Select\n"
                    + "  nursing.nurse_cardex.urgency,\n"
                    + "  nursing.nurse_cardex.cardex\n"
                    + "From\n"
                    + "  nursing.nurse_cardex where   "
                    + "nursing.nurse_cardex.transaction_time::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "  nursing.nurse_cardex.patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_time asc"));

        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 4) {

            implementedCareTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                    "SELECT transaction_time,  diagnosis,   expected_outcome, plan_of_care, intervention,rationale, evaluation, nurse_name,implemented_by, implemented_on"
                    + " FROM nursing.nursing_care_plan  "
                    + "where   transaction_time::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and patient_id='" + nameNoTxt.getText() + "' "));

        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 5) {
            if (this.jTable6.getRowCount() > 0) {
                jTable6.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select transaction_date as date,concat(iv_type,' ',iv_amount,'ml') as Intravenous,concat(oral_type,' ',oral_amount,'ml') as Oral,concat(naso_gastric,'ml') as Naso_Gastric,concat(peg_feed,'ml') as Peg_feed,concat((iv_amount+oral_amount+naso_gastric+peg_feed),'ml') as Total from nursing.fluid_chart_input "
                        + "where patient_id='" + nameNoTxt.getText() + "' AND transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "));
                jScrollPane22.setViewportView(jTable6);
            } else if (this.jTable6.getRowCount() == 0) {
                jTable6.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "select current_date as date,\n"
                        + "'0' as Intravenous,\n"
                        + "'0' as Oral,\n"
                        + "'0' as Naso_Gastric,\n"
                        + "'0' as Peg_feed,\n"
                        + "'0' as Total\n"
                        + " from nursing.fluid_chart_input limit 1"
                ));
                jScrollPane22.setViewportView(jTable6);
            }
            if (this.jTable7.getRowCount() > 0) {
                jTable7.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select transaction_date as date,concat(urine_amount,'ml') as Urine,concat(ng_sanction,'ml') as NG_Sanction,concat((drain_one_amount+drain_two_amount+drain_three_amount+drain_four_amount+drain_five_amount),'ml') as Drains ,concat(vomitus,'ml') as Vomitus,concat((urine_amount+ng_sanction+vomitus+drain_one_amount+drain_two_amount+drain_three_amount+drain_four_amount+drain_five_amount),'ml') as Total from nursing.fluid_chart_output "
                        + "where patient_no='" + nameNoTxt.getText() + "' AND transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                        + " AND (urine_amount!=0 OR ng_sanction!=0 OR vomitus!=0 OR drain_one_amount!=0 OR drain_two_amount!=0 OR drain_three_amount!=0 OR drain_four_amount!=0 OR drain_five_amount!=0) "));
                jScrollPane23.setViewportView(jTable7);
            } else if (this.jTable7.getRowCount() == 0) {
                jTable7.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "select current_date as date,\n"
                        + "'0' as Urine,\n"
                        + "'0'  as NG_Sanction,\n"
                        + "'0'  as Drains ,\n"
                        + "'0'  as Vomitus,\n"
                        + "'0'  as Total from nursing.fluid_chart_output  limit 1 "));
                jScrollPane23.setViewportView(jTable7);

            }

        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 6) {

            observationchart.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT  blood_transfusion.exact_time, blood_transfusion.bp, blood_transfusion.temp,blood_transfusion.pulse_rate,  blood_transfusion.respiratry_rate,blood_transfusion.remarks, \n"
                    + "  blood_transfusion.hourly_rate, blood_transfusion.date_of_transfusion,blood_transfusion.done_by\n"
                    + "  FROM   nursing.blood_transfusion "
                    + " where    patient_no='" + nameNoTxt.getText().toString().trim() + "' and "
                    + "blood_transfusion.date_of_transfusion::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "));

        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 7) {
            medReport.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT drug_code, date_prescribed, drug, dosage, route, frequency, no_of_days, doctor FROM nursing.medication_administration where patient_no='" + nameNoTxt.getText() + "'"));
        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 8) {
            switch (patientType) {
                case "OP":
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "(SELECT  hp_pharmacy.paid ,hp_pharmacy.manual_pr as Receipt_NO,\n"
                            + "                    hp_pharmacy.description,\n"
                            + "                    hp_pharmacy.quantity,\n"
                            + "                    hp_pharmacy.price,\n"
                            + "                    round(hp_pharmacy.amount) AS amount,\n"
                            + "                    hp_pharmacy.date_prescribed\n"
                            + "                   FROM hp_pharmacy\n"
                            + "                  WHERE \n"
                            + "                   hp_pharmacy.date_prescribed>='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "'"
                            + " and patient_no='" + this.nameNoTxt.getText() + "')\n"
                            + "UNION ALL\n"
                            + "(SELECT hp_patient_billing.paid,hp_patient_billing.doctor as Receipt_NO,\n"
                            + "                    hp_patient_billing.service AS description,\n"
                            + "                    hp_patient_billing.quantity,\n"
                            + "                    trunc(hp_patient_billing.amount / hp_patient_billing.quantity, 2) AS price,\n"
                            + "                    hp_patient_billing.amount,\n"
                            + "                    hp_patient_billing.trans_date AS date_prescribed \n"
                            + "                   FROM hp_patient_billing\n"
                            + "                  WHERE    hp_patient_billing.trans_date >='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                            + "and patient_no='" + this.nameNoTxt.getText() + "')"));
                    break;
                case "IP":
                    System.out.println("SELECT patient_no, service, debit, "
                            + "       credit, date, activity_code, main_service, dosage, "
                            + "       paid, transaction_type, collected, description, invoice_no result_collected,  "
                            + "       gl_account\n"
                            + "  FROM hp_patient_card where service!='Receipt' and transaction_type='Billing' and  "
                            + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and billing_time::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                            + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by billing_time asc ");
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                            + "SELECT patient_no, service, debit, "
                            + "       credit, date, activity_code, main_service, dosage, "
                            + "       paid, transaction_type, collected, description, invoice_no result_collected,  "
                            + "       gl_account\n"
                            + "  FROM hp_patient_card where service!='Receipt' and transaction_type='Billing' and  "
                            + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and billing_time::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                            + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by billing_time asc "));
                    break;
            }
        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 9) {

            firstpageHistoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT   type_of_accident, \n"
                    + "       mode_of_arrival, status, patient_at_risk, medication_taken, patient_valuables, \n"
                    + "       serious_illness, specify_illness, illness_time, organ_transplant, \n"
                    + "       transplant_desc, transplant_time, drinks_alcohol, alcohol_amount, \n"
                    + "       smokes, smoking_duration, ever_smoked, stopped_smoking, alergic, \n"
                    + "       specify_alergy, social_history, specify_history, difficulty_in \n"
                    + "  FROM nursing.history_firstpage where "
                    + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by transaction_date asc "));

            //////second tab
            neurohistoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT  suffers_stroke, \n"
                    + "       stroke_effect, epileptic, epilepsy_desc, epileptic_when, suffers_depression, \n"
                    + "       depression_time, high_bp, hbp_time, chest_pain, chestpain_desc, \n"
                    + "       chestpain_time, heart_disease, disease_desc, disease_time, rheumatic_fever, \n"
                    + "       rheumatic_when, swelling_ankle, difficulty_breathing, specify_breathing, \n"
                    + "       home_oxygen, oxygen_explain, chronic, chronic_duration, chronic_desc, \n"
                    + "       chronic_amout, chronic_color, asmatic, asmatic_when \n"
                    + "  FROM nursing.respiratory_cardiac_neurohistory  where "
                    + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by transaction_date asc "));

            /////third tab
            gynaehistoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + " SELECT    kidney_disorder, \n"
                    + "       disorder_type, disorder_time, gastric_reflux, specify_gastric, \n"
                    + "       gastric_when, menstrual_period, menstrual_weeks, breast_feeding \n"
                    + "  FROM nursing.gastric_renal_gynaehistory   where "
                    + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and action_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by action_date asc "));

////fourth
            endocrinehistoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT   artificial_joints, \n"
                    + "       joint_specify, injuries, explain_injury, diabetic, controlled_by, \n"
                    + "       hepatitis, specify_hepatitis,  hepatitiswhen\n"
                    + "  FROM nursing.muscularsceletal_endocrinehistory    where "
                    + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and action_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by action_date asc "));

            //////five
            surgeryhistoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + " SELECT    blood_disorder, \n"
                    + "       specify_disorder, disorder_time, blood_transfusion, specify_transfussion, \n"
                    + "       blood_clot, specify_clot, clot_time, bleeding_tendency, specify_tendency \n"
                    + "  FROM nursing.blood_past_surgeryhistory \n"
                    + "   where "
                    + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by transaction_date asc "));
/////six

            medicationhistoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "   SELECT  drug_name strength, tablets_per_day, number_at_each_time \n"
                    + "  FROM nursing.medication_table_history  where "
                    + "   patient_no='" + nameNoTxt.getText().toString().trim() + "' and transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by transaction_date asc "));

        } else if (this.systemicAssesmentTAB.getSelectedIndex() == 10) {
            this.preoopTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + " SELECT   date_recoded, bookingno, time_recorded, operation, \n"
                    + "       dentures, jewellery, wigs, preparation, others, iv_drips, albumin, \n"
                    + "       urinalysis, sugar, bladder_check, gastric_tube, x_rays, blood_available, \n"
                    + "       consent, pre_medication, medication, ward_nurse, nursedate_time, \n"
                    + "       certifiedby, cerifieddate_time, done_by \n"
                    + "  FROM nursing.nurse_preoperative where  patient_no='" + nameNoTxt.getText().toString().trim() + "' and date_recoded::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' order by 1 asc "));

        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_systemicAssesmentTABMouseClicked

    private void occupancytableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_occupancytableMouseClicked
        this.nameNoTxt.setText(String.valueOf(this.occupancytable.getModel().getValueAt(this.occupancytable.getSelectedRow(), 0)));

    }//GEN-LAST:event_occupancytableMouseClicked

    private void currentOccupRbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentOccupRbtnMouseClicked

    }//GEN-LAST:event_currentOccupRbtnMouseClicked

    private void currentOccupRbtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_currentOccupRbtnItemStateChanged
        LoadTable();
    }//GEN-LAST:event_currentOccupRbtnItemStateChanged

    private void nursedischargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nursedischargeActionPerformed

    }//GEN-LAST:event_nursedischargeActionPerformed

    private void medReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medReportMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_medReportMouseClicked

    private void completlyAdmItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_completlyAdmItemStateChanged
        // TODO add your handling code here:
        medReport.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT drug_code, date_prescribed,  drug, dosage, route, frequency, no_of_days, doctor FROM nursing.medication_administration where patient_no='" + nameNoTxt.getText() + "' and receive=true and administer=true"));
    }//GEN-LAST:event_completlyAdmItemStateChanged

    private void completlyAdmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completlyAdmActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_completlyAdmActionPerformed

    private void currentlyAdmtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_currentlyAdmtItemStateChanged
        // TODO add your handling code here:
        medReport.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT drug_code, date_prescribed,  drug, dosage, route, frequency, no_of_days, doctor FROM nursing.medication_administration where patient_no='" + nameNoTxt.getText() + "' and receive=true and administer=false"));
    }//GEN-LAST:event_currentlyAdmtItemStateChanged

    private void currentlyAdmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentlyAdmtActionPerformed

    }//GEN-LAST:event_currentlyAdmtActionPerformed

    private void timeAdministeredItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_timeAdministeredItemStateChanged
        // TODO add your handling code here:
        medReport.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "SELECT drug_code, trans_date as date_done, drug, dosage, route, frequency, no_of_days, users as nurse FROM nursing.administered_drugs"
                + " where patient_no='" + nameNoTxt.getText() + "' order by drug_code"));
    }//GEN-LAST:event_timeAdministeredItemStateChanged

    private void jTabbedPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane4MouseClicked

    }//GEN-LAST:event_jTabbedPane4MouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        if (this.jTabbedPane1.getSelectedIndex() == 1) {
            this.respiratoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, visit_id, transaction_date, server_date, airway, \n"
                    + "       respiration, breathing_sounds, oxygen_saturation, administration_mode, \n"
                    + "       litres_per_min, saturation\n"
                    + "  FROM nursing.respiratory "
                    + "    where   "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"));

        } else if (this.jTabbedPane1.getSelectedIndex() == 2) {
            this.cadiovascularTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, visit_id, transaction_date, server_date, pulse_rate, \n"
                    + "       pulse_status, pulse_regularity, pulse_oxiemetry, pulse_comment, \n"
                    + "       exremities, action_user, ward, pollor\n"
                    + "  FROM nursing.cadiovascular where "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"));

        } else if (this.jTabbedPane1.getSelectedIndex() == 3) {
            this.gastrointestinalTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, visit_id, transaction_date, server_date, abdomen, \n"
                    + "       abdominal_status, bowl_sounds, feeding, vomitting, vomit_desc, \n"
                    + "       others, ward, action_user, comment_abdomen_status\n"
                    + "  FROM nursing.gastrointestinal where "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"));

        } else if (this.jTabbedPane1.getSelectedIndex() == 4) {

            this.genitourinaryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, visit_id, transaction_date, server_date, externalnorm, \n"
                    + "       abnormality, urine_output, urine_desc, lmp_nature, lmp_date, \n"
                    + "       action_user, ward, menarch\n"
                    + "  FROM nursing.genitourinarysystem  where "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"));

        } else if (this.jTabbedPane1.getSelectedIndex() == 5) {
            this.musculoskeletalTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, visit_id, transaction_date, server_date, deformity, \n"
                    + "       deformity_comment, move_all_extremeties, extremities_comment, \n"
                    + "       action_user\n"
                    + "  FROM nursing.musculoskeletal  where "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"
            ));

        } else if (this.jTabbedPane1.getSelectedIndex() == 6) {
            this.integumentaryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT patient_no, transaction_date, server_date, visit_id, action_user, \n"
                    + "       skin_color, skin_tugor, skin_integrity, comment, ward\n"
                    + "  FROM nursing.integumentary  where "
                    + "transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                    + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                    + "   patient_no='" + nameNoTxt.getText() + "' "
                    + "   order by 1,transaction_date asc"));

        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void pdfreportTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pdfreportTableMouseClicked
        int mouseClick = evt.getClickCount();
        if (mouseClick == 2) {
            if (!this.nameNoTxt.getText().toString().isEmpty()) {

                String header = "";
                try {
                    System.out.println("select distinct patient_no,initcap(first_name||' '||second_name) as Names,Category,residence,tel_no,last_visit "
                            + "from hp_patient_register where patient_no = '" + this.nameNoTxt.getText().toString() + "' "
                            + "union "
                            + "select distinct patient_no,initcap(first_name||' '||second_name) as Names,Category,residence,tel_no,adm_date as last_visit from hp_inpatient_register "
                            + "where patient_no ='" + this.nameNoTxt.getText().toString() + "' ");
                    java.sql.PreparedStatement pstmtVector = connectDB.prepareStatement(""
                            + "select distinct patient_no,initcap(first_name||' '||second_name) as Names,Category,residence,tel_no,last_visit "
                            + "from hp_patient_register where patient_no = '" + this.nameNoTxt.getText().toString() + "' "
                            + "union "
                            + "select distinct patient_no,initcap(first_name||' '||second_name) as Names,Category,residence,tel_no,adm_date as last_visit from hp_inpatient_register "
                            + "where patient_no ='" + this.nameNoTxt.getText().toString() + "' ");

                    java.sql.ResultSet rsetVector = pstmtVector.executeQuery();
                    if (rsetVector.next()) {
                        header = "Patient NO :-" + rsetVector.getString(1) + "        Names:-" + rsetVector.getString(2) + "\n"
                                + "Patient Category:-" + rsetVector.getString(3) + "        Last Visit:-" + rsetVector.getString(6) + "\n"
                                + "Residence:-" + rsetVector.getString(4) + "       Tel No:-" + rsetVector.getString(5) + "";
                    }
                    System.out.println(header);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                if (this.pdfreportTable.getSelectedColumn() == 0) {
                    if (this.pdfreportTable.getSelectedRow() == 0) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Vital Signs \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "Select"
                                        + "  hp_signs_record.date,"
                                        + "   concat(hp_signs_record.\"temp\",' Celsius','                       ',"
                                        + "  hp_signs_record.weight,' wght                       ',"
                                        + "  hp_signs_record.height,' hght\n',"
                                        + "  hp_signs_record.bmi,'bmi                       ',"
                                        + "  hp_signs_record.diastolic,' mmhg' ,'                       ',"
                                        + "   hp_signs_record.systolic,' mmhg','\n',"
                                        + "  hp_signs_record.pulse,' b/min'  ,'                       ',"
                                        + "   hp_signs_record.pulse_oximetry,' p. Oxi b/min' ,'                       ',"
                                        + "  hp_signs_record.pulse_regularity,' p. Reg b/min' ,'\n',"
                                        + "    hp_signs_record.resp,' Resp b/min' ,'                       ',"
                                        + "  hp_signs_record.rbs,' rbs                       ',"
                                        + "  hp_signs_record.blood_group,' bl.group\n',"
                                        + "  hp_signs_record.rhesus,' rhesus                       ',"
                                        + "  hp_signs_record.type_of_pain,' pain type                       ',"
                                        + "  hp_signs_record.pain_scale,' pain scale\n',"
                                        + "    hp_signs_record.urinary,' urinary                       ',"
                                        + "  hp_signs_record.lung_sounds,' lung sound                       ',"
                                        + "  hp_signs_record.comments ,' comm\n') as Vital_Signs From"
                                        + "  hp_signs_record   \n"
                                        + "  where     hp_signs_record.patient_no='" + nameNoTxt.getText() + "'   and hp_signs_record.date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1'   "
                                        + "   order by 1 asc"));

//vital signs
                    }
                    if (this.pdfreportTable.getSelectedRow() == 1) {

                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Cardex \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "Select\n"
                                        + "  nursing.nurse_cardex.urgency,\n"
                                        + "  nursing.nurse_cardex.cardex,transaction_time \n"
                                        + "From\n"
                                        + "  nursing.nurse_cardex where   "
                                        + "nursing.nurse_cardex.transaction_time::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                                        + "  nursing.nurse_cardex.patient_no='" + nameNoTxt.getText() + "' "
                                        + "   order by 1,transaction_time asc"));

                        //cardex
                    }
                    if (this.pdfreportTable.getSelectedRow() == 2) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Plan Of Care \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT transaction_time,  diagnosis,   expected_outcome, plan_of_care, intervention,rationale, evaluation, nurse_name,implemented_by, implemented_on"
                                        + " FROM nursing.nursing_care_plan  "
                                        + "where   transaction_time::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_id='" + nameNoTxt.getText() + "' "));

                        //ccare plan
                    }
                }
                ///end of 1

                if (this.pdfreportTable.getSelectedColumn() == 1) {

                    if (this.pdfreportTable.getSelectedRow() == 0) {

                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Neurological Observations \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT neurological_observations.patient_no,\n"
                                        + "    neurological_observations.transaction_date,\n"
                                        + "    "
                                        + "    concat('EYE OPEN ', neurological_observations.eye_open, '\nBEST MORTAL ', neurological_observations.best_mortal_response, '\n','BEST VERBAL ', neurological_observations.best_verbal) AS neuro1,\n"
                                        + "    concat(' L EYE SIZE ', neurological_observations.left_eye_size, '\nREACTION ', neurological_observations.left_eye_size_reaction, '\nR EYE SIZE ', neurological_observations.right_eye_size, '\nREACTION ', neurological_observations.right_eye_size_reaction) AS neuro2,\n"
                                        + "    concat(' RIGHT ARM ', neurological_observations.right_arm, '\nLEFT ARM ', neurological_observations.left_arm, '\nRIGHT LEG ', neurological_observations.right_leg, '\nLEFT LEG ', neurological_observations.left_leg) AS neuro3,\n"
                                        + "    concat(' CORNEAL ', neurological_observations.corneal, '\nSEIZURE ', neurological_observations.seizure_activity, '\nGAG ', neurological_observations.gag, '\nBABINSKI ', neurological_observations.babinski) AS neuro4,\n"
                                        + "    concat(' BREATH PATTERN ', neurological_observations.breathing_pattern, '\nTOTAL GLASCOW', neurological_observations.total_glascow_coma) AS neuro5\n"
                                        + "   FROM nursing.neurological_observations "
                                        + " where transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' and"
                                        + "   patient_no='" + nameNoTxt.getText() + "' "
                                        + "   order by 1  asc"));
                    //neurogical
                        //  fdfdf
                    }
                    if (this.pdfreportTable.getSelectedRow() == 1) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Respiration \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT \n"
                                        + "    respiratory.transaction_date, concat('AIRWAY ', respiratory.airway, '\nRESPIRATION ', respiratory.respiration, '\nBREATH SOUNDS ', respiratory.breathing_sounds, '\nOXYGEN SATURATION ', respiratory.oxygen_saturation) AS resp1,\n"
                                        + "    concat(' MODE OF ADMIN ', respiratory.administration_mode, '\nLTRS/MIN ', respiratory.litres_per_min, '\nSATURATION ', respiratory.saturation) AS resp2\n"
                                        + "   FROM nursing.respiratory "
                                        + "where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' "));

                        //respiration
                    }
                    if (this.pdfreportTable.getSelectedRow() == 2) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Cadiovascular \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT  transaction_date, pulse_rate, \n"
                                        + "       pulse_status, pulse_regularity, pulse_oxiemetry, pulse_comment, \n"
                                        + "       exremities,   pollor\n"
                                        + "  FROM nursing.cadiovascular "
                                        + "where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' "));

                        //cadiovascular
                    }

                    if (this.pdfreportTable.getSelectedRow() == 3) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Gastro-Intestinal \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT  Transaction_date,   abdomen, \n"
                                        + "       abdominal_status, bowl_sounds, feeding, vomitting, vomit_desc, \n"
                                        + "       others,   comment_abdomen_status\n"
                                        + "  FROM nursing.gastrointestinal  "
                                        + "where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' "));

                        //Gastro intestinal
                    }

                    if (this.pdfreportTable.getSelectedRow() == 4) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Genito-Urinary \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT   transaction_date,  externalnorm, \n"
                                        + "       abnormality, urine_output, urine_desc, lmp_nature, lmp_date, \n"
                                        + "       menarch\n"
                                        + "  FROM nursing.genitourinarysystem  "
                                        + "where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' "
                                ));

                        //Genito-Urinary
                    }
                    if (this.pdfreportTable.getSelectedRow() == 5) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Muscular Skeletal \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + " SELECT  transaction_date,   deformity, \n"
                                        + "       deformity_comment, move_all_extremeties, extremities_comment \n"
                                        + "  FROM nursing.musculoskeletal "
                                        + "where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' "
                                ));

                        //muscular skeletal
                    }
                    if (this.pdfreportTable.getSelectedRow() == 6) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Integumentary \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT   transaction_date,  \n"
                                        + "       skin_color, skin_tugor, skin_integrity, comment \n"
                                        + "  FROM nursing.integumentary  "
                                        + "where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' "
                                ));

                        //Integumentary
                    }

                }
                ///end of 2

                if (this.pdfreportTable.getSelectedColumn() == 2) {
                    if (this.pdfreportTable.getSelectedRow() == 0) {
                        System.out.println("SELECT 'INPUT',\n"
                                        + "    fluid_chart_input.transaction_date, \n"
                                        + "    concat('IV TYPE ', fluid_chart_input.iv_type, ' IV RATE ', fluid_chart_input.iv_rate, '\nSTART TIME ', fluid_chart_input.iv_time_start, ' IV AMOUNT ', fluid_chart_input.iv_amount, ' IV INSTR ', fluid_chart_input.iv_instructions) AS iv,\n"
                                        + "    concat(' ORAL TYPE ', fluid_chart_input.oral_type, ' ORAL INST ', fluid_chart_input.oral_fluids_instructions, '\nORAL AMNT ', fluid_chart_input.oral_amount) AS oral,\n"
                                        + "    concat('NASO ', fluid_chart_input.naso_gastric, 'NASO INST ', fluid_chart_input.naso_instructions) AS naso,\n"
                                        + "    concat(' PEG FEED ', fluid_chart_input.peg_feed) AS peg_feed\n"
                                        + "   FROM nursing.fluid_chart_input\n"
                                        + " where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + " and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + " and patient_no='" + nameNoTxt.getText() + "' "
                                        + " union\n"
                                        + " SELECT  'OUTPUT',\n"
                                        + "    fluid_chart_output.transaction_date,\n"
                                        + "    concat('DRAIN 1: ', fluid_chart_output.drain_one, ' ', fluid_chart_output.drain_one_amount, '\nDRAIN  2: ', fluid_chart_output.drain_two, ' ', fluid_chart_output.drain_two_amount, '\nDRAIN  3: ', fluid_chart_output.drain_three, ' ',\n"
                                        + "     fluid_chart_output.drain_three_amount, '\nDRAIN  4: ', fluid_chart_output.drain_four, ' ', fluid_chart_output.drain_four_amount, '\nDRAIN  5: ', fluid_chart_output.drain_five, ' ', fluid_chart_output.drain_five_amount) AS DRAIN,\n"
                                        + "    concat(' urine state ', fluid_chart_output.urine_state, ' AMNT ', fluid_chart_output.urine_amount) AS urine,\n"
                                        + "    concat(' STOOL ', fluid_chart_output.stool) AS stool,\n"
                                        + "    concat(' NG ', fluid_chart_output.ng_sanction,'   VOMITUS ', fluid_chart_output.vomitus) AS NG_vomitus \n"
                                        + "     \n"
                                        + "   FROM nursing.fluid_chart_output"
                                        + " where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + " and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + " and patient_no='" + nameNoTxt.getText() + "' ");
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Fluid Input and Output \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT 'INPUT',\n"
                                        + "    fluid_chart_input.transaction_date, \n"
                                        + "    concat('IV TYPE ', fluid_chart_input.iv_type, ' IV RATE ', fluid_chart_input.iv_rate, '\nSTART TIME ', fluid_chart_input.iv_time_start, ' IV AMOUNT ', fluid_chart_input.iv_amount, ' IV INSTR ', fluid_chart_input.iv_instructions) AS iv,\n"
                                        + "    concat(' ORAL TYPE ', fluid_chart_input.oral_type, ' ORAL INST ', fluid_chart_input.oral_fluids_instructions, '\nORAL AMNT ', fluid_chart_input.oral_amount) AS oral,\n"
                                        + "    concat('NASO ', fluid_chart_input.naso_gastric, 'NASO INST ', fluid_chart_input.naso_instructions) AS naso,\n"
                                        + "    concat(' PEG FEED ', fluid_chart_input.peg_feed) AS peg_feed\n"
                                        + "   FROM nursing.fluid_chart_input\n"
                                        + " where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + " and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + " and patient_id='" + nameNoTxt.getText() + "' "
                                        + " union\n"
                                        + " SELECT  'OUTPUT',\n"
                                        + "    fluid_chart_output.transaction_date,\n"
                                        + "    concat('DRAIN 1: ', fluid_chart_output.drain_one, ' ', fluid_chart_output.drain_one_amount, '\nDRAIN  2: ', fluid_chart_output.drain_two, ' ', fluid_chart_output.drain_two_amount, '\nDRAIN  3: ', fluid_chart_output.drain_three, ' ',\n"
                                        + "     fluid_chart_output.drain_three_amount, '\nDRAIN  4: ', fluid_chart_output.drain_four, ' ', fluid_chart_output.drain_four_amount, '\nDRAIN  5: ', fluid_chart_output.drain_five, ' ', fluid_chart_output.drain_five_amount) AS DRAIN,\n"
                                        + "    concat(' urine state ', fluid_chart_output.urine_state, ' AMNT ', fluid_chart_output.urine_amount) AS urine,\n"
                                        + "    concat(' STOOL ', fluid_chart_output.stool) AS stool,\n"
                                        + "    concat(' NG ', fluid_chart_output.ng_sanction,'   VOMITUS ', fluid_chart_output.vomitus) AS NG_vomitus \n"
                                        + "     \n"
                                        + "   FROM nursing.fluid_chart_output"
                                        + " where   transaction_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + " and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + " and patient_no='" + nameNoTxt.getText() + "' "
                                ));

                        //Integumentary
                    }
                    if (this.pdfreportTable.getSelectedRow() == 1) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Blood Transfusion  \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT  \n"
                                        + "    blood_transfusion.date_of_transfusion,\n"
                                        + "    concat('BLOOD TYPE ', blood_transfusion.blood_type, ' START TIME ', blood_transfusion.start_time, '\nTRANSFUSION RATE ', blood_transfusion.transfusion_rate, ' STARTED BY ', blood_transfusion.started_by, '\nCOUNTER CHECKED BY ', blood_transfusion.counter_checkedby) AS details,\n"
                                        + "   concat( blood_transfusion.hourly_rate,\n"
                                        + "    'bp:-',blood_transfusion.bp,\n"
                                        + "    ' temp:-',blood_transfusion.temp,\n"
                                        + "    ' RR:-',blood_transfusion.respiratry_rate,\n"
                                        + "    ' PR:-',blood_transfusion.pulse_rate,\n"
                                        + "    ' time:-',blood_transfusion.exact_time,\n"
                                        + "    ' End Time:-',blood_transfusion.time_ended,\n"
                                        + "   ' Remarks', blood_transfusion.remarks) as Observations,\n"
                                        + "    concat(' GENERAL ', blood_symptoms.general, ' CARDIAC RESPIRATORY ', blood_symptoms.cardaic_respiratory, '\nHAEMOTOLOGICAL ', blood_symptoms.haematological, ' DERMATOLOGICAL ', blood_symptoms.dermatological, '\nRENAL ', blood_symptoms.renal, ' OTHERS ', blood_symptoms.others) AS symptoms,\n"
                                        + "    blood_transfusion.blood_unit_pack as Blood_Pack, blood_symptoms.done_by \n"
                                        + "   FROM nursing.blood_transfusion,\n"
                                        + "    nursing.blood_symptoms "
                                        + "where   nursing.blood_transfusion.date_of_transfusion::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and nursing.blood_transfusion.patient_no='" + nameNoTxt.getText() + "'"
                                        + " and nursing.blood_symptoms.date_recoded::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and nursing.blood_symptoms.patient_no='" + nameNoTxt.getText() + "' "
                                ));

                        //Blood Transfusion
                    }
                    if (this.pdfreportTable.getSelectedRow() == 2) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Medication \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + "SELECT trans_date as date_done, drug_code, drug, dosage, route, frequency, no_of_days, users as nurse FROM nursing.administered_drugs"
                                        + "where   trans_date::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "' order by drug_code"
                                ));

                        //medication
                    }
                    if (this.pdfreportTable.getSelectedRow() == 3) {
                        com.afrisoftech.lib.FunsoftCustomPdf pdf = new com.afrisoftech.lib.FunsoftCustomPdf();
                        pdf.FunsoftCustomPdf(connectDB, header + "\n                Patient Pre-Operative \n",
                                com.afrisoftech.lib.EditorTextSetUp.editorGetText(connectDB, ""
                                        + " SELECT    bookingno,date_recoded, operation, \n"
                                        + "      concat('Dentures ', dentures, '\nJewellery ',jewellery, '\nWigs ',wigs,'\nPreparation ', preparation,' \nOthers ', others) as preo1, \n"
                                        + "     concat( 'IV ',iv_drips, '\nALB',albumin, \n"
                                        + "       '\nURI',urinalysis, '\nBS',sugar,'\nBladder', bladder_check)  as preo2,\n"
                                        + "       concat( 'Gastric ',gastric_tube, '\nX-Ray ',x_rays, '\nBlood ',blood_available) as preo3, \n"
                                        + "      concat('Conscent', consent, '\nPre-Med', pre_medication, '\nbMedication',medication) as preo4,\n"
                                        + "       concat('Ward Nurse ',ward_nurse,' date ', nursedate_time, \n"
                                        + "       '\nCertified by ',certifiedby, ' date ',cerifieddate_time) as preo5\n"
                                        + "  FROM nursing.nurse_preoperative "
                                        + "where   date_recoded::date between '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "' "
                                        + "and  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "+1' "
                                        + "and patient_no='" + nameNoTxt.getText() + "'  "
                                ));

                        //preoperative
                    }
                }
                ///end of 3
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Please Select Patient NO First", "Error Message!second", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        //end ofclick
    }//GEN-LAST:event_pdfreportTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Accumulatives;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JTable cadiovascularTable;
    private javax.swing.JTable cardexTable;
    private javax.swing.JRadioButton completlyAdm;
    private javax.swing.JCheckBox currentOccupRbtn;
    private javax.swing.JRadioButton currentlyAdmt;
    private javax.swing.JTable endocrinehistoryTable;
    private javax.swing.JTable firstpageHistoryTable;
    private javax.swing.JTable gastrointestinalTable;
    private javax.swing.JPanel genitolurinarypanel;
    private javax.swing.JPanel genitolurinarypanel1;
    private javax.swing.JTable genitourinaryTable;
    public static javax.swing.JPanel globalpane;
    private javax.swing.JTable gynaehistoryTable;
    private javax.swing.JPanel header;
    private com.afrisoftech.lib.DatePicker headerDatePicker;
    private javax.swing.JTable implementedCareTable;
    private javax.swing.JTable integumentaryTable;
    private javax.swing.JButton jButton522;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel100;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel79;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel90;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTable medReport;
    private javax.swing.JTable medicationhistoryTable;
    private javax.swing.JTable musculoskeletalTable;
    private javax.swing.JTextField nameNoTxt;
    private javax.swing.JTable neurohistoryTable;
    private javax.swing.JTable neurologicalTable;
    private javax.swing.JButton nursedischarge;
    public static javax.swing.JTable observationchart;
    private javax.swing.ButtonGroup occpancygroup;
    private javax.swing.JPanel occupancy;
    private javax.swing.JTable occupancytable;
    private javax.swing.JLabel occupyno;
    private javax.swing.ButtonGroup okupybtnngrp;
    private javax.swing.ButtonGroup packRdbgroupBtn;
    private javax.swing.JDialog patientSearch;
    private javax.swing.JTable pdfreportTable;
    private javax.swing.JTable preoopTable;
    private javax.swing.JTable respiratoryTable;
    private javax.swing.JButton searchButton4;
    private javax.swing.ButtonGroup stool;
    private javax.swing.JTable surgeryhistoryTable;
    private javax.swing.JTabbedPane systemicAssesmentTAB;
    private javax.swing.JTabbedPane tabbedpaneAll;
    private javax.swing.JRadioButton timeAdministered;
    private javax.swing.JPanel underground;
    private javax.swing.JTable vitalSignsTable;
    // End of variables declaration//GEN-END:variables

}
